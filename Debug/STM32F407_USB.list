
STM32F407_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f418  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  0800f5a0  0800f5a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdcc  0800fdcc  0001107c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fdcc  0800fdcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdd4  0800fdd4  0001107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdd4  0800fdd4  00010dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fdd8  0800fdd8  00010dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800fddc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001107c  2**0
                  CONTENTS
 10 .bss          000022e0  20000080  20000080  00011080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002360  20002360  00011080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c31a  00000000  00000000  000110ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c3d  00000000  00000000  0002d3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  00032008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001005  00000000  00000000  000334e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002652f  00000000  00000000  000344ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fc6e  00000000  00000000  0005aa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0650  00000000  00000000  0007a68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014acda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058ac  00000000  00000000  0014ad20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  001505cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f588 	.word	0x0800f588

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800f588 	.word	0x0800f588

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <crc32b>:
/* USER CODE BEGIN 0 */

// Calculate CRC32 of a block of data, actual CRC32 is the inverse of the returned value
#define CRC32_START 0xFFFFFFFF
uint32_t crc32b(uint32_t crc, uint8_t *data, uint32_t size)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b087      	sub	sp, #28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < size; i++)
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	e01d      	b.n	8000542 <crc32b+0x4e>
	{
		crc = crc ^ data[i];
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	68ba      	ldr	r2, [r7, #8]
 800050a:	4413      	add	r3, r2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4053      	eors	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
		for (int j = 8; j; j--)
 8000516:	2308      	movs	r3, #8
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	e00c      	b.n	8000536 <crc32b+0x42>
			crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	085a      	lsrs	r2, r3, #1
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	4259      	negs	r1, r3
 8000528:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <crc32b+0x64>)
 800052a:	400b      	ands	r3, r1
 800052c:	4053      	eors	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]
		for (int j = 8; j; j--)
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3b01      	subs	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d1ef      	bne.n	800051c <crc32b+0x28>
	for (int i = 0; i < size; i++)
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	3301      	adds	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	429a      	cmp	r2, r3
 8000548:	d8dd      	bhi.n	8000506 <crc32b+0x12>
	}
	return crc;
 800054a:	68fb      	ldr	r3, [r7, #12]
}
 800054c:	4618      	mov	r0, r3
 800054e:	371c      	adds	r7, #28
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	edb88320 	.word	0xedb88320

0800055c <uart_printf>:
#ifdef VERBOSE_MODE // No serial output if not in VERBOSE_MODE

// Super lightweight printf, prints to uart (DEBUG_USART_HANDLE), no floats, no width control
// Takes only about 700 bytes of program memory, printf takes 2.5K of flash space
void uart_printf(const char * fmt, ...)
{
 800055c:	b40f      	push	{r0, r1, r2, r3}
 800055e:	b580      	push	{r7, lr}
 8000560:	b0d2      	sub	sp, #328	@ 0x148
 8000562:	af00      	add	r7, sp, #0
	va_list va;
    va_start(va, fmt);
 8000564:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8000568:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    char debug_msg[255]; // Message buffer
    char * buf = debug_msg;
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    char c;
    unsigned int num;
    while ((c  = *(fmt++)))
 8000574:	e134      	b.n	80007e0 <uart_printf+0x284>
    {
    	int width = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    	if (c == '%')
 800057c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8000580:	2b25      	cmp	r3, #37	@ 0x25
 8000582:	f040 8125 	bne.w	80007d0 <uart_printf+0x274>
        {
            int base = 2;
 8000586:	2302      	movs	r3, #2
 8000588:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
            int s_int = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        MORE_FORMAT:
            c = *(fmt++); // Skip '%', check parameter
 8000592:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            switch (c)
 80005a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80005a6:	2b78      	cmp	r3, #120	@ 0x78
 80005a8:	f300 811a 	bgt.w	80007e0 <uart_printf+0x284>
 80005ac:	2b62      	cmp	r3, #98	@ 0x62
 80005ae:	da09      	bge.n	80005c4 <uart_printf+0x68>
 80005b0:	2b25      	cmp	r3, #37	@ 0x25
 80005b2:	d04b      	beq.n	800064c <uart_printf+0xf0>
 80005b4:	2b25      	cmp	r3, #37	@ 0x25
 80005b6:	f2c0 8113 	blt.w	80007e0 <uart_printf+0x284>
 80005ba:	3b30      	subs	r3, #48	@ 0x30
 80005bc:	2b09      	cmp	r3, #9
 80005be:	f200 810f 	bhi.w	80007e0 <uart_printf+0x284>
 80005c2:	e035      	b.n	8000630 <uart_printf+0xd4>
 80005c4:	3b62      	subs	r3, #98	@ 0x62
 80005c6:	2b16      	cmp	r3, #22
 80005c8:	f200 810a 	bhi.w	80007e0 <uart_printf+0x284>
 80005cc:	a201      	add	r2, pc, #4	@ (adr r2, 80005d4 <uart_printf+0x78>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080006c1 	.word	0x080006c1
 80005d8:	0800065d 	.word	0x0800065d
 80005dc:	08000679 	.word	0x08000679
 80005e0:	080007e1 	.word	0x080007e1
 80005e4:	080007e1 	.word	0x080007e1
 80005e8:	080007e1 	.word	0x080007e1
 80005ec:	080007e1 	.word	0x080007e1
 80005f0:	08000679 	.word	0x08000679
 80005f4:	080007e1 	.word	0x080007e1
 80005f8:	080007e1 	.word	0x080007e1
 80005fc:	080007e1 	.word	0x080007e1
 8000600:	080007e1 	.word	0x080007e1
 8000604:	080007e1 	.word	0x080007e1
 8000608:	080007e1 	.word	0x080007e1
 800060c:	080007e1 	.word	0x080007e1
 8000610:	080007e1 	.word	0x080007e1
 8000614:	080007e1 	.word	0x080007e1
 8000618:	0800079b 	.word	0x0800079b
 800061c:	080007e1 	.word	0x080007e1
 8000620:	080006b7 	.word	0x080006b7
 8000624:	080007e1 	.word	0x080007e1
 8000628:	080007e1 	.word	0x080007e1
 800062c:	080006ad 	.word	0x080006ad
            {
                case '0'...'9': // Width indicators
                  width = (width * 10) + c - '0';
 8000630:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000634:	4613      	mov	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	461a      	mov	r2, r3
 800063e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8000642:	4413      	add	r3, r2
 8000644:	3b30      	subs	r3, #48	@ 0x30
 8000646:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800064a:	e7a2      	b.n	8000592 <uart_printf+0x36>
                goto MORE_FORMAT;

                case '%': // "%%" prints "%"
                    *(buf++) = '%';
 800064c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8000656:	2225      	movs	r2, #37	@ 0x25
 8000658:	701a      	strb	r2, [r3, #0]
                break;
 800065a:	e0c1      	b.n	80007e0 <uart_printf+0x284>

                case 'c': // Character
                    *(buf++) = va_arg(va, int);
 800065c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000660:	1d1a      	adds	r2, r3, #4
 8000662:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 8000666:	6819      	ldr	r1, [r3, #0]
 8000668:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8000672:	b2ca      	uxtb	r2, r1
 8000674:	701a      	strb	r2, [r3, #0]
                break;
 8000676:	e0b3      	b.n	80007e0 <uart_printf+0x284>

                case 'd': // Signed integer
                case 'i': base = 10;
 8000678:	230a      	movs	r3, #10
 800067a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                    s_int = va_arg(va, int);
 800067e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000682:	1d1a      	adds	r2, r3, #4
 8000684:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                    if (s_int < 0)
 800068e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000692:	2b00      	cmp	r3, #0
 8000694:	da05      	bge.n	80006a2 <uart_printf+0x146>
                       num = -s_int;
 8000696:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800069a:	425b      	negs	r3, r3
 800069c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                    else
                      num = s_int;
                  goto ATOI;
 80006a0:	e016      	b.n	80006d0 <uart_printf+0x174>
                      num = s_int;
 80006a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80006a6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                  goto ATOI;
 80006aa:	e011      	b.n	80006d0 <uart_printf+0x174>
                case 'x':      // Hexadecimal, base 16
                    base += 6; // 2 + 6 + 8 is base 16
 80006ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80006b0:	3306      	adds	r3, #6
 80006b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                case 'u':      // Unsigned integer, base 10
        	        base += 8; // 2 + 8 is base 10
 80006b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80006ba:	3308      	adds	r3, #8
 80006bc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                case 'b':      // Binary, base 2
        	        num = va_arg(va, unsigned int);
 80006c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80006c4:	1d1a      	adds	r2, r3, #4
 80006c6:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                  ATOI:
                    char tmp[32]; // 32bit
                    char *q = tmp;
 80006d0:	463b      	mov	r3, r7
 80006d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

                    do {
                        int rem = '0' + (num % base);
 80006d6:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80006da:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80006de:	fbb3 f1f2 	udiv	r1, r3, r2
 80006e2:	fb01 f202 	mul.w	r2, r1, r2
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	3330      	adds	r3, #48	@ 0x30
 80006ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
                        if (rem > '9')
 80006ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80006f2:	2b39      	cmp	r3, #57	@ 0x39
 80006f4:	dd04      	ble.n	8000700 <uart_printf+0x1a4>
                          rem += 7; // Map to 'ABCDEF'
 80006f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80006fa:	3307      	adds	r3, #7
 80006fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
                        *(q++) = rem;
 8000700:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 800070a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800070e:	b2d2      	uxtb	r2, r2
 8000710:	701a      	strb	r2, [r3, #0]
                    } while ((num /= base));
 8000712:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000716:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8000722:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1d5      	bne.n	80006d6 <uart_printf+0x17a>

                    if (s_int < 0)
 800072a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800072e:	2b00      	cmp	r3, #0
 8000730:	da06      	bge.n	8000740 <uart_printf+0x1e4>
                      *(q++) = '-';
 8000732:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 800073c:	222d      	movs	r2, #45	@ 0x2d
 800073e:	701a      	strb	r2, [r3, #0]

                    width -= q - tmp;
 8000740:	463b      	mov	r3, r7
 8000742:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    while (width-- > 0)
 8000752:	e006      	b.n	8000762 <uart_printf+0x206>
                      *(buf++) = ' ';
 8000754:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 800075e:	2220      	movs	r2, #32
 8000760:	701a      	strb	r2, [r3, #0]
                    while (width-- > 0)
 8000762:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000766:	1e5a      	subs	r2, r3, #1
 8000768:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800076c:	2b00      	cmp	r3, #0
 800076e:	dcf1      	bgt.n	8000754 <uart_printf+0x1f8>

                   while (tmp < q) // Reverse data order, "123" --> "321"
 8000770:	e00d      	b.n	800078e <uart_printf+0x232>
                       *(buf++) = *(--q);
 8000772:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000776:	3b01      	subs	r3, #1
 8000778:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800077c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8000786:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	701a      	strb	r2, [r3, #0]
                   while (tmp < q) // Reverse data order, "123" --> "321"
 800078e:	463b      	mov	r3, r7
 8000790:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8000794:	429a      	cmp	r2, r3
 8000796:	d8ec      	bhi.n	8000772 <uart_printf+0x216>
                break;
 8000798:	e022      	b.n	80007e0 <uart_printf+0x284>

                case 's':  // String
                    const char *p = va_arg(va, const char *);
 800079a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800079e:	1d1a      	adds	r2, r3, #4
 80007a0:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                    while (*p)
 80007aa:	e00b      	b.n	80007c4 <uart_printf+0x268>
                        *(buf++) = *(p++);
 80007ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80007b0:	1c53      	adds	r3, r2, #1
 80007b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80007b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007ba:	1c59      	adds	r1, r3, #1
 80007bc:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	701a      	strb	r2, [r3, #0]
                    while (*p)
 80007c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1ee      	bne.n	80007ac <uart_printf+0x250>
 80007ce:	e007      	b.n	80007e0 <uart_printf+0x284>
            }
        }
        else
            *(buf++) = c; // Copy literal characters
 80007d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80007da:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 80007de:	701a      	strb	r2, [r3, #0]
    while ((c  = *(fmt++)))
 80007e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80007f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f47f aebe 	bne.w	8000576 <uart_printf+0x1a>
    }
    *buf = '\0'; // Terminate string
 80007fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]

    va_end(va);


	HAL_UART_Transmit(&DEBUG_USART_HANDLE, (uint8_t *)debug_msg, buf - debug_msg, HAL_MAX_DELAY);
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 0120 	add.w	r1, r7, #32
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	4808      	ldr	r0, [pc, #32]	@ (8000838 <uart_printf+0x2dc>)
 8000818:	f004 fca8 	bl	800516c <HAL_UART_Transmit>
	#ifdef PROGRESS_LED_PIN
		HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN); // Flash LED
 800081c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000820:	4806      	ldr	r0, [pc, #24]	@ (800083c <uart_printf+0x2e0>)
 8000822:	f001 fb5c 	bl	8001ede <HAL_GPIO_TogglePin>
	#endif
}
 8000826:	bf00      	nop
 8000828:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800082c:	46bd      	mov	sp, r7
 800082e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000832:	b004      	add	sp, #16
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	200000bc 	.word	0x200000bc
 800083c:	40020000 	.word	0x40020000

08000840 <set_magic_key>:

#ifdef DFU_ON_DOUBLE_RESET

    #if (DFU_MAGIC_KEY_ADDRESS < 0xFF)
  	    // Use RTC backup register
	    void set_magic_key(int value) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	        HAL_PWR_EnableBkUpAccess();
 8000848:	f003 fc98 	bl	800417c <HAL_PWR_EnableBkUpAccess>
	        HAL_RTCEx_BKUPWrite(&hrtc, DFU_MAGIC_KEY_ADDRESS, value);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	461a      	mov	r2, r3
 8000850:	2113      	movs	r1, #19
 8000852:	4804      	ldr	r0, [pc, #16]	@ (8000864 <set_magic_key+0x24>)
 8000854:	f004 fc08 	bl	8005068 <HAL_RTCEx_BKUPWrite>
	        HAL_PWR_DisableBkUpAccess();
 8000858:	f003 fca4 	bl	80041a4 <HAL_PWR_DisableBkUpAccess>
	    }
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000009c 	.word	0x2000009c

08000868 <compareFlashToFile>:

#endif

// Return value: 0=equal, 1=different, 2=error
uint32_t compareFlashToFile(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
	uint32_t i = 0, j;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
	int result = f_lseek(&fwFile, 0); // Not strictly needed
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	f04f 0300 	mov.w	r3, #0
 800087a:	4839      	ldr	r0, [pc, #228]	@ (8000960 <compareFlashToFile+0xf8>)
 800087c:	f00d fc46 	bl	800e10c <f_lseek>
 8000880:	4603      	mov	r3, r0
 8000882:	617b      	str	r3, [r7, #20]
	uint32_t crc32 = CRC32_START;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	613b      	str	r3, [r7, #16]
    int difference_found = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
    int different = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
    unsigned int bytesRead;

	while ((i < appSize) && !result)
 8000892:	e03f      	b.n	8000914 <compareFlashToFile+0xac>
	{
		result = f_read(&fwFile, appBuffer, FILE_BUFFER_SIZE, &bytesRead);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800089a:	4932      	ldr	r1, [pc, #200]	@ (8000964 <compareFlashToFile+0xfc>)
 800089c:	4830      	ldr	r0, [pc, #192]	@ (8000960 <compareFlashToFile+0xf8>)
 800089e:	f00d f97f 	bl	800dba0 <f_read>
 80008a2:	4603      	mov	r3, r0
 80008a4:	617b      	str	r3, [r7, #20]
		crc32 = crc32b(crc32, appBuffer, bytesRead);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	461a      	mov	r2, r3
 80008aa:	492e      	ldr	r1, [pc, #184]	@ (8000964 <compareFlashToFile+0xfc>)
 80008ac:	6938      	ldr	r0, [r7, #16]
 80008ae:	f7ff fe21 	bl	80004f4 <crc32b>
 80008b2:	6138      	str	r0, [r7, #16]
		j = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
		while ((j < bytesRead) && !result)
 80008b8:	e013      	b.n	80008e2 <compareFlashToFile+0x7a>
		{
			if (*(__IO char*)(FLASH_USER_START_ADDR + i + j) != appBuffer[j])
 80008ba:	69fa      	ldr	r2, [r7, #28]
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	4413      	add	r3, r2
 80008c0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80008c4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4925      	ldr	r1, [pc, #148]	@ (8000964 <compareFlashToFile+0xfc>)
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	440b      	add	r3, r1
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d001      	beq.n	80008dc <compareFlashToFile+0x74>
				difference_found = 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
			j++;
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	3301      	adds	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
		while ((j < bytesRead) && !result)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d202      	bcs.n	80008f0 <compareFlashToFile+0x88>
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0e4      	beq.n	80008ba <compareFlashToFile+0x52>
		}
		if (difference_found)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d007      	beq.n	8000906 <compareFlashToFile+0x9e>
		{
			uart_printf("*");
 80008f6:	481c      	ldr	r0, [pc, #112]	@ (8000968 <compareFlashToFile+0x100>)
 80008f8:	f7ff fe30 	bl	800055c <uart_printf>
			different = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
			difference_found = 0; // Reset
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e002      	b.n	800090c <compareFlashToFile+0xa4>
		}
		else
			uart_printf("=");
 8000906:	4819      	ldr	r0, [pc, #100]	@ (800096c <compareFlashToFile+0x104>)
 8000908:	f7ff fe28 	bl	800055c <uart_printf>

		i += bytesRead;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	4413      	add	r3, r2
 8000912:	61fb      	str	r3, [r7, #28]
	while ((i < appSize) && !result)
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <compareFlashToFile+0x108>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	69fa      	ldr	r2, [r7, #28]
 800091a:	429a      	cmp	r2, r3
 800091c:	d202      	bcs.n	8000924 <compareFlashToFile+0xbc>
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0b7      	beq.n	8000894 <compareFlashToFile+0x2c>
	}

	if (result)
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d005      	beq.n	8000936 <compareFlashToFile+0xce>
	{
		uart_printf(" Error\r\nFile read error: %u\r\n", result);
 800092a:	6979      	ldr	r1, [r7, #20]
 800092c:	4811      	ldr	r0, [pc, #68]	@ (8000974 <compareFlashToFile+0x10c>)
 800092e:	f7ff fe15 	bl	800055c <uart_printf>
		return 2;
 8000932:	2302      	movs	r3, #2
 8000934:	e010      	b.n	8000958 <compareFlashToFile+0xf0>
	}
	else
	if (different)
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <compareFlashToFile+0xdc>
		uart_printf(" Different\r\nFlash contents differs, update is required\r\n");
 800093c:	480e      	ldr	r0, [pc, #56]	@ (8000978 <compareFlashToFile+0x110>)
 800093e:	f7ff fe0d 	bl	800055c <uart_printf>
 8000942:	e008      	b.n	8000956 <compareFlashToFile+0xee>
	else {
		uart_printf(" Equal\r\nFlash contents is the same, update is not required\r\n");
 8000944:	480d      	ldr	r0, [pc, #52]	@ (800097c <compareFlashToFile+0x114>)
 8000946:	f7ff fe09 	bl	800055c <uart_printf>
        // Actual checksum is the inverse of the returned number
	    uart_printf("Flash CRC32: 0x%x\r\n", ~crc32);
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	43db      	mvns	r3, r3
 800094e:	4619      	mov	r1, r3
 8000950:	480b      	ldr	r0, [pc, #44]	@ (8000980 <compareFlashToFile+0x118>)
 8000952:	f7ff fe03 	bl	800055c <uart_printf>
	}

	return different; // 0=equal, 1=different
 8000956:	68bb      	ldr	r3, [r7, #8]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000340 	.word	0x20000340
 8000964:	20000598 	.word	0x20000598
 8000968:	0800f5a0 	.word	0x0800f5a0
 800096c:	0800f5a4 	.word	0x0800f5a4
 8000970:	20000594 	.word	0x20000594
 8000974:	0800f5a8 	.word	0x0800f5a8
 8000978:	0800f5c8 	.word	0x0800f5c8
 800097c:	0800f604 	.word	0x0800f604
 8000980:	0800f644 	.word	0x0800f644

08000984 <CopyFileToFlashMemory>:

int CopyFileToFlashMemory(void)
{
 8000984:	b5b0      	push	{r4, r5, r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
	Sector  8 0x0804 0000 - 0x0805 FFFF 128KB
	Sector  9 0x0804 0000 - 0x0805 FFFF 128KB
	Sector 10 0x0804 0000 - 0x0805 FFFF 128KB
	Sector 11 0x080E 0000 - 0x080F FFFF 128KB */

	uint32_t flash_sector_size = 0x10000U;
 800098a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24

	// Erase required sectors to fit the user application
	uint32_t erasedSize = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
	uint32_t sector = FLASH_USER_START_SECTOR;
 8000994:	2304      	movs	r3, #4
 8000996:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock();
 8000998:	f000 ff42 	bl	8001820 <HAL_FLASH_Unlock>
	FRESULT result = f_lseek(&fwFile, 0);
 800099c:	f04f 0200 	mov.w	r2, #0
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	4853      	ldr	r0, [pc, #332]	@ (8000af4 <CopyFileToFlashMemory+0x170>)
 80009a6:	f00d fbb1 	bl	800e10c <f_lseek>
 80009aa:	4603      	mov	r3, r0
 80009ac:	76fb      	strb	r3, [r7, #27]

	while ((erasedSize < appSize) && !result)
 80009ae:	e014      	b.n	80009da <CopyFileToFlashMemory+0x56>
	{
		uart_printf("Erasing flash sector: %u  Sector size: %3uKB\r\n", sector, flash_sector_size >> 10);
 80009b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b2:	0a9b      	lsrs	r3, r3, #10
 80009b4:	461a      	mov	r2, r3
 80009b6:	69f9      	ldr	r1, [r7, #28]
 80009b8:	484f      	ldr	r0, [pc, #316]	@ (8000af8 <CopyFileToFlashMemory+0x174>)
 80009ba:	f7ff fdcf 	bl	800055c <uart_printf>
		FLASH_Erase_Sector(sector, FLASH_VOLTAGE_RANGE_3);
 80009be:	2102      	movs	r1, #2
 80009c0:	69f8      	ldr	r0, [r7, #28]
 80009c2:	f001 f88f 	bl	8001ae4 <FLASH_Erase_Sector>

		erasedSize += flash_sector_size;
 80009c6:	6a3a      	ldr	r2, [r7, #32]
 80009c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ca:	4413      	add	r3, r2
 80009cc:	623b      	str	r3, [r7, #32]
		flash_sector_size = 0x20000; // The remaining sectors are 128KB
 80009ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
		sector++;
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
	while ((erasedSize < appSize) && !result)
 80009da:	4b48      	ldr	r3, [pc, #288]	@ (8000afc <CopyFileToFlashMemory+0x178>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6a3a      	ldr	r2, [r7, #32]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d202      	bcs.n	80009ea <CopyFileToFlashMemory+0x66>
 80009e4:	7efb      	ldrb	r3, [r7, #27]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0e2      	beq.n	80009b0 <CopyFileToFlashMemory+0x2c>
	}

    uart_printf("Flashing user application to: 0x0%x\r\n", FLASH_USER_START_ADDR);
 80009ea:	4945      	ldr	r1, [pc, #276]	@ (8000b00 <CopyFileToFlashMemory+0x17c>)
 80009ec:	4845      	ldr	r0, [pc, #276]	@ (8000b04 <CopyFileToFlashMemory+0x180>)
 80009ee:	f7ff fdb5 	bl	800055c <uart_printf>
	uint32_t byteCounter = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
	uint32_t i;
	uint32_t file_crc32 = CRC32_START;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	60fb      	str	r3, [r7, #12]
	unsigned int bytesRead;

	while ((byteCounter < appSize) && !result)
 80009fc:	e047      	b.n	8000a8e <CopyFileToFlashMemory+0x10a>
	{
		result = f_read(&fwFile, appBuffer, FILE_BUFFER_SIZE, &bytesRead);
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a04:	4940      	ldr	r1, [pc, #256]	@ (8000b08 <CopyFileToFlashMemory+0x184>)
 8000a06:	483b      	ldr	r0, [pc, #236]	@ (8000af4 <CopyFileToFlashMemory+0x170>)
 8000a08:	f00d f8ca 	bl	800dba0 <f_read>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	76fb      	strb	r3, [r7, #27]
		file_crc32 = crc32b(file_crc32, appBuffer, bytesRead);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	461a      	mov	r2, r3
 8000a14:	493c      	ldr	r1, [pc, #240]	@ (8000b08 <CopyFileToFlashMemory+0x184>)
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f7ff fd6c 	bl	80004f4 <crc32b>
 8000a1c:	60f8      	str	r0, [r7, #12]

		if (bytesRead < FILE_BUFFER_SIZE) // Add some "erased flash" bytes to the buffer
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a24:	d20a      	bcs.n	8000a3c <CopyFileToFlashMemory+0xb8>
			memset(appBuffer + bytesRead, 0xFF, (FILE_BUFFER_SIZE - bytesRead) % FLASHWORD);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a37      	ldr	r2, [pc, #220]	@ (8000b08 <CopyFileToFlashMemory+0x184>)
 8000a2a:	1898      	adds	r0, r3, r2
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	425b      	negs	r3, r3
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	461a      	mov	r2, r3
 8000a36:	21ff      	movs	r1, #255	@ 0xff
 8000a38:	f00e fd0a 	bl	800f450 <memset>

		// Write the data to flash memory
		i = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
		while ((i < bytesRead) && !result)
 8000a40:	e017      	b.n	8000a72 <CopyFileToFlashMemory+0xee>
		{
			result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + byteCounter + i, *((volatile uint32_t*)(appBuffer + i)));
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4413      	add	r3, r2
 8000a48:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000a4c:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4a2d      	ldr	r2, [pc, #180]	@ (8000b08 <CopyFileToFlashMemory+0x184>)
 8000a54:	4413      	add	r3, r2
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	461c      	mov	r4, r3
 8000a5c:	4615      	mov	r5, r2
 8000a5e:	4622      	mov	r2, r4
 8000a60:	462b      	mov	r3, r5
 8000a62:	2002      	movs	r0, #2
 8000a64:	f000 fe88 	bl	8001778 <HAL_FLASH_Program>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	76fb      	strb	r3, [r7, #27]
			i += FLASHWORD;
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	613b      	str	r3, [r7, #16]
		while ((i < bytesRead) && !result)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d202      	bcs.n	8000a80 <CopyFileToFlashMemory+0xfc>
 8000a7a:	7efb      	ldrb	r3, [r7, #27]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0e0      	beq.n	8000a42 <CopyFileToFlashMemory+0xbe>
		}
		byteCounter += bytesRead;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	4413      	add	r3, r2
 8000a86:	617b      	str	r3, [r7, #20]
		uart_printf("=");
 8000a88:	4820      	ldr	r0, [pc, #128]	@ (8000b0c <CopyFileToFlashMemory+0x188>)
 8000a8a:	f7ff fd67 	bl	800055c <uart_printf>
	while ((byteCounter < appSize) && !result)
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <CopyFileToFlashMemory+0x178>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d202      	bcs.n	8000a9e <CopyFileToFlashMemory+0x11a>
 8000a98:	7efb      	ldrb	r3, [r7, #27]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0af      	beq.n	80009fe <CopyFileToFlashMemory+0x7a>
	}

	HAL_FLASH_Lock();
 8000a9e:	f000 fee1 	bl	8001864 <HAL_FLASH_Lock>

	if (!result) // All went OK, verify flash contents
 8000aa2:	7efb      	ldrb	r3, [r7, #27]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d11b      	bne.n	8000ae0 <CopyFileToFlashMemory+0x15c>
	{
		// Actual checksum is the inverse of the returned number
		uint32_t crc_flash = ~crc32b(CRC32_START, (uint8_t*)FLASH_USER_START_ADDR, appSize);
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <CopyFileToFlashMemory+0x178>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4914      	ldr	r1, [pc, #80]	@ (8000b00 <CopyFileToFlashMemory+0x17c>)
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff fd1e 	bl	80004f4 <crc32b>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	43db      	mvns	r3, r3
 8000abc:	60bb      	str	r3, [r7, #8]
		if (~file_crc32 != crc_flash)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d003      	beq.n	8000ad0 <CopyFileToFlashMemory+0x14c>
			uart_printf("* Verify failed");
 8000ac8:	4811      	ldr	r0, [pc, #68]	@ (8000b10 <CopyFileToFlashMemory+0x18c>)
 8000aca:	f7ff fd47 	bl	800055c <uart_printf>
 8000ace:	e002      	b.n	8000ad6 <CopyFileToFlashMemory+0x152>
		else
			uart_printf(" Verify OK\r\n");
 8000ad0:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <CopyFileToFlashMemory+0x190>)
 8000ad2:	f7ff fd43 	bl	800055c <uart_printf>

		uart_printf("Flash CRC32: 0x%x\r\n", crc_flash);
 8000ad6:	68b9      	ldr	r1, [r7, #8]
 8000ad8:	480f      	ldr	r0, [pc, #60]	@ (8000b18 <CopyFileToFlashMemory+0x194>)
 8000ada:	f7ff fd3f 	bl	800055c <uart_printf>
 8000ade:	e004      	b.n	8000aea <CopyFileToFlashMemory+0x166>
	}
	else
		uart_printf(" failed: %u\r\n", result);
 8000ae0:	7efb      	ldrb	r3, [r7, #27]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <CopyFileToFlashMemory+0x198>)
 8000ae6:	f7ff fd39 	bl	800055c <uart_printf>

	return result;
 8000aea:	7efb      	ldrb	r3, [r7, #27]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3728      	adds	r7, #40	@ 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bdb0      	pop	{r4, r5, r7, pc}
 8000af4:	20000340 	.word	0x20000340
 8000af8:	0800f658 	.word	0x0800f658
 8000afc:	20000594 	.word	0x20000594
 8000b00:	08010000 	.word	0x08010000
 8000b04:	0800f688 	.word	0x0800f688
 8000b08:	20000598 	.word	0x20000598
 8000b0c:	0800f5a4 	.word	0x0800f5a4
 8000b10:	0800f6b0 	.word	0x0800f6b0
 8000b14:	0800f6c0 	.word	0x0800f6c0
 8000b18:	0800f644 	.word	0x0800f644
 8000b1c:	0800f6d0 	.word	0x0800f6d0

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	@ 0x38
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b26:	f000 fc39 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2a:	f000 f9d5 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2e:	f000 fa8f 	bl	8001050 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b32:	f000 fa63 	bl	8000ffc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000b36:	f006 f843 	bl	8006bc0 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000b3a:	f00e f8bb 	bl	800ecb4 <MX_USB_HOST_Init>
  MX_RTC_Init();
 8000b3e:	f000 fa37 	bl	8000fb0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Enable all the GPIO clocks for the configurable pin below
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN);
 8000b42:	4ba4      	ldr	r3, [pc, #656]	@ (8000dd4 <main+0x2b4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4aa3      	ldr	r2, [pc, #652]	@ (8000dd4 <main+0x2b4>)
 8000b48:	f043 031f 	orr.w	r3, r3, #31
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30

#ifdef DFU_ON_DOUBLE_RESET

#if (DFU_MAGIC_KEY_ADDRESS < 0xFF)
	if (HAL_RTCEx_BKUPRead(&hrtc, DFU_MAGIC_KEY_ADDRESS) == DFU_MAGIC_KEY) // Detect memory marker
 8000b4e:	2113      	movs	r1, #19
 8000b50:	48a1      	ldr	r0, [pc, #644]	@ (8000dd8 <main+0x2b8>)
 8000b52:	f004 faa3 	bl	800509c <HAL_RTCEx_BKUPRead>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4aa0      	ldr	r2, [pc, #640]	@ (8000ddc <main+0x2bc>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d149      	bne.n	8000bf2 <main+0xd2>
#else
	if (*(__IO uint32_t*)DFU_MAGIC_KEY_ADDRESS == DFU_MAGIC_KEY) // Detect marker in RTC backup register
#endif
	{
		set_magic_key(0);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fe6e 	bl	8000840 <set_magic_key>
		MX_GPIO_Init();
 8000b64:	f000 fa74 	bl	8001050 <MX_GPIO_Init>
		MX_USART1_UART_Init();
 8000b68:	f000 fa48 	bl	8000ffc <MX_USART1_UART_Init>
		uart_printf("\r\nStarting DFU mode\r\n");
 8000b6c:	489c      	ldr	r0, [pc, #624]	@ (8000de0 <main+0x2c0>)
 8000b6e:	f7ff fcf5 	bl	800055c <uart_printf>
        HAL_Delay(25);
 8000b72:	2019      	movs	r0, #25
 8000b74:	f000 fcba 	bl	80014ec <HAL_Delay>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop

		__disable_irq(); // Disable all interrupts
		HAL_SuspendTick(); // Suspend tick interrupt
 8000b7c:	f000 fcda 	bl	8001534 <HAL_SuspendTick>
        SysTick->CTRL = SysTick->LOAD = SysTick->VAL = 0;
 8000b80:	4a98      	ldr	r2, [pc, #608]	@ (8000de4 <main+0x2c4>)
 8000b82:	2300      	movs	r3, #0
 8000b84:	6093      	str	r3, [r2, #8]
 8000b86:	4a97      	ldr	r2, [pc, #604]	@ (8000de4 <main+0x2c4>)
 8000b88:	6053      	str	r3, [r2, #4]
 8000b8a:	4a96      	ldr	r2, [pc, #600]	@ (8000de4 <main+0x2c4>)
 8000b8c:	6013      	str	r3, [r2, #0]
		RCC->CIR = 0;     // Disable clock interrupts
 8000b8e:	4b91      	ldr	r3, [pc, #580]	@ (8000dd4 <main+0x2b4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
		HAL_RCC_DeInit(); // Set the clock to the default state
 8000b94:	f004 f894 	bl	8004cc0 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000b98:	f000 fc22 	bl	80013e0 <HAL_DeInit>
		// Clear Interrupt Enable Register & Interrupt Pending Register
		uint8_t cnt = (sizeof(NVIC->ICER) / sizeof(*NVIC->ICER));
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		for (int i = 0; i < cnt; i++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ba6:	e010      	b.n	8000bca <main+0xaa>
		    NVIC->ICER[i] = 0xFFFFFFFF;
 8000ba8:	4a8f      	ldr	r2, [pc, #572]	@ (8000de8 <main+0x2c8>)
 8000baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bac:	3320      	adds	r3, #32
 8000bae:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		    NVIC->ICPR[i] = 0xFFFFFFFF;
 8000bb6:	4a8c      	ldr	r2, [pc, #560]	@ (8000de8 <main+0x2c8>)
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bba:	3360      	adds	r3, #96	@ 0x60
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < cnt; i++) {
 8000bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dbe9      	blt.n	8000ba8 <main+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bd4:	b662      	cpsie	i
}
 8000bd6:	bf00      	nop
		}
		__enable_irq();

		uint32_t *vtor = (void*)DFU_BOOTLOADER_ADDRESS;
 8000bd8:	4b84      	ldr	r3, [pc, #528]	@ (8000dec <main+0x2cc>)
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
		SCB->VTOR = (uint32_t)vtor;
 8000bdc:	4a84      	ldr	r2, [pc, #528]	@ (8000df0 <main+0x2d0>)
 8000bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be0:	6093      	str	r3, [r2, #8]

		// Make the jump
		asm volatile("MSR msp,%0\nbx %1" : : "r"(vtor[0]), "r"(vtor[1]));
 8000be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000be8:	3204      	adds	r2, #4
 8000bea:	6812      	ldr	r2, [r2, #0]
 8000bec:	f383 8808 	msr	MSP, r3
 8000bf0:	4710      	bx	r2
	}

	set_magic_key(DFU_MAGIC_KEY);
 8000bf2:	487a      	ldr	r0, [pc, #488]	@ (8000ddc <main+0x2bc>)
 8000bf4:	f7ff fe24 	bl	8000840 <set_magic_key>

	// Wait for 2nd reset click while DFU marker is set
	HAL_Delay(500);
 8000bf8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bfc:	f000 fc76 	bl	80014ec <HAL_Delay>
	set_magic_key(0);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fe1d 	bl	8000840 <set_magic_key>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uart_printf("\r\nUSB bootloader started\r\n");
 8000c06:	487b      	ldr	r0, [pc, #492]	@ (8000df4 <main+0x2d4>)
 8000c08:	f7ff fca8 	bl	800055c <uart_printf>

  #ifdef PROGRESS_LED_PIN
  	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  	GPIO_InitStruct.Pin = PROGRESS_LED_PIN;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c20:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  	HAL_GPIO_Init(PROGRESS_LED_PORT, &GPIO_InitStruct);
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4619      	mov	r1, r3
 8000c34:	4870      	ldr	r0, [pc, #448]	@ (8000df8 <main+0x2d8>)
 8000c36:	f000 ff9d 	bl	8001b74 <HAL_GPIO_Init>
  #endif

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c3a:	f00e f861 	bl	800ed00 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

	// Timeout counter
	if (HAL_GetTick() > 2500) // Requires about 1200-2200ms
 8000c3e:	f000 fc49 	bl	80014d4 <HAL_GetTick>
 8000c42:	4603      	mov	r3, r0
 8000c44:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	f200 8092 	bhi.w	8000d72 <main+0x252>
		goto USER_APP;

	HAL_Delay(1);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f000 fc4c 	bl	80014ec <HAL_Delay>

	if (Appli_state == APPLICATION_READY)
 8000c54:	4b69      	ldr	r3, [pc, #420]	@ (8000dfc <main+0x2dc>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d1ee      	bne.n	8000c3a <main+0x11a>
	{
		// Mount the FAT file system
		result = f_mount(&FatFs, (TCHAR const*)USBHPath, 1);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4968      	ldr	r1, [pc, #416]	@ (8000e00 <main+0x2e0>)
 8000c60:	4868      	ldr	r0, [pc, #416]	@ (8000e04 <main+0x2e4>)
 8000c62:	f00c fc9b 	bl	800d59c <f_mount>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b67      	ldr	r3, [pc, #412]	@ (8000e08 <main+0x2e8>)
 8000c6c:	701a      	strb	r2, [r3, #0]
        if (result)
 8000c6e:	4b66      	ldr	r3, [pc, #408]	@ (8000e08 <main+0x2e8>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00e      	beq.n	8000c94 <main+0x174>
        {
		    if (result == 3)
 8000c76:	4b64      	ldr	r3, [pc, #400]	@ (8000e08 <main+0x2e8>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d103      	bne.n	8000c86 <main+0x166>
		    	uart_printf("No medium mounted, status: 3\r\n");
 8000c7e:	4863      	ldr	r0, [pc, #396]	@ (8000e0c <main+0x2ec>)
 8000c80:	f7ff fc6c 	bl	800055c <uart_printf>
		    else
		    	uart_printf("ERROR: USB mounting failed, not FAT/exFAT formatted? Error: %u\r\n", result);

            goto USER_APP;
 8000c84:	e078      	b.n	8000d78 <main+0x258>
		    	uart_printf("ERROR: USB mounting failed, not FAT/exFAT formatted? Error: %u\r\n", result);
 8000c86:	4b60      	ldr	r3, [pc, #384]	@ (8000e08 <main+0x2e8>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4860      	ldr	r0, [pc, #384]	@ (8000e10 <main+0x2f0>)
 8000c8e:	f7ff fc65 	bl	800055c <uart_printf>
            goto USER_APP;
 8000c92:	e071      	b.n	8000d78 <main+0x258>
        }

		uart_printf(FIRMWARE_FILENAME);
 8000c94:	485f      	ldr	r0, [pc, #380]	@ (8000e14 <main+0x2f4>)
 8000c96:	f7ff fc61 	bl	800055c <uart_printf>
        if (f_open(&fwFile, FIRMWARE_FILENAME, FA_READ))
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	495d      	ldr	r1, [pc, #372]	@ (8000e14 <main+0x2f4>)
 8000c9e:	485e      	ldr	r0, [pc, #376]	@ (8000e18 <main+0x2f8>)
 8000ca0:	f00c fcc2 	bl	800d628 <f_open>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <main+0x192>
        {
        	uart_printf(" not found\r\n");
 8000caa:	485c      	ldr	r0, [pc, #368]	@ (8000e1c <main+0x2fc>)
 8000cac:	f7ff fc56 	bl	800055c <uart_printf>
            goto USER_APP;
 8000cb0:	e062      	b.n	8000d78 <main+0x258>
        }
        uart_printf(" opened successfully\r\n");
 8000cb2:	485b      	ldr	r0, [pc, #364]	@ (8000e20 <main+0x300>)
 8000cb4:	f7ff fc52 	bl	800055c <uart_printf>

        appSize = f_size(&fwFile);
 8000cb8:	4b57      	ldr	r3, [pc, #348]	@ (8000e18 <main+0x2f8>)
 8000cba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000cbe:	4b59      	ldr	r3, [pc, #356]	@ (8000e24 <main+0x304>)
 8000cc0:	601a      	str	r2, [r3, #0]

        // Get device flash size from memory (in KBytes)
        __IO uint16_t flashSize = *(uint32_t*)(FLASHSIZE_BASE);
 8000cc2:	4b59      	ldr	r3, [pc, #356]	@ (8000e28 <main+0x308>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	80fb      	strh	r3, [r7, #6]
        uart_printf("Total flash memory size: %uKB\r\n", flashSize);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4856      	ldr	r0, [pc, #344]	@ (8000e2c <main+0x30c>)
 8000cd2:	f7ff fc43 	bl	800055c <uart_printf>

        uint32_t freeFlash = (flashSize << 10) - FLASH_BOOTLOADER_SIZE;
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	029b      	lsls	r3, r3, #10
 8000cdc:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
        uart_printf("Free flash memory space: %uKB\r\n", freeFlash >> 10);
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	0a9b      	lsrs	r3, r3, #10
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4851      	ldr	r0, [pc, #324]	@ (8000e30 <main+0x310>)
 8000cea:	f7ff fc37 	bl	800055c <uart_printf>

        uart_printf("Firmware update size: %uKB\r\n", appSize >> 10);
 8000cee:	4b4d      	ldr	r3, [pc, #308]	@ (8000e24 <main+0x304>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	0a9b      	lsrs	r3, r3, #10
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	484f      	ldr	r0, [pc, #316]	@ (8000e34 <main+0x314>)
 8000cf8:	f7ff fc30 	bl	800055c <uart_printf>

        if (appSize > freeFlash)
 8000cfc:	4b49      	ldr	r3, [pc, #292]	@ (8000e24 <main+0x304>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d206      	bcs.n	8000d14 <main+0x1f4>
        {
        	uart_printf("ERROR: Insufficient free flash space, aborting\r\n");
 8000d06:	484c      	ldr	r0, [pc, #304]	@ (8000e38 <main+0x318>)
 8000d08:	f7ff fc28 	bl	800055c <uart_printf>
            f_close(&fwFile); // Not strictly needed, comment out to save some flash space
 8000d0c:	4842      	ldr	r0, [pc, #264]	@ (8000e18 <main+0x2f8>)
 8000d0e:	f00d f9d3 	bl	800e0b8 <f_close>
            goto USER_APP;
 8000d12:	e031      	b.n	8000d78 <main+0x258>
        }

        #ifdef COMPARE_BEFORE_FLASH

        uart_printf("Comparing file to flash contents\r\n");
 8000d14:	4849      	ldr	r0, [pc, #292]	@ (8000e3c <main+0x31c>)
 8000d16:	f7ff fc21 	bl	800055c <uart_printf>

            result = compareFlashToFile();
 8000d1a:	f7ff fda5 	bl	8000868 <compareFlashToFile>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b39      	ldr	r3, [pc, #228]	@ (8000e08 <main+0x2e8>)
 8000d24:	701a      	strb	r2, [r3, #0]
            if (result < 0) // File read error
                goto USER_APP;

            if (result == 1) // Flash is different, update required
 8000d26:	4b38      	ldr	r3, [pc, #224]	@ (8000e08 <main+0x2e8>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d105      	bne.n	8000d3a <main+0x21a>
                result = CopyFileToFlashMemory();
 8000d2e:	f7ff fe29 	bl	8000984 <CopyFileToFlashMemory>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b34      	ldr	r3, [pc, #208]	@ (8000e08 <main+0x2e8>)
 8000d38:	701a      	strb	r2, [r3, #0]

            result = CopyFileToFlashMemory();

        #endif

        f_close(&fwFile); // Must close file before renaming
 8000d3a:	4837      	ldr	r0, [pc, #220]	@ (8000e18 <main+0x2f8>)
 8000d3c:	f00d f9bc 	bl	800e0b8 <f_close>

        #ifdef FIRMWARE_RENAME
            if (!result) // Only rename/delete if file was flashed successfully
 8000d40:	4b31      	ldr	r3, [pc, #196]	@ (8000e08 <main+0x2e8>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d116      	bne.n	8000d76 <main+0x256>
            {
                f_unlink(FIRMWARE_RENAME); // Delete the old firmware (if present)
 8000d48:	483d      	ldr	r0, [pc, #244]	@ (8000e40 <main+0x320>)
 8000d4a:	f00d fc24 	bl	800e596 <f_unlink>

                if (f_rename(FIRMWARE_FILENAME, FIRMWARE_RENAME) != FR_OK)
 8000d4e:	493c      	ldr	r1, [pc, #240]	@ (8000e40 <main+0x320>)
 8000d50:	4830      	ldr	r0, [pc, #192]	@ (8000e14 <main+0x2f4>)
 8000d52:	f00d fd02 	bl	800e75a <f_rename>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <main+0x244>
                	uart_printf("ERROR: Failed to rename firmware file to ");
 8000d5c:	4839      	ldr	r0, [pc, #228]	@ (8000e44 <main+0x324>)
 8000d5e:	f7ff fbfd 	bl	800055c <uart_printf>
 8000d62:	e002      	b.n	8000d6a <main+0x24a>
                else
                	uart_printf("Renaming file to ");
 8000d64:	4838      	ldr	r0, [pc, #224]	@ (8000e48 <main+0x328>)
 8000d66:	f7ff fbf9 	bl	800055c <uart_printf>
                uart_printf(FIRMWARE_RENAME "\r\n");
 8000d6a:	4838      	ldr	r0, [pc, #224]	@ (8000e4c <main+0x32c>)
 8000d6c:	f7ff fbf6 	bl	800055c <uart_printf>
 8000d70:	e002      	b.n	8000d78 <main+0x258>
		goto USER_APP;
 8000d72:	bf00      	nop
 8000d74:	e000      	b.n	8000d78 <main+0x258>
            }

        #endif

USER_APP:
 8000d76:	bf00      	nop

        set_magic_key(0); // IMPORTANT, KEEP HERE
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fd61 	bl	8000840 <set_magic_key>

        f_mount(NULL, "", 0); // Unmount USB, not strictly needed, comment out to save some flash
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4933      	ldr	r1, [pc, #204]	@ (8000e50 <main+0x330>)
 8000d82:	2000      	movs	r0, #0
 8000d84:	f00c fc0a 	bl	800d59c <f_mount>

        if (*(__IO uint32_t*)FLASH_USER_START_ADDR != 0xFFFFFFFF) // Check if flash is empty
 8000d88:	4b32      	ldr	r3, [pc, #200]	@ (8000e54 <main+0x334>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d90:	f000 8089 	beq.w	8000ea6 <main+0x386>
        {
            uart_printf("Starting user application at: 0x0%x\r\n", FLASH_USER_START_ADDR);
 8000d94:	492f      	ldr	r1, [pc, #188]	@ (8000e54 <main+0x334>)
 8000d96:	4830      	ldr	r0, [pc, #192]	@ (8000e58 <main+0x338>)
 8000d98:	f7ff fbe0 	bl	800055c <uart_printf>
            HAL_Delay(25);
 8000d9c:	2019      	movs	r0, #25
 8000d9e:	f000 fba5 	bl	80014ec <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8000da2:	b672      	cpsid	i
}
 8000da4:	bf00      	nop

    		__disable_irq(); // Disable all interrupts
    		HAL_SuspendTick(); // Suspend tick interrupt
 8000da6:	f000 fbc5 	bl	8001534 <HAL_SuspendTick>
            SysTick->CTRL = SysTick->LOAD = SysTick->VAL = 0;
 8000daa:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <main+0x2c4>)
 8000dac:	2300      	movs	r3, #0
 8000dae:	6093      	str	r3, [r2, #8]
 8000db0:	4a0c      	ldr	r2, [pc, #48]	@ (8000de4 <main+0x2c4>)
 8000db2:	6053      	str	r3, [r2, #4]
 8000db4:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <main+0x2c4>)
 8000db6:	6013      	str	r3, [r2, #0]
    		RCC->CIR = 0;     // Disable clock interrupts
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <main+0x2b4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    		HAL_RCC_DeInit(); // Set the clock to the default state
 8000dbe:	f003 ff7f 	bl	8004cc0 <HAL_RCC_DeInit>
    		HAL_DeInit();
 8000dc2:	f000 fb0d 	bl	80013e0 <HAL_DeInit>
    		// Clear Interrupt Enable Register & Interrupt Pending Register
    		uint8_t cnt = (sizeof(NVIC->ICER) / sizeof(*NVIC->ICER));
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    		for (int i = 0; i < cnt; i++) {
 8000dcc:	2300      	movs	r3, #0
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
 8000dd0:	e055      	b.n	8000e7e <main+0x35e>
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	2000009c 	.word	0x2000009c
 8000ddc:	ba55ba11 	.word	0xba55ba11
 8000de0:	0800f6e0 	.word	0x0800f6e0
 8000de4:	e000e010 	.word	0xe000e010
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	1fff0000 	.word	0x1fff0000
 8000df0:	e000ed00 	.word	0xe000ed00
 8000df4:	0800f6f8 	.word	0x0800f6f8
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	20001e34 	.word	0x20001e34
 8000e00:	200015c4 	.word	0x200015c4
 8000e04:	20000104 	.word	0x20000104
 8000e08:	20000590 	.word	0x20000590
 8000e0c:	0800f714 	.word	0x0800f714
 8000e10:	0800f734 	.word	0x0800f734
 8000e14:	0800f778 	.word	0x0800f778
 8000e18:	20000340 	.word	0x20000340
 8000e1c:	0800f788 	.word	0x0800f788
 8000e20:	0800f798 	.word	0x0800f798
 8000e24:	20000594 	.word	0x20000594
 8000e28:	1fff7a22 	.word	0x1fff7a22
 8000e2c:	0800f7b0 	.word	0x0800f7b0
 8000e30:	0800f7d0 	.word	0x0800f7d0
 8000e34:	0800f7f0 	.word	0x0800f7f0
 8000e38:	0800f810 	.word	0x0800f810
 8000e3c:	0800f844 	.word	0x0800f844
 8000e40:	0800f868 	.word	0x0800f868
 8000e44:	0800f878 	.word	0x0800f878
 8000e48:	0800f8a4 	.word	0x0800f8a4
 8000e4c:	0800f8b8 	.word	0x0800f8b8
 8000e50:	0800f8c8 	.word	0x0800f8c8
 8000e54:	08010000 	.word	0x08010000
 8000e58:	0800f8cc 	.word	0x0800f8cc
    		    NVIC->ICER[i] = 0xFFFFFFFF;
 8000e5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ec4 <main+0x3a4>)
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e60:	3320      	adds	r3, #32
 8000e62:	f04f 31ff 	mov.w	r1, #4294967295
 8000e66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    		    NVIC->ICPR[i] = 0xFFFFFFFF;
 8000e6a:	4a16      	ldr	r2, [pc, #88]	@ (8000ec4 <main+0x3a4>)
 8000e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e6e:	3360      	adds	r3, #96	@ 0x60
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    		for (int i = 0; i < cnt; i++) {
 8000e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbe9      	blt.n	8000e5c <main+0x33c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e88:	b662      	cpsie	i
}
 8000e8a:	bf00      	nop
    		}
    		__enable_irq();

            uint32_t *vtor = (void*)FLASH_USER_START_ADDR;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <main+0x3a8>)
 8000e8e:	61fb      	str	r3, [r7, #28]
            SCB->VTOR = (uint32_t)vtor;
 8000e90:	4a0e      	ldr	r2, [pc, #56]	@ (8000ecc <main+0x3ac>)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	6093      	str	r3, [r2, #8]

            // Make the jump
            asm volatile("MSR msp,%0\nbx %1" : : "r"(vtor[0]), "r"(vtor[1]));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	3204      	adds	r2, #4
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	f383 8808 	msr	MSP, r3
 8000ea4:	4710      	bx	r2
        }

        uart_printf("No user application found at 0x0%x, done!\r\n", FLASH_USER_START_ADDR);
 8000ea6:	4908      	ldr	r1, [pc, #32]	@ (8000ec8 <main+0x3a8>)
 8000ea8:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <main+0x3b0>)
 8000eaa:	f7ff fb57 	bl	800055c <uart_printf>

        while (1)
        { // Start slow LED flash
            #ifdef PROGRESS_LED_PIN
                HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN);
 8000eae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eb2:	4808      	ldr	r0, [pc, #32]	@ (8000ed4 <main+0x3b4>)
 8000eb4:	f001 f813 	bl	8001ede <HAL_GPIO_TogglePin>
                HAL_Delay(1500);
 8000eb8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ebc:	f000 fb16 	bl	80014ec <HAL_Delay>
                HAL_GPIO_TogglePin(PROGRESS_LED_PORT, PROGRESS_LED_PIN);
 8000ec0:	bf00      	nop
 8000ec2:	e7f4      	b.n	8000eae <main+0x38e>
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	08010000 	.word	0x08010000
 8000ecc:	e000ed00 	.word	0xe000ed00
 8000ed0:	0800f8f4 	.word	0x0800f8f4
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b094      	sub	sp, #80	@ 0x50
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2230      	movs	r2, #48	@ 0x30
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f00e fab2 	bl	800f450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	4b29      	ldr	r3, [pc, #164]	@ (8000fa8 <SystemClock_Config+0xd0>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	4a28      	ldr	r2, [pc, #160]	@ (8000fa8 <SystemClock_Config+0xd0>)
 8000f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0c:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <SystemClock_Config+0xd0>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <SystemClock_Config+0xd4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a22      	ldr	r2, [pc, #136]	@ (8000fac <SystemClock_Config+0xd4>)
 8000f22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <SystemClock_Config+0xd4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f34:	2309      	movs	r3, #9
 8000f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f50:	23a8      	movs	r3, #168	@ 0xa8
 8000f52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 f933 	bl	80041cc <HAL_RCC_OscConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f6c:	f000 f8c2 	bl	80010f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f70:	230f      	movs	r3, #15
 8000f72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f74:	2302      	movs	r3, #2
 8000f76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 fb94 	bl	80046bc <HAL_RCC_ClockConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f9a:	f000 f8ab 	bl	80010f4 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	@ 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_RTC_Init+0x44>)
 8000fb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <MX_RTC_Init+0x48>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_RTC_Init+0x44>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_RTC_Init+0x44>)
 8000fc2:	227f      	movs	r2, #127	@ 0x7f
 8000fc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_RTC_Init+0x44>)
 8000fc8:	22ff      	movs	r2, #255	@ 0xff
 8000fca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_RTC_Init+0x44>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_RTC_Init+0x44>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_RTC_Init+0x44>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_RTC_Init+0x44>)
 8000fe0:	f003 ff3c 	bl	8004e5c <HAL_RTC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000fea:	f000 f883 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000009c 	.word	0x2000009c
 8000ff8:	40002800 	.word	0x40002800

08000ffc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001000:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <MX_USART1_UART_Init+0x48>)
 8001002:	4a11      	ldr	r2, [pc, #68]	@ (8001048 <MX_USART1_UART_Init+0x4c>)
 8001004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_USART1_UART_Init+0x48>)
 8001008:	4a10      	ldr	r2, [pc, #64]	@ (800104c <MX_USART1_UART_Init+0x50>)
 800100a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100c:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <MX_USART1_UART_Init+0x48>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MX_USART1_UART_Init+0x48>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <MX_USART1_UART_Init+0x48>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <MX_USART1_UART_Init+0x48>)
 8001020:	220c      	movs	r2, #12
 8001022:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <MX_USART1_UART_Init+0x48>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <MX_USART1_UART_Init+0x48>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <MX_USART1_UART_Init+0x48>)
 8001032:	f004 f84b 	bl	80050cc <HAL_UART_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800103c:	f000 f85a 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000bc 	.word	0x200000bc
 8001048:	40011000 	.word	0x40011000
 800104c:	0003d090 	.word	0x0003d090

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <MX_GPIO_Init+0x9c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a1f      	ldr	r2, [pc, #124]	@ (80010ec <MX_GPIO_Init+0x9c>)
 8001070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <MX_GPIO_Init+0x9c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MX_GPIO_Init+0x9c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <MX_GPIO_Init+0x9c>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_GPIO_Init+0x9c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <MX_GPIO_Init+0x9c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <MX_GPIO_Init+0x9c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_GPIO_Init+0x9c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c0:	480b      	ldr	r0, [pc, #44]	@ (80010f0 <MX_GPIO_Init+0xa0>)
 80010c2:	f000 fef3 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <MX_GPIO_Init+0xa0>)
 80010e0:	f000 fd48 	bl	8001b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  uart_printf("Error handler called!!!\r\n"); // Not strictly required
 80010f8:	4804      	ldr	r0, [pc, #16]	@ (800110c <Error_Handler+0x18>)
 80010fa:	f7ff fa2f 	bl	800055c <uart_printf>
  HAL_Delay(100);
 80010fe:	2064      	movs	r0, #100	@ 0x64
 8001100:	f000 f9f4 	bl	80014ec <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop

  __disable_irq();
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <Error_Handler+0x14>
 800110c:	0800f920 	.word	0x0800f920

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <HAL_MspInit+0x4c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <HAL_MspInit+0x4c>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <HAL_MspInit+0x4c>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <HAL_MspInit+0x4c>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800

08001160 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <HAL_RTC_MspInit+0x4c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d111      	bne.n	80011a4 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001180:	2302      	movs	r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001188:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fcb4 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800119a:	f7ff ffab 	bl	80010f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800119e:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <HAL_RTC_MspInit+0x50>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40002800 	.word	0x40002800
 80011b0:	42470e3c 	.word	0x42470e3c

080011b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <HAL_UART_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12c      	bne.n	8001230 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a17      	ldr	r2, [pc, #92]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_UART_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800120e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001220:	2307      	movs	r3, #7
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <HAL_UART_MspInit+0x8c>)
 800122c:	f000 fca2 	bl	8001b74 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	@ 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40011000 	.word	0x40011000
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <MemManage_Handler+0x4>

0800125c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <UsageFault_Handler+0x4>

0800126c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129a:	f000 f907 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <OTG_HS_IRQHandler+0x10>)
 80012aa:	f001 f913 	bl	80024d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20001e38 	.word	0x20001e38

080012b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c0:	4a14      	ldr	r2, [pc, #80]	@ (8001314 <_sbrk+0x5c>)
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <_sbrk+0x60>)
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <_sbrk+0x64>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <_sbrk+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d207      	bcs.n	80012f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e8:	f00e f8ca 	bl	800f480 <__errno>
 80012ec:	4603      	mov	r3, r0
 80012ee:	220c      	movs	r2, #12
 80012f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	e009      	b.n	800130c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	4a05      	ldr	r2, [pc, #20]	@ (800131c <_sbrk+0x64>)
 8001308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20020000 	.word	0x20020000
 8001318:	00000400 	.word	0x00000400
 800131c:	20001598 	.word	0x20001598
 8001320:	20002360 	.word	0x20002360

08001324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <SystemInit+0x20>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132e:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <SystemInit+0x20>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001380 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800134c:	f7ff ffea 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	@ (8001388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	@ (8001394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f00e f889 	bl	800f48c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137a:	f7ff fbd1 	bl	8000b20 <main>
  bx  lr    
 800137e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800138c:	0800fddc 	.word	0x0800fddc
  ldr r2, =_sbss
 8001390:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001394:	20002360 	.word	0x20002360

08001398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <HAL_Init+0x40>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <HAL_Init+0x40>)
 80013b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	@ (80013dc <HAL_Init+0x40>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f995 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	200f      	movs	r0, #15
 80013cc:	f000 f83e 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fe9e 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023c00 	.word	0x40023c00

080013e0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_DeInit+0x4c>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <HAL_DeInit+0x50>)
 80013e8:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_DeInit+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80013f0:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <HAL_DeInit+0x4c>)
 80013f2:	4a10      	ldr	r2, [pc, #64]	@ (8001434 <HAL_DeInit+0x54>)
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80013f6:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <HAL_DeInit+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <HAL_DeInit+0x4c>)
 80013fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <HAL_DeInit+0x58>)
 8001400:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <HAL_DeInit+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <HAL_DeInit+0x4c>)
 800140a:	22c1      	movs	r2, #193	@ 0xc1
 800140c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <HAL_DeInit+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <HAL_DeInit+0x4c>)
 8001416:	2201      	movs	r2, #1
 8001418:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800141a:	4b04      	ldr	r3, [pc, #16]	@ (800142c <HAL_DeInit+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001420:	f000 f80c 	bl	800143c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	f6fec9ff 	.word	0xf6fec9ff
 8001434:	04777933 	.word	0x04777933
 8001438:	226011ff 	.word	0x226011ff

0800143c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f977 	bl	800175e <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f93f 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	2000159c 	.word	0x2000159c

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	@ (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000159c 	.word	0x2000159c

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008

08001534 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <HAL_SuspendTick+0x1c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <HAL_SuspendTick+0x1c>)
 800153e:	f023 0302 	bic.w	r3, r3, #2
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	@ (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	@ (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	@ (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	@ 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	@ 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff29 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff3e 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff8e 	bl	8001648 <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff31 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffa2 	bl	80016b0 <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800178a:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <HAL_FLASH_Program+0xa0>)
 800178c:	7e1b      	ldrb	r3, [r3, #24]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_FLASH_Program+0x1e>
 8001792:	2302      	movs	r3, #2
 8001794:	e03b      	b.n	800180e <HAL_FLASH_Program+0x96>
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_FLASH_Program+0xa0>)
 8001798:	2201      	movs	r2, #1
 800179a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800179c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017a0:	f000 f870 	bl	8001884 <FLASH_WaitForLastOperation>
 80017a4:	4603      	mov	r3, r0
 80017a6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d12b      	bne.n	8001806 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80017b4:	783b      	ldrb	r3, [r7, #0]
 80017b6:	4619      	mov	r1, r3
 80017b8:	68b8      	ldr	r0, [r7, #8]
 80017ba:	f000 f91b 	bl	80019f4 <FLASH_Program_Byte>
 80017be:	e016      	b.n	80017ee <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d105      	bne.n	80017d2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80017c6:	883b      	ldrh	r3, [r7, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	68b8      	ldr	r0, [r7, #8]
 80017cc:	f000 f8ee 	bl	80019ac <FLASH_Program_HalfWord>
 80017d0:	e00d      	b.n	80017ee <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d105      	bne.n	80017e4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4619      	mov	r1, r3
 80017dc:	68b8      	ldr	r0, [r7, #8]
 80017de:	f000 f8c3 	bl	8001968 <FLASH_Program_Word>
 80017e2:	e004      	b.n	80017ee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80017e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017e8:	68b8      	ldr	r0, [r7, #8]
 80017ea:	f000 f88b 	bl	8001904 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017ee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017f2:	f000 f847 	bl	8001884 <FLASH_WaitForLastOperation>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <HAL_FLASH_Program+0xa4>)
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	4a07      	ldr	r2, [pc, #28]	@ (800181c <HAL_FLASH_Program+0xa4>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <HAL_FLASH_Program+0xa0>)
 8001808:	2200      	movs	r2, #0
 800180a:	761a      	strb	r2, [r3, #24]

  return status;
 800180c:	7dfb      	ldrb	r3, [r7, #23]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200015a0 	.word	0x200015a0
 800181c:	40023c00 	.word	0x40023c00

08001820 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_FLASH_Unlock+0x38>)
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	da0b      	bge.n	800184a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_FLASH_Unlock+0x38>)
 8001834:	4a09      	ldr	r2, [pc, #36]	@ (800185c <HAL_FLASH_Unlock+0x3c>)
 8001836:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001838:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <HAL_FLASH_Unlock+0x38>)
 800183a:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <HAL_FLASH_Unlock+0x40>)
 800183c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_FLASH_Unlock+0x38>)
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da01      	bge.n	800184a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800184a:	79fb      	ldrb	r3, [r7, #7]
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40023c00 	.word	0x40023c00
 800185c:	45670123 	.word	0x45670123
 8001860:	cdef89ab 	.word	0xcdef89ab

08001864 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_FLASH_Lock+0x1c>)
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <HAL_FLASH_Lock+0x1c>)
 800186e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001872:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40023c00 	.word	0x40023c00

08001884 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001890:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <FLASH_WaitForLastOperation+0x78>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001896:	f7ff fe1d 	bl	80014d4 <HAL_GetTick>
 800189a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800189c:	e010      	b.n	80018c0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d00c      	beq.n	80018c0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <FLASH_WaitForLastOperation+0x38>
 80018ac:	f7ff fe12 	bl	80014d4 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d201      	bcs.n	80018c0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e019      	b.n	80018f4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <FLASH_WaitForLastOperation+0x7c>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1e8      	bne.n	800189e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <FLASH_WaitForLastOperation+0x7c>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <FLASH_WaitForLastOperation+0x7c>)
 80018da:	2201      	movs	r2, #1
 80018dc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <FLASH_WaitForLastOperation+0x7c>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80018ea:	f000 f8a5 	bl	8001a38 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0

}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200015a0 	.word	0x200015a0
 8001900:	40023c00 	.word	0x40023c00

08001904 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <FLASH_Program_DoubleWord+0x60>)
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	4a13      	ldr	r2, [pc, #76]	@ (8001964 <FLASH_Program_DoubleWord+0x60>)
 8001916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800191a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <FLASH_Program_DoubleWord+0x60>)
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <FLASH_Program_DoubleWord+0x60>)
 8001922:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001926:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <FLASH_Program_DoubleWord+0x60>)
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <FLASH_Program_DoubleWord+0x60>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800193a:	f3bf 8f6f 	isb	sy
}
 800193e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	000a      	movs	r2, r1
 800194e:	2300      	movs	r3, #0
 8001950:	68f9      	ldr	r1, [r7, #12]
 8001952:	3104      	adds	r1, #4
 8001954:	4613      	mov	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40023c00 	.word	0x40023c00

08001968 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <FLASH_Program_Word+0x40>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	4a0c      	ldr	r2, [pc, #48]	@ (80019a8 <FLASH_Program_Word+0x40>)
 8001978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800197c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <FLASH_Program_Word+0x40>)
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <FLASH_Program_Word+0x40>)
 8001984:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001988:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800198a:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <FLASH_Program_Word+0x40>)
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <FLASH_Program_Word+0x40>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	601a      	str	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40023c00 	.word	0x40023c00

080019ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <FLASH_Program_HalfWord+0x44>)
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <FLASH_Program_HalfWord+0x44>)
 80019be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <FLASH_Program_HalfWord+0x44>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <FLASH_Program_HalfWord+0x44>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019d0:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <FLASH_Program_HalfWord+0x44>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	4a06      	ldr	r2, [pc, #24]	@ (80019f0 <FLASH_Program_HalfWord+0x44>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	801a      	strh	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023c00 	.word	0x40023c00

080019f4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <FLASH_Program_Byte+0x40>)
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <FLASH_Program_Byte+0x40>)
 8001a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <FLASH_Program_Byte+0x40>)
 8001a0e:	4a09      	ldr	r2, [pc, #36]	@ (8001a34 <FLASH_Program_Byte+0x40>)
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <FLASH_Program_Byte+0x40>)
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	4a06      	ldr	r2, [pc, #24]	@ (8001a34 <FLASH_Program_Byte+0x40>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	78fa      	ldrb	r2, [r7, #3]
 8001a24:	701a      	strb	r2, [r3, #0]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001a3c:	4b27      	ldr	r3, [pc, #156]	@ (8001adc <FLASH_SetErrorCode+0xa4>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a48:	4b25      	ldr	r3, [pc, #148]	@ (8001ae0 <FLASH_SetErrorCode+0xa8>)
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	f043 0310 	orr.w	r3, r3, #16
 8001a50:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <FLASH_SetErrorCode+0xa8>)
 8001a52:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001a54:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <FLASH_SetErrorCode+0xa4>)
 8001a56:	2210      	movs	r2, #16
 8001a58:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001a5a:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <FLASH_SetErrorCode+0xa4>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <FLASH_SetErrorCode+0xa8>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <FLASH_SetErrorCode+0xa8>)
 8001a70:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <FLASH_SetErrorCode+0xa4>)
 8001a74:	2220      	movs	r2, #32
 8001a76:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <FLASH_SetErrorCode+0xa4>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001a84:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <FLASH_SetErrorCode+0xa8>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <FLASH_SetErrorCode+0xa8>)
 8001a8e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <FLASH_SetErrorCode+0xa4>)
 8001a92:	2240      	movs	r2, #64	@ 0x40
 8001a94:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <FLASH_SetErrorCode+0xa4>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <FLASH_SetErrorCode+0xa8>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <FLASH_SetErrorCode+0xa8>)
 8001aac:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <FLASH_SetErrorCode+0xa4>)
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <FLASH_SetErrorCode+0xa4>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <FLASH_SetErrorCode+0xa8>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	f043 0320 	orr.w	r3, r3, #32
 8001ac8:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <FLASH_SetErrorCode+0xa8>)
 8001aca:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <FLASH_SetErrorCode+0xa4>)
 8001ace:	2202      	movs	r2, #2
 8001ad0:	60da      	str	r2, [r3, #12]
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40023c00 	.word	0x40023c00
 8001ae0:	200015a0 	.word	0x200015a0

08001ae4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	e010      	b.n	8001b22 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d103      	bne.n	8001b0e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001b06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e009      	b.n	8001b22 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d103      	bne.n	8001b1c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e002      	b.n	8001b22 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001b1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b22:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <FLASH_Erase_Sector+0x8c>)
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <FLASH_Erase_Sector+0x8c>)
 8001b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <FLASH_Erase_Sector+0x8c>)
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	490f      	ldr	r1, [pc, #60]	@ (8001b70 <FLASH_Erase_Sector+0x8c>)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <FLASH_Erase_Sector+0x8c>)
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <FLASH_Erase_Sector+0x8c>)
 8001b40:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001b44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <FLASH_Erase_Sector+0x8c>)
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <FLASH_Erase_Sector+0x8c>)
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <FLASH_Erase_Sector+0x8c>)
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <FLASH_Erase_Sector+0x8c>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b62:	6113      	str	r3, [r2, #16]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e16b      	b.n	8001e68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 815a 	bne.w	8001e62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d005      	beq.n	8001bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d130      	bne.n	8001c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 0201 	and.w	r2, r3, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d017      	beq.n	8001c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d123      	bne.n	8001cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	69b9      	ldr	r1, [r7, #24]
 8001cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0203 	and.w	r2, r3, #3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80b4 	beq.w	8001e62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b60      	ldr	r3, [pc, #384]	@ (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a5f      	ldr	r2, [pc, #380]	@ (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d16:	4a5b      	ldr	r2, [pc, #364]	@ (8001e84 <HAL_GPIO_Init+0x310>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	@ (8001e88 <HAL_GPIO_Init+0x314>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d02b      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a51      	ldr	r2, [pc, #324]	@ (8001e8c <HAL_GPIO_Init+0x318>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d025      	beq.n	8001d96 <HAL_GPIO_Init+0x222>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a50      	ldr	r2, [pc, #320]	@ (8001e90 <HAL_GPIO_Init+0x31c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <HAL_GPIO_Init+0x21e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4f      	ldr	r2, [pc, #316]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d019      	beq.n	8001d8e <HAL_GPIO_Init+0x21a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e98 <HAL_GPIO_Init+0x324>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x216>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4d      	ldr	r2, [pc, #308]	@ (8001e9c <HAL_GPIO_Init+0x328>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea0 <HAL_GPIO_Init+0x32c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x20e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4b      	ldr	r2, [pc, #300]	@ (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x20a>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e00e      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d7e:	2308      	movs	r3, #8
 8001d80:	e00c      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d82:	2306      	movs	r3, #6
 8001d84:	e00a      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d86:	2305      	movs	r3, #5
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dac:	4935      	ldr	r1, [pc, #212]	@ (8001e84 <HAL_GPIO_Init+0x310>)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dde:	4a32      	ldr	r2, [pc, #200]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de4:	4b30      	ldr	r3, [pc, #192]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e08:	4a27      	ldr	r2, [pc, #156]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e32:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	f67f ae90 	bls.w	8001b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3724      	adds	r7, #36	@ 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40013800 	.word	0x40013800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40021400 	.word	0x40021400
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40021c00 	.word	0x40021c00
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	041a      	lsls	r2, r3, #16
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	400b      	ands	r3, r1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af02      	add	r7, sp, #8
 8001f18:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e059      	b.n	8001fd8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f00c ff16 	bl	800ed70 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2203      	movs	r2, #3
 8001f48:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f52:	d102      	bne.n	8001f5a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fd35 	bl	80059ce <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7c1a      	ldrb	r2, [r3, #16]
 8001f6c:	f88d 2000 	strb.w	r2, [sp]
 8001f70:	3304      	adds	r3, #4
 8001f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f74:	f003 fcb6 	bl	80058e4 <USB_CoreInit>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e026      	b.n	8001fd8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 fd2d 	bl	80059f0 <USB_SetCurrentMode>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e017      	b.n	8001fd8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7c1a      	ldrb	r2, [r3, #16]
 8001fb0:	f88d 2000 	strb.w	r2, [sp]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb8:	f003 fed0 	bl	8005d5c <USB_HostInit>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e004      	b.n	8001fd8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b08b      	sub	sp, #44	@ 0x2c
 8001fe4:	af04      	add	r7, sp, #16
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	4608      	mov	r0, r1
 8001fea:	4611      	mov	r1, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	70fb      	strb	r3, [r7, #3]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70bb      	strb	r3, [r7, #2]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001ffa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001ffc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_HCD_HC_Init+0x2c>
 8002008:	2302      	movs	r3, #2
 800200a:	e09d      	b.n	8002148 <HAL_HCD_HC_Init+0x168>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3319      	adds	r3, #25
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3314      	adds	r3, #20
 8002038:	787a      	ldrb	r2, [r7, #1]
 800203a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3315      	adds	r3, #21
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	3326      	adds	r3, #38	@ 0x26
 8002060:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002064:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	78bb      	ldrb	r3, [r7, #2]
 800206a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800206e:	b2d8      	uxtb	r0, r3
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3316      	adds	r3, #22
 800207e:	4602      	mov	r2, r0
 8002080:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fbc8 	bl	800281c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800208c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002090:	2b00      	cmp	r3, #0
 8002092:	da0a      	bge.n	80020aa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	3317      	adds	r3, #23
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e009      	b.n	80020be <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3317      	adds	r3, #23
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f003 ffae 	bl	8006024 <USB_GetHostSpeed>
 80020c8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80020ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10b      	bne.n	80020ea <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80020d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_HCD_HC_Init+0x10a>
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d104      	bne.n	80020ea <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80020e4:	d901      	bls.n	80020ea <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80020e6:	23bc      	movs	r3, #188	@ 0xbc
 80020e8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	3318      	adds	r3, #24
 80020fa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80020fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	b298      	uxth	r0, r3
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3328      	adds	r3, #40	@ 0x28
 8002114:	4602      	mov	r2, r0
 8002116:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	b29b      	uxth	r3, r3
 8002120:	787c      	ldrb	r4, [r7, #1]
 8002122:	78ba      	ldrb	r2, [r7, #2]
 8002124:	78f9      	ldrb	r1, [r7, #3]
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	4623      	mov	r3, r4
 8002136:	f003 ff9d 	bl	8006074 <USB_HC_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd90      	pop	{r4, r7, pc}

08002150 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_HCD_HC_Halt+0x1e>
 800216a:	2302      	movs	r3, #2
 800216c:	e00f      	b.n	800218e <HAL_HCD_HC_Halt+0x3e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fb2f 	bl	80067e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	70fb      	strb	r3, [r7, #3]
 80021aa:	460b      	mov	r3, r1
 80021ac:	70bb      	strb	r3, [r7, #2]
 80021ae:	4613      	mov	r3, r2
 80021b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3317      	adds	r3, #23
 80021c2:	78ba      	ldrb	r2, [r7, #2]
 80021c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	3326      	adds	r3, #38	@ 0x26
 80021d6:	787a      	ldrb	r2, [r7, #1]
 80021d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021da:	7c3b      	ldrb	r3, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d114      	bne.n	800220a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	332a      	adds	r3, #42	@ 0x2a
 80021f0:	2203      	movs	r2, #3
 80021f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3319      	adds	r3, #25
 8002204:	7f3a      	ldrb	r2, [r7, #28]
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e009      	b.n	800221e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	332a      	adds	r3, #42	@ 0x2a
 800221a:	2202      	movs	r2, #2
 800221c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800221e:	787b      	ldrb	r3, [r7, #1]
 8002220:	2b03      	cmp	r3, #3
 8002222:	f200 8102 	bhi.w	800242a <HAL_HCD_HC_SubmitRequest+0x292>
 8002226:	a201      	add	r2, pc, #4	@ (adr r2, 800222c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800223d 	.word	0x0800223d
 8002230:	08002415 	.word	0x08002415
 8002234:	08002301 	.word	0x08002301
 8002238:	0800238b 	.word	0x0800238b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800223c:	7c3b      	ldrb	r3, [r7, #16]
 800223e:	2b01      	cmp	r3, #1
 8002240:	f040 80f5 	bne.w	800242e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002244:	78bb      	ldrb	r3, [r7, #2]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d12d      	bne.n	80022a6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800224a:	8b3b      	ldrh	r3, [r7, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	333d      	adds	r3, #61	@ 0x3d
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	333d      	adds	r3, #61	@ 0x3d
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10a      	bne.n	8002290 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	332a      	adds	r3, #42	@ 0x2a
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800228e:	e0ce      	b.n	800242e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	332a      	adds	r3, #42	@ 0x2a
 80022a0:	2202      	movs	r2, #2
 80022a2:	701a      	strb	r2, [r3, #0]
      break;
 80022a4:	e0c3      	b.n	800242e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	331a      	adds	r3, #26
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	f040 80b8 	bne.w	800242e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	333c      	adds	r3, #60	@ 0x3c
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	332a      	adds	r3, #42	@ 0x2a
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
      break;
 80022e8:	e0a1      	b.n	800242e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	332a      	adds	r3, #42	@ 0x2a
 80022fa:	2202      	movs	r2, #2
 80022fc:	701a      	strb	r2, [r3, #0]
      break;
 80022fe:	e096      	b.n	800242e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002300:	78bb      	ldrb	r3, [r7, #2]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d120      	bne.n	8002348 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	333d      	adds	r3, #61	@ 0x3d
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	332a      	adds	r3, #42	@ 0x2a
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002330:	e07e      	b.n	8002430 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	332a      	adds	r3, #42	@ 0x2a
 8002342:	2202      	movs	r2, #2
 8002344:	701a      	strb	r2, [r3, #0]
      break;
 8002346:	e073      	b.n	8002430 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	333c      	adds	r3, #60	@ 0x3c
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	332a      	adds	r3, #42	@ 0x2a
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
      break;
 8002372:	e05d      	b.n	8002430 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	332a      	adds	r3, #42	@ 0x2a
 8002384:	2202      	movs	r2, #2
 8002386:	701a      	strb	r2, [r3, #0]
      break;
 8002388:	e052      	b.n	8002430 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800238a:	78bb      	ldrb	r3, [r7, #2]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d120      	bne.n	80023d2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	333d      	adds	r3, #61	@ 0x3d
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	332a      	adds	r3, #42	@ 0x2a
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023ba:	e039      	b.n	8002430 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	332a      	adds	r3, #42	@ 0x2a
 80023cc:	2202      	movs	r2, #2
 80023ce:	701a      	strb	r2, [r3, #0]
      break;
 80023d0:	e02e      	b.n	8002430 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	333c      	adds	r3, #60	@ 0x3c
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	332a      	adds	r3, #42	@ 0x2a
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
      break;
 80023fc:	e018      	b.n	8002430 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	332a      	adds	r3, #42	@ 0x2a
 800240e:	2202      	movs	r2, #2
 8002410:	701a      	strb	r2, [r3, #0]
      break;
 8002412:	e00d      	b.n	8002430 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	332a      	adds	r3, #42	@ 0x2a
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
      break;
 8002428:	e002      	b.n	8002430 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800242e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	332c      	adds	r3, #44	@ 0x2c
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	8b39      	ldrh	r1, [r7, #24]
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4403      	add	r3, r0
 8002454:	3334      	adds	r3, #52	@ 0x34
 8002456:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	334c      	adds	r3, #76	@ 0x4c
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3338      	adds	r3, #56	@ 0x38
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3315      	adds	r3, #21
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	334d      	adds	r3, #77	@ 0x4d
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	3310      	adds	r3, #16
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	1d19      	adds	r1, r3, #4
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	799b      	ldrb	r3, [r3, #6]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f003 ff02 	bl	80062cc <USB_HC_StartXfer>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop

080024d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fbf6 	bl	8005cdc <USB_GetMode>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	f040 80fb 	bne.w	80026ee <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 fbb9 	bl	8005c74 <USB_ReadInterrupts>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80f1 	beq.w	80026ec <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f003 fbb0 	bl	8005c74 <USB_ReadInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800251a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800251e:	d104      	bne.n	800252a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002528:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fba0 	bl	8005c74 <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800253a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800253e:	d104      	bne.n	800254a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002548:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fb90 	bl	8005c74 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800255a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800255e:	d104      	bne.n	800256a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002568:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f003 fb80 	bl	8005c74 <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d103      	bne.n	8002586 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2202      	movs	r2, #2
 8002584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fb72 	bl	8005c74 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800259a:	d120      	bne.n	80025de <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80025a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d113      	bne.n	80025de <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025b6:	2110      	movs	r1, #16
 80025b8:	6938      	ldr	r0, [r7, #16]
 80025ba:	f003 fa65 	bl	8005a88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80025be:	6938      	ldr	r0, [r7, #16]
 80025c0:	f003 fa94 	bl	8005aec <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7a5b      	ldrb	r3, [r3, #9]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d105      	bne.n	80025d8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 fc86 	bl	8005ee4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f00c fc35 	bl	800ee48 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 fb46 	bl	8005c74 <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f2:	d102      	bne.n	80025fa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f001 fd4d 	bl	8004094 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fb38 	bl	8005c74 <USB_ReadInterrupts>
 8002604:	4603      	mov	r3, r0
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b08      	cmp	r3, #8
 800260c:	d106      	bne.n	800261c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f00c fbfe 	bl	800ee10 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2208      	movs	r2, #8
 800261a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f003 fb27 	bl	8005c74 <USB_ReadInterrupts>
 8002626:	4603      	mov	r3, r0
 8002628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002630:	d139      	bne.n	80026a6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f004 f8c2 	bl	80067c0 <USB_HC_ReadInterrupt>
 800263c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e025      	b.n	8002690 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d018      	beq.n	800268a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800266a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800266e:	d106      	bne.n	800267e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f905 	bl	8002886 <HCD_HC_IN_IRQHandler>
 800267c:	e005      	b.n	800268a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4619      	mov	r1, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 ff67 	bl	8003558 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3301      	adds	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	795b      	ldrb	r3, [r3, #5]
 8002694:	461a      	mov	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	4293      	cmp	r3, r2
 800269a:	d3d3      	bcc.n	8002644 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fae2 	bl	8005c74 <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d101      	bne.n	80026be <HAL_HCD_IRQHandler+0x1ea>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_HCD_IRQHandler+0x1ec>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d014      	beq.n	80026ee <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0210 	bic.w	r2, r2, #16
 80026d2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f001 fbfe 	bl	8003ed6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0210 	orr.w	r2, r2, #16
 80026e8:	619a      	str	r2, [r3, #24]
 80026ea:	e000      	b.n	80026ee <HAL_HCD_IRQHandler+0x21a>
      return;
 80026ec:	bf00      	nop
    }
  }
}
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_HCD_Start+0x16>
 8002706:	2302      	movs	r3, #2
 8002708:	e013      	b.n	8002732 <HAL_HCD_Start+0x3e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2101      	movs	r1, #1
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fc4a 	bl	8005fb2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 f942 	bl	80059ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_HCD_Stop+0x16>
 800274c:	2302      	movs	r3, #2
 800274e:	e00d      	b.n	800276c <HAL_HCD_Stop+0x32>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f004 f99d 	bl	8006a9c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fbec 	bl	8005f5e <USB_ResetPort>
 8002786:	4603      	mov	r3, r0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	334c      	adds	r3, #76	@ 0x4c
 80027ac:	781b      	ldrb	r3, [r3, #0]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3338      	adds	r3, #56	@ 0x38
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 fc2e 	bl	8006052 <USB_GetCurrentFrame>
 80027f6:	4603      	mov	r3, r0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f003 fc09 	bl	8006024 <USB_GetHostSpeed>
 8002812:	4603      	mov	r3, r0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	331a      	adds	r3, #26
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	331b      	adds	r3, #27
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	3325      	adds	r3, #37	@ 0x25
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3324      	adds	r3, #36	@ 0x24
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 f9f8 	bl	8005c9a <USB_ReadChInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d11a      	bne.n	80028ea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c0:	461a      	mov	r2, r3
 80028c2:	2304      	movs	r3, #4
 80028c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	334d      	adds	r3, #77	@ 0x4d
 80028d6:	2207      	movs	r2, #7
 80028d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 ff7d 	bl	80067e2 <USB_HC_Halt>
 80028e8:	e09e      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 f9d1 	bl	8005c9a <USB_ReadChInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002902:	d11b      	bne.n	800293c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002916:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	334d      	adds	r3, #77	@ 0x4d
 8002928:	2208      	movs	r2, #8
 800292a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f003 ff54 	bl	80067e2 <USB_HC_Halt>
 800293a:	e075      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f003 f9a8 	bl	8005c9a <USB_ReadChInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b08      	cmp	r3, #8
 8002952:	d11a      	bne.n	800298a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002960:	461a      	mov	r2, r3
 8002962:	2308      	movs	r3, #8
 8002964:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	334d      	adds	r3, #77	@ 0x4d
 8002976:	2206      	movs	r2, #6
 8002978:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 ff2d 	bl	80067e2 <USB_HC_Halt>
 8002988:	e04e      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f003 f981 	bl	8005c9a <USB_ReadChInterrupts>
 8002998:	4603      	mov	r3, r0
 800299a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a2:	d11b      	bne.n	80029dc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b0:	461a      	mov	r2, r3
 80029b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	334d      	adds	r3, #77	@ 0x4d
 80029c8:	2209      	movs	r2, #9
 80029ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 ff04 	bl	80067e2 <USB_HC_Halt>
 80029da:	e025      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 f958 	bl	8005c9a <USB_ReadChInterrupts>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f0:	2b80      	cmp	r3, #128	@ 0x80
 80029f2:	d119      	bne.n	8002a28 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a00:	461a      	mov	r2, r3
 8002a02:	2380      	movs	r3, #128	@ 0x80
 8002a04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	334d      	adds	r3, #77	@ 0x4d
 8002a16:	2207      	movs	r2, #7
 8002a18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 fedd 	bl	80067e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 f932 	bl	8005c9a <USB_ReadChInterrupts>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a40:	d112      	bne.n	8002a68 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 fec9 	bl	80067e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a62:	6093      	str	r3, [r2, #8]
 8002a64:	f000 bd75 	b.w	8003552 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 f912 	bl	8005c9a <USB_ReadChInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	f040 8128 	bne.w	8002cd2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2320      	movs	r3, #32
 8002a92:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	331b      	adds	r3, #27
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d119      	bne.n	8002ade <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	331b      	adds	r3, #27
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	0151      	lsls	r1, r2, #5
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	440a      	add	r2, r1
 8002ad4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002adc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	799b      	ldrb	r3, [r3, #6]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01b      	beq.n	8002b1e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	3330      	adds	r3, #48	@ 0x30
 8002af6:	6819      	ldr	r1, [r3, #0]
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	1ac9      	subs	r1, r1, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4403      	add	r3, r0
 8002b1a:	3338      	adds	r3, #56	@ 0x38
 8002b1c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	334d      	adds	r3, #77	@ 0x4d
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	3344      	adds	r3, #68	@ 0x44
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b52:	461a      	mov	r2, r3
 8002b54:	2301      	movs	r3, #1
 8002b56:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	3326      	adds	r3, #38	@ 0x26
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3326      	adds	r3, #38	@ 0x26
 8002b7e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d110      	bne.n	8002ba6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 fe28 	bl	80067e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2310      	movs	r3, #16
 8002ba2:	6093      	str	r3, [r2, #8]
 8002ba4:	e03d      	b.n	8002c22 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3326      	adds	r3, #38	@ 0x26
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d00a      	beq.n	8002bd2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3326      	adds	r3, #38	@ 0x26
 8002bcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d127      	bne.n	8002c22 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	0151      	lsls	r1, r2, #5
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	440a      	add	r2, r1
 8002be8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002bf0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	334c      	adds	r3, #76	@ 0x4c
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	334c      	adds	r3, #76	@ 0x4c
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f00c f921 	bl	800ee64 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	799b      	ldrb	r3, [r3, #6]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d13b      	bne.n	8002ca2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3338      	adds	r3, #56	@ 0x38
 8002c3a:	6819      	ldr	r1, [r3, #0]
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4403      	add	r3, r0
 8002c4a:	3328      	adds	r3, #40	@ 0x28
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	440b      	add	r3, r1
 8002c50:	1e59      	subs	r1, r3, #1
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4403      	add	r3, r0
 8002c60:	3328      	adds	r3, #40	@ 0x28
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8470 	beq.w	8003552 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	333c      	adds	r3, #60	@ 0x3c
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	f083 0301 	eor.w	r3, r3, #1
 8002c8a:	b2d8      	uxtb	r0, r3
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	333c      	adds	r3, #60	@ 0x3c
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	f000 bc58 	b.w	8003552 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	333c      	adds	r3, #60	@ 0x3c
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	f083 0301 	eor.w	r3, r3, #1
 8002cba:	b2d8      	uxtb	r0, r3
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	333c      	adds	r3, #60	@ 0x3c
 8002cca:	4602      	mov	r2, r0
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	f000 bc40 	b.w	8003552 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 ffdd 	bl	8005c9a <USB_ReadChInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d131      	bne.n	8002d4e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	331a      	adds	r3, #26
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	f040 841f 	bne.w	8003552 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	331b      	adds	r3, #27
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	334d      	adds	r3, #77	@ 0x4d
 8002d38:	2203      	movs	r2, #3
 8002d3a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f003 fd4c 	bl	80067e2 <USB_HC_Halt>
 8002d4a:	f000 bc02 	b.w	8003552 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 ff9f 	bl	8005c9a <USB_ReadChInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	f040 8305 	bne.w	8003372 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d74:	461a      	mov	r2, r3
 8002d76:	2302      	movs	r3, #2
 8002d78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	334d      	adds	r3, #77	@ 0x4d
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d114      	bne.n	8002dba <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	334d      	adds	r3, #77	@ 0x4d
 8002da0:	2202      	movs	r2, #2
 8002da2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	334c      	adds	r3, #76	@ 0x4c
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	e2cc      	b.n	8003354 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	334d      	adds	r3, #77	@ 0x4d
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d114      	bne.n	8002dfa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	334d      	adds	r3, #77	@ 0x4d
 8002de0:	2202      	movs	r2, #2
 8002de2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	334c      	adds	r3, #76	@ 0x4c
 8002df4:	2205      	movs	r2, #5
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	e2ac      	b.n	8003354 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	334d      	adds	r3, #77	@ 0x4d
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b07      	cmp	r3, #7
 8002e0e:	d00b      	beq.n	8002e28 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	334d      	adds	r3, #77	@ 0x4d
 8002e20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e22:	2b09      	cmp	r3, #9
 8002e24:	f040 80a6 	bne.w	8002f74 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	334d      	adds	r3, #77	@ 0x4d
 8002e38:	2202      	movs	r2, #2
 8002e3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	3344      	adds	r3, #68	@ 0x44
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	1c59      	adds	r1, r3, #1
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4403      	add	r3, r0
 8002e5c:	3344      	adds	r3, #68	@ 0x44
 8002e5e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3344      	adds	r3, #68	@ 0x44
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d943      	bls.n	8002efe <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3344      	adds	r3, #68	@ 0x44
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	331a      	adds	r3, #26
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d123      	bne.n	8002ee8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	331b      	adds	r3, #27
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	331c      	adds	r3, #28
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	0151      	lsls	r1, r2, #5
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	440a      	add	r2, r1
 8002ede:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	334c      	adds	r3, #76	@ 0x4c
 8002ef8:	2204      	movs	r2, #4
 8002efa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002efc:	e229      	b.n	8003352 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	334c      	adds	r3, #76	@ 0x4c
 8002f0e:	2202      	movs	r2, #2
 8002f10:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	3326      	adds	r3, #38	@ 0x26
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	3326      	adds	r3, #38	@ 0x26
 8002f38:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	f040 8209 	bne.w	8003352 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f56:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f5e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f72:	e1ee      	b.n	8003352 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	334d      	adds	r3, #77	@ 0x4d
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	f040 80c8 	bne.w	800311c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	334d      	adds	r3, #77	@ 0x4d
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	331b      	adds	r3, #27
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	f040 81ce 	bne.w	8003354 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3326      	adds	r3, #38	@ 0x26
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d16b      	bne.n	80030a6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3348      	adds	r3, #72	@ 0x48
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1c59      	adds	r1, r3, #1
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4403      	add	r3, r0
 8002fee:	3348      	adds	r3, #72	@ 0x48
 8002ff0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3348      	adds	r3, #72	@ 0x48
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d943      	bls.n	8003090 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3348      	adds	r3, #72	@ 0x48
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	331b      	adds	r3, #27
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	3344      	adds	r3, #68	@ 0x44
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d809      	bhi.n	800305a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	331c      	adds	r3, #28
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	0151      	lsls	r1, r2, #5
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	440a      	add	r2, r1
 8003070:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003078:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	334c      	adds	r3, #76	@ 0x4c
 800308a:	2204      	movs	r2, #4
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e014      	b.n	80030ba <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	334c      	adds	r3, #76	@ 0x4c
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e009      	b.n	80030ba <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	334c      	adds	r3, #76	@ 0x4c
 80030b6:	2202      	movs	r2, #2
 80030b8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3326      	adds	r3, #38	@ 0x26
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3326      	adds	r3, #38	@ 0x26
 80030e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	f040 8136 	bne.w	8003354 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003106:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003114:	461a      	mov	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e11b      	b.n	8003354 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	334d      	adds	r3, #77	@ 0x4d
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b03      	cmp	r3, #3
 8003130:	f040 8081 	bne.w	8003236 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	334d      	adds	r3, #77	@ 0x4d
 8003144:	2202      	movs	r2, #2
 8003146:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	331b      	adds	r3, #27
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 80fa 	bne.w	8003354 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	334c      	adds	r3, #76	@ 0x4c
 8003170:	2202      	movs	r2, #2
 8003172:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	0151      	lsls	r1, r2, #5
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	440a      	add	r2, r1
 800318a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800318e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003192:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	0151      	lsls	r1, r2, #5
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	440a      	add	r2, r1
 80031aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031b2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	0151      	lsls	r1, r2, #5
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	440a      	add	r2, r1
 80031ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ce:	f023 0320 	bic.w	r3, r3, #32
 80031d2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3326      	adds	r3, #38	@ 0x26
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3326      	adds	r3, #38	@ 0x26
 80031fa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	f040 80a9 	bne.w	8003354 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003218:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003220:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	e08e      	b.n	8003354 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	334d      	adds	r3, #77	@ 0x4d
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d143      	bne.n	80032d4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	334d      	adds	r3, #77	@ 0x4d
 800325c:	2202      	movs	r2, #2
 800325e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	334c      	adds	r3, #76	@ 0x4c
 8003270:	2202      	movs	r2, #2
 8003272:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	3326      	adds	r3, #38	@ 0x26
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3326      	adds	r3, #38	@ 0x26
 800329a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800329c:	2b02      	cmp	r3, #2
 800329e:	d159      	bne.n	8003354 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032b6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032be:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032cc:	461a      	mov	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e03f      	b.n	8003354 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	334d      	adds	r3, #77	@ 0x4d
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d126      	bne.n	8003338 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334d      	adds	r3, #77	@ 0x4d
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3344      	adds	r3, #68	@ 0x44
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4403      	add	r3, r0
 800331e:	3344      	adds	r3, #68	@ 0x44
 8003320:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	334c      	adds	r3, #76	@ 0x4c
 8003332:	2204      	movs	r2, #4
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e00d      	b.n	8003354 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	334d      	adds	r3, #77	@ 0x4d
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b02      	cmp	r3, #2
 800334c:	f000 8100 	beq.w	8003550 <HCD_HC_IN_IRQHandler+0xcca>
 8003350:	e000      	b.n	8003354 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003352:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	334c      	adds	r3, #76	@ 0x4c
 8003364:	781a      	ldrb	r2, [r3, #0]
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	4619      	mov	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f00b fd7a 	bl	800ee64 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003370:	e0ef      	b.n	8003552 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f002 fc8d 	bl	8005c9a <USB_ReadChInterrupts>
 8003380:	4603      	mov	r3, r0
 8003382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003386:	2b40      	cmp	r3, #64	@ 0x40
 8003388:	d12f      	bne.n	80033ea <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003396:	461a      	mov	r2, r3
 8003398:	2340      	movs	r3, #64	@ 0x40
 800339a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334d      	adds	r3, #77	@ 0x4d
 80033ac:	2205      	movs	r2, #5
 80033ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	331a      	adds	r3, #26
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	3344      	adds	r3, #68	@ 0x44
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	4611      	mov	r1, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 f9fd 	bl	80067e2 <USB_HC_Halt>
 80033e8:	e0b3      	b.n	8003552 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f002 fc51 	bl	8005c9a <USB_ReadChInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b10      	cmp	r3, #16
 8003400:	f040 80a7 	bne.w	8003552 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3326      	adds	r3, #38	@ 0x26
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d11b      	bne.n	8003452 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	3344      	adds	r3, #68	@ 0x44
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	334d      	adds	r3, #77	@ 0x4d
 800343e:	2204      	movs	r2, #4
 8003440:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f003 f9c9 	bl	80067e2 <USB_HC_Halt>
 8003450:	e03f      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3326      	adds	r3, #38	@ 0x26
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	3326      	adds	r3, #38	@ 0x26
 8003478:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800347a:	2b02      	cmp	r3, #2
 800347c:	d129      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3344      	adds	r3, #68	@ 0x44
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	799b      	ldrb	r3, [r3, #6]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HCD_HC_IN_IRQHandler+0xc2a>
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	331b      	adds	r3, #27
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d110      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	334d      	adds	r3, #77	@ 0x4d
 80034c0:	2204      	movs	r2, #4
 80034c2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f003 f988 	bl	80067e2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	331b      	adds	r3, #27
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d129      	bne.n	800353c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	331b      	adds	r3, #27
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	0151      	lsls	r1, r2, #5
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	440a      	add	r2, r1
 8003512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800351a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	440a      	add	r2, r1
 8003532:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003536:	f043 0320 	orr.w	r3, r3, #32
 800353a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003548:	461a      	mov	r2, r3
 800354a:	2310      	movs	r3, #16
 800354c:	6093      	str	r3, [r2, #8]
 800354e:	e000      	b.n	8003552 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003550:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f002 fb8f 	bl	8005c9a <USB_ReadChInterrupts>
 800357c:	4603      	mov	r3, r0
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b04      	cmp	r3, #4
 8003584:	d11b      	bne.n	80035be <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003592:	461a      	mov	r2, r3
 8003594:	2304      	movs	r3, #4
 8003596:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	334d      	adds	r3, #77	@ 0x4d
 80035a8:	2207      	movs	r2, #7
 80035aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f003 f914 	bl	80067e2 <USB_HC_Halt>
 80035ba:	f000 bc89 	b.w	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f002 fb67 	bl	8005c9a <USB_ReadChInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	f040 8082 	bne.w	80036dc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	2320      	movs	r3, #32
 80035e8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3319      	adds	r3, #25
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d124      	bne.n	800364a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3319      	adds	r3, #25
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	334c      	adds	r3, #76	@ 0x4c
 8003624:	2202      	movs	r2, #2
 8003626:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	334d      	adds	r3, #77	@ 0x4d
 8003638:	2203      	movs	r2, #3
 800363a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f003 f8cc 	bl	80067e2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	331a      	adds	r3, #26
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 8437 	bne.w	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	331b      	adds	r3, #27
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 842b 	bne.w	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	3326      	adds	r3, #38	@ 0x26
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d009      	beq.n	80036a4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	331b      	adds	r3, #27
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	334d      	adds	r3, #77	@ 0x4d
 80036b4:	2203      	movs	r2, #3
 80036b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f003 f88e 	bl	80067e2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	3344      	adds	r3, #68	@ 0x44
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e3f9      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f002 fad8 	bl	8005c9a <USB_ReadChInterrupts>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f4:	d111      	bne.n	800371a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003702:	461a      	mov	r2, r3
 8003704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003708:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f003 f865 	bl	80067e2 <USB_HC_Halt>
 8003718:	e3da      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f002 fab9 	bl	8005c9a <USB_ReadChInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d168      	bne.n	8003804 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	3344      	adds	r3, #68	@ 0x44
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f002 faa3 	bl	8005c9a <USB_ReadChInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375a:	2b40      	cmp	r3, #64	@ 0x40
 800375c:	d112      	bne.n	8003784 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	3319      	adds	r3, #25
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800377e:	461a      	mov	r2, r3
 8003780:	2340      	movs	r3, #64	@ 0x40
 8003782:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	331b      	adds	r3, #27
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d019      	beq.n	80037ce <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	331b      	adds	r3, #27
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037cc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037da:	461a      	mov	r2, r3
 80037dc:	2301      	movs	r3, #1
 80037de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	334d      	adds	r3, #77	@ 0x4d
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 fff0 	bl	80067e2 <USB_HC_Halt>
 8003802:	e365      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f002 fa44 	bl	8005c9a <USB_ReadChInterrupts>
 8003812:	4603      	mov	r3, r0
 8003814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003818:	2b40      	cmp	r3, #64	@ 0x40
 800381a:	d139      	bne.n	8003890 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	334d      	adds	r3, #77	@ 0x4d
 800382c:	2205      	movs	r2, #5
 800382e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	331a      	adds	r3, #26
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	3319      	adds	r3, #25
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3344      	adds	r3, #68	@ 0x44
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f002 ffb3 	bl	80067e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4413      	add	r3, r2
 8003884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003888:	461a      	mov	r2, r3
 800388a:	2340      	movs	r3, #64	@ 0x40
 800388c:	6093      	str	r3, [r2, #8]
 800388e:	e31f      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f002 f9fe 	bl	8005c9a <USB_ReadChInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d11a      	bne.n	80038de <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b4:	461a      	mov	r2, r3
 80038b6:	2308      	movs	r3, #8
 80038b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	334d      	adds	r3, #77	@ 0x4d
 80038ca:	2206      	movs	r2, #6
 80038cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f002 ff83 	bl	80067e2 <USB_HC_Halt>
 80038dc:	e2f8      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f002 f9d7 	bl	8005c9a <USB_ReadChInterrupts>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d144      	bne.n	8003980 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	3344      	adds	r3, #68	@ 0x44
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	334d      	adds	r3, #77	@ 0x4d
 800391a:	2204      	movs	r2, #4
 800391c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	3319      	adds	r3, #25
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d114      	bne.n	800395e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	3318      	adds	r3, #24
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3319      	adds	r3, #25
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f002 ff3b 	bl	80067e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003978:	461a      	mov	r2, r3
 800397a:	2310      	movs	r3, #16
 800397c:	6093      	str	r3, [r2, #8]
 800397e:	e2a7      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f002 f986 	bl	8005c9a <USB_ReadChInterrupts>
 800398e:	4603      	mov	r3, r0
 8003990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003994:	2b80      	cmp	r3, #128	@ 0x80
 8003996:	f040 8083 	bne.w	8003aa0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	799b      	ldrb	r3, [r3, #6]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d111      	bne.n	80039c6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	334d      	adds	r3, #77	@ 0x4d
 80039b2:	2207      	movs	r2, #7
 80039b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 ff0f 	bl	80067e2 <USB_HC_Halt>
 80039c4:	e062      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	3344      	adds	r3, #68	@ 0x44
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	1c59      	adds	r1, r3, #1
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4403      	add	r3, r0
 80039e6:	3344      	adds	r3, #68	@ 0x44
 80039e8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	3344      	adds	r3, #68	@ 0x44
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d922      	bls.n	8003a46 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3344      	adds	r3, #68	@ 0x44
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	334c      	adds	r3, #76	@ 0x4c
 8003a24:	2204      	movs	r2, #4
 8003a26:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	334c      	adds	r3, #76	@ 0x4c
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f00b fa10 	bl	800ee64 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a44:	e022      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	334c      	adds	r3, #76	@ 0x4c
 8003a56:	2202      	movs	r2, #2
 8003a58:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a70:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a78:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	6093      	str	r3, [r2, #8]
 8003a9e:	e217      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f002 f8f6 	bl	8005c9a <USB_ReadChInterrupts>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab8:	d11b      	bne.n	8003af2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	334d      	adds	r3, #77	@ 0x4d
 8003aca:	2209      	movs	r2, #9
 8003acc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 fe83 	bl	80067e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003aee:	6093      	str	r3, [r2, #8]
 8003af0:	e1ee      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f002 f8cd 	bl	8005c9a <USB_ReadChInterrupts>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	f040 81df 	bne.w	8003eca <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	334d      	adds	r3, #77	@ 0x4d
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	f040 8093 	bne.w	8003c5c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	334d      	adds	r3, #77	@ 0x4d
 8003b46:	2202      	movs	r2, #2
 8003b48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	334c      	adds	r3, #76	@ 0x4c
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3326      	adds	r3, #38	@ 0x26
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d00b      	beq.n	8003b8c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	3326      	adds	r3, #38	@ 0x26
 8003b84:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	f040 8190 	bne.w	8003eac <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	799b      	ldrb	r3, [r3, #6]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d115      	bne.n	8003bc0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	333d      	adds	r3, #61	@ 0x3d
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	f083 0301 	eor.w	r3, r3, #1
 8003bac:	b2d8      	uxtb	r0, r3
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	333d      	adds	r3, #61	@ 0x3d
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	799b      	ldrb	r3, [r3, #6]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	f040 8171 	bne.w	8003eac <HCD_HC_OUT_IRQHandler+0x954>
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	3334      	adds	r3, #52	@ 0x34
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8165 	beq.w	8003eac <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	3334      	adds	r3, #52	@ 0x34
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4403      	add	r3, r0
 8003c02:	3328      	adds	r3, #40	@ 0x28
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	440b      	add	r3, r1
 8003c08:	1e59      	subs	r1, r3, #1
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4403      	add	r3, r0
 8003c18:	3328      	adds	r3, #40	@ 0x28
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c20:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 813f 	beq.w	8003eac <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	333d      	adds	r3, #61	@ 0x3d
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	f083 0301 	eor.w	r3, r3, #1
 8003c46:	b2d8      	uxtb	r0, r3
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	333d      	adds	r3, #61	@ 0x3d
 8003c56:	4602      	mov	r2, r0
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e127      	b.n	8003eac <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	334d      	adds	r3, #77	@ 0x4d
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d120      	bne.n	8003cb4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	334d      	adds	r3, #77	@ 0x4d
 8003c82:	2202      	movs	r2, #2
 8003c84:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	331b      	adds	r3, #27
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	f040 8107 	bne.w	8003eac <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	334c      	adds	r3, #76	@ 0x4c
 8003cae:	2202      	movs	r2, #2
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e0fb      	b.n	8003eac <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334d      	adds	r3, #77	@ 0x4d
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d13a      	bne.n	8003d40 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	334d      	adds	r3, #77	@ 0x4d
 8003cda:	2202      	movs	r2, #2
 8003cdc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	334c      	adds	r3, #76	@ 0x4c
 8003cee:	2202      	movs	r2, #2
 8003cf0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	331b      	adds	r3, #27
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	f040 80d1 	bne.w	8003eac <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	331b      	adds	r3, #27
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d3c:	6053      	str	r3, [r2, #4]
 8003d3e:	e0b5      	b.n	8003eac <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	334d      	adds	r3, #77	@ 0x4d
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d114      	bne.n	8003d80 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	334d      	adds	r3, #77	@ 0x4d
 8003d66:	2202      	movs	r2, #2
 8003d68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	334c      	adds	r3, #76	@ 0x4c
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e095      	b.n	8003eac <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	334d      	adds	r3, #77	@ 0x4d
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	d114      	bne.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	334d      	adds	r3, #77	@ 0x4d
 8003da6:	2202      	movs	r2, #2
 8003da8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	334c      	adds	r3, #76	@ 0x4c
 8003dba:	2205      	movs	r2, #5
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e075      	b.n	8003eac <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	334d      	adds	r3, #77	@ 0x4d
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b07      	cmp	r3, #7
 8003dd4:	d00a      	beq.n	8003dec <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	334d      	adds	r3, #77	@ 0x4d
 8003de6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003de8:	2b09      	cmp	r3, #9
 8003dea:	d170      	bne.n	8003ece <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	334d      	adds	r3, #77	@ 0x4d
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3344      	adds	r3, #68	@ 0x44
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	1c59      	adds	r1, r3, #1
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4403      	add	r3, r0
 8003e20:	3344      	adds	r3, #68	@ 0x44
 8003e22:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3344      	adds	r3, #68	@ 0x44
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d914      	bls.n	8003e64 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	3344      	adds	r3, #68	@ 0x44
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	334c      	adds	r3, #76	@ 0x4c
 8003e5e:	2204      	movs	r2, #4
 8003e60:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e62:	e022      	b.n	8003eaa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	334c      	adds	r3, #76	@ 0x4c
 8003e74:	2202      	movs	r2, #2
 8003e76:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e8e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e96:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003eaa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	334c      	adds	r3, #76	@ 0x4c
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f00a ffce 	bl	800ee64 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ec8:	e002      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003ece:	bf00      	nop
  }
}
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b08a      	sub	sp, #40	@ 0x28
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	0c5b      	lsrs	r3, r3, #17
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f0a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d004      	beq.n	8003f1c <HCD_RXQLVL_IRQHandler+0x46>
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b05      	cmp	r3, #5
 8003f16:	f000 80b6 	beq.w	8004086 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003f1a:	e0b7      	b.n	800408c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80b3 	beq.w	800408a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	332c      	adds	r3, #44	@ 0x2c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 80a7 	beq.w	800408a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3338      	adds	r3, #56	@ 0x38
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	18d1      	adds	r1, r2, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4403      	add	r3, r0
 8003f60:	3334      	adds	r3, #52	@ 0x34
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4299      	cmp	r1, r3
 8003f66:	f200 8083 	bhi.w	8004070 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	332c      	adds	r3, #44	@ 0x2c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	b292      	uxth	r2, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	f001 fe1d 	bl	8005bc4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	332c      	adds	r3, #44	@ 0x2c
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	18d1      	adds	r1, r2, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4403      	add	r3, r0
 8003fae:	332c      	adds	r3, #44	@ 0x2c
 8003fb0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3338      	adds	r3, #56	@ 0x38
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	18d1      	adds	r1, r2, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4403      	add	r3, r0
 8003fd6:	3338      	adds	r3, #56	@ 0x38
 8003fd8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	0cdb      	lsrs	r3, r3, #19
 8003fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fee:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3328      	adds	r3, #40	@ 0x28
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4293      	cmp	r3, r2
 8004008:	d13f      	bne.n	800408a <HCD_RXQLVL_IRQHandler+0x1b4>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d03c      	beq.n	800408a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	4413      	add	r3, r2
 8004018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004026:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800402e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800403c:	461a      	mov	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4613      	mov	r3, r2
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	333c      	adds	r3, #60	@ 0x3c
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f083 0301 	eor.w	r3, r3, #1
 8004058:	b2d8      	uxtb	r0, r3
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4613      	mov	r3, r2
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	333c      	adds	r3, #60	@ 0x3c
 800406a:	4602      	mov	r2, r0
 800406c:	701a      	strb	r2, [r3, #0]
      break;
 800406e:	e00c      	b.n	800408a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	334c      	adds	r3, #76	@ 0x4c
 8004080:	2204      	movs	r2, #4
 8004082:	701a      	strb	r2, [r3, #0]
      break;
 8004084:	e001      	b.n	800408a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004086:	bf00      	nop
 8004088:	e000      	b.n	800408c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800408a:	bf00      	nop
  }
}
 800408c:	bf00      	nop
 800408e:	3728      	adds	r7, #40	@ 0x28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80040c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d10b      	bne.n	80040e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d102      	bne.n	80040dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f00a fea8 	bl	800ee2c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f043 0302 	orr.w	r3, r3, #2
 80040e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d132      	bne.n	8004154 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f043 0308 	orr.w	r3, r3, #8
 80040f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d126      	bne.n	800414e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7a5b      	ldrb	r3, [r3, #9]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d113      	bne.n	8004130 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800410e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004112:	d106      	bne.n	8004122 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f001 fee2 	bl	8005ee4 <USB_InitFSLSPClkSel>
 8004120:	e011      	b.n	8004146 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2101      	movs	r1, #1
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fedb 	bl	8005ee4 <USB_InitFSLSPClkSel>
 800412e:	e00a      	b.n	8004146 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	79db      	ldrb	r3, [r3, #7]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d106      	bne.n	8004146 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800413e:	461a      	mov	r2, r3
 8004140:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004144:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f00a fe9a 	bl	800ee80 <HAL_HCD_PortEnabled_Callback>
 800414c:	e002      	b.n	8004154 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f00a fea4 	bl	800ee9c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b20      	cmp	r3, #32
 800415c:	d103      	bne.n	8004166 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f043 0320 	orr.w	r3, r3, #32
 8004164:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	6013      	str	r3, [r2, #0]
}
 8004172:	bf00      	nop
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004182:	4b06      	ldr	r3, [pc, #24]	@ (800419c <HAL_PWR_EnableBkUpAccess+0x20>)
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <HAL_PWR_EnableBkUpAccess+0x24>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800418e:	687b      	ldr	r3, [r7, #4]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	420e0020 	.word	0x420e0020
 80041a0:	40007000 	.word	0x40007000

080041a4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80041aa:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <HAL_PWR_DisableBkUpAccess+0x20>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80041b0:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <HAL_PWR_DisableBkUpAccess+0x24>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80041b6:	687b      	ldr	r3, [r7, #4]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	420e0020 	.word	0x420e0020
 80041c8:	40007000 	.word	0x40007000

080041cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e267      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d075      	beq.n	80042d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041ea:	4b88      	ldr	r3, [pc, #544]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d00c      	beq.n	8004210 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	4b85      	ldr	r3, [pc, #532]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d112      	bne.n	8004228 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4b82      	ldr	r3, [pc, #520]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800420e:	d10b      	bne.n	8004228 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	4b7e      	ldr	r3, [pc, #504]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d05b      	beq.n	80042d4 <HAL_RCC_OscConfig+0x108>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d157      	bne.n	80042d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e242      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004230:	d106      	bne.n	8004240 <HAL_RCC_OscConfig+0x74>
 8004232:	4b76      	ldr	r3, [pc, #472]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a75      	ldr	r2, [pc, #468]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e01d      	b.n	800427c <HAL_RCC_OscConfig+0xb0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x98>
 800424a:	4b70      	ldr	r3, [pc, #448]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6f      	ldr	r2, [pc, #444]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b6d      	ldr	r3, [pc, #436]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6c      	ldr	r2, [pc, #432]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xb0>
 8004264:	4b69      	ldr	r3, [pc, #420]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a68      	ldr	r2, [pc, #416]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b66      	ldr	r3, [pc, #408]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a65      	ldr	r2, [pc, #404]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fd f926 	bl	80014d4 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd f922 	bl	80014d4 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	@ 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e207      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b5b      	ldr	r3, [pc, #364]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0xc0>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fd f912 	bl	80014d4 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd f90e 	bl	80014d4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	@ 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e1f3      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	4b51      	ldr	r3, [pc, #324]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0xe8>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d063      	beq.n	80043aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042e2:	4b4a      	ldr	r3, [pc, #296]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b47      	ldr	r3, [pc, #284]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d11c      	bne.n	8004334 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b44      	ldr	r3, [pc, #272]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d116      	bne.n	8004334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	4b41      	ldr	r3, [pc, #260]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x152>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d001      	beq.n	800431e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1c7      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b3b      	ldr	r3, [pc, #236]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4937      	ldr	r1, [pc, #220]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004332:	e03a      	b.n	80043aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433c:	4b34      	ldr	r3, [pc, #208]	@ (8004410 <HAL_RCC_OscConfig+0x244>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fd f8c7 	bl	80014d4 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434a:	f7fd f8c3 	bl	80014d4 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e1a8      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	4b2b      	ldr	r3, [pc, #172]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b28      	ldr	r3, [pc, #160]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4925      	ldr	r1, [pc, #148]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]
 800437c:	e015      	b.n	80043aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437e:	4b24      	ldr	r3, [pc, #144]	@ (8004410 <HAL_RCC_OscConfig+0x244>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd f8a6 	bl	80014d4 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438c:	f7fd f8a2 	bl	80014d4 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e187      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	4b1b      	ldr	r3, [pc, #108]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d036      	beq.n	8004424 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <HAL_RCC_OscConfig+0x248>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fd f886 	bl	80014d4 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fd f882 	bl	80014d4 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e167      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80043e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x200>
 80043ea:	e01b      	b.n	8004424 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ec:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <HAL_RCC_OscConfig+0x248>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fd f86f 	bl	80014d4 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f8:	e00e      	b.n	8004418 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fd f86b 	bl	80014d4 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d907      	bls.n	8004418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e150      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
 800440c:	40023800 	.word	0x40023800
 8004410:	42470000 	.word	0x42470000
 8004414:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b88      	ldr	r3, [pc, #544]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ea      	bne.n	80043fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8097 	beq.w	8004560 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b81      	ldr	r3, [pc, #516]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b7d      	ldr	r3, [pc, #500]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	4a7c      	ldr	r2, [pc, #496]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	@ 0x40
 8004452:	4b7a      	ldr	r3, [pc, #488]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b77      	ldr	r3, [pc, #476]	@ (8004640 <HAL_RCC_OscConfig+0x474>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d118      	bne.n	80044a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b74      	ldr	r3, [pc, #464]	@ (8004640 <HAL_RCC_OscConfig+0x474>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a73      	ldr	r2, [pc, #460]	@ (8004640 <HAL_RCC_OscConfig+0x474>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fd f82b 	bl	80014d4 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fd f827 	bl	80014d4 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e10c      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	4b6a      	ldr	r3, [pc, #424]	@ (8004640 <HAL_RCC_OscConfig+0x474>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x2ea>
 80044a8:	4b64      	ldr	r3, [pc, #400]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ac:	4a63      	ldr	r2, [pc, #396]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x324>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x30c>
 80044be:	4b5f      	ldr	r3, [pc, #380]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	4a5e      	ldr	r2, [pc, #376]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ca:	4b5c      	ldr	r3, [pc, #368]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	4a5b      	ldr	r2, [pc, #364]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0x324>
 80044d8:	4b58      	ldr	r3, [pc, #352]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044dc:	4a57      	ldr	r2, [pc, #348]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e4:	4b55      	ldr	r3, [pc, #340]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a54      	ldr	r2, [pc, #336]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044ea:	f023 0304 	bic.w	r3, r3, #4
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fc ffec 	bl	80014d4 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fc ffe8 	bl	80014d4 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0cb      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	4b49      	ldr	r3, [pc, #292]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0ee      	beq.n	8004500 <HAL_RCC_OscConfig+0x334>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004524:	f7fc ffd6 	bl	80014d4 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452a:	e00a      	b.n	8004542 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fc ffd2 	bl	80014d4 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0b5      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	4b3e      	ldr	r3, [pc, #248]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ee      	bne.n	800452c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b39      	ldr	r3, [pc, #228]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	4a38      	ldr	r2, [pc, #224]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800455e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a1 	beq.w	80046ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800456a:	4b34      	ldr	r3, [pc, #208]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b08      	cmp	r3, #8
 8004574:	d05c      	beq.n	8004630 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d141      	bne.n	8004602 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b31      	ldr	r3, [pc, #196]	@ (8004644 <HAL_RCC_OscConfig+0x478>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fc ffa6 	bl	80014d4 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458c:	f7fc ffa2 	bl	80014d4 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e087      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b27      	ldr	r3, [pc, #156]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	491b      	ldr	r1, [pc, #108]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004644 <HAL_RCC_OscConfig+0x478>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fc ff7b 	bl	80014d4 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e2:	f7fc ff77 	bl	80014d4 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e05c      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f4:	4b11      	ldr	r3, [pc, #68]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x416>
 8004600:	e054      	b.n	80046ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <HAL_RCC_OscConfig+0x478>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fc ff64 	bl	80014d4 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004610:	f7fc ff60 	bl	80014d4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e045      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b06      	ldr	r3, [pc, #24]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x444>
 800462e:	e03d      	b.n	80046ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e038      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
 800463c:	40023800 	.word	0x40023800
 8004640:	40007000 	.word	0x40007000
 8004644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004648:	4b1b      	ldr	r3, [pc, #108]	@ (80046b8 <HAL_RCC_OscConfig+0x4ec>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d028      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d121      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d11a      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800467e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	4293      	cmp	r3, r2
 8004682:	d111      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	3b01      	subs	r3, #1
 8004692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800

080046bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0cc      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b68      	ldr	r3, [pc, #416]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d90c      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b65      	ldr	r3, [pc, #404]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b63      	ldr	r3, [pc, #396]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0b8      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d020      	beq.n	8004746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004710:	4b59      	ldr	r3, [pc, #356]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a58      	ldr	r2, [pc, #352]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800471a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004728:	4b53      	ldr	r3, [pc, #332]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a52      	ldr	r2, [pc, #328]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4b50      	ldr	r3, [pc, #320]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	494d      	ldr	r1, [pc, #308]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d044      	beq.n	80047dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	4b47      	ldr	r3, [pc, #284]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d119      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d003      	beq.n	800477a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	2b03      	cmp	r3, #3
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b3f      	ldr	r3, [pc, #252]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e06f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478a:	4b3b      	ldr	r3, [pc, #236]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e067      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479a:	4b37      	ldr	r3, [pc, #220]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4934      	ldr	r1, [pc, #208]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ac:	f7fc fe92 	bl	80014d4 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fc fe8e 	bl	80014d4 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e04f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 020c 	and.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1eb      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b25      	ldr	r3, [pc, #148]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d20c      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b22      	ldr	r3, [pc, #136]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b20      	ldr	r3, [pc, #128]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e032      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004810:	4b19      	ldr	r3, [pc, #100]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4916      	ldr	r1, [pc, #88]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482e:	4b12      	ldr	r3, [pc, #72]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	490e      	ldr	r1, [pc, #56]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004842:	f000 f821 	bl	8004888 <HAL_RCC_GetSysClockFreq>
 8004846:	4602      	mov	r2, r0
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	490a      	ldr	r1, [pc, #40]	@ (800487c <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	5ccb      	ldrb	r3, [r1, r3]
 8004856:	fa22 f303 	lsr.w	r3, r2, r3
 800485a:	4a09      	ldr	r2, [pc, #36]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800485e:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fc fdf2 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023c00 	.word	0x40023c00
 8004878:	40023800 	.word	0x40023800
 800487c:	0800f960 	.word	0x0800f960
 8004880:	20000000 	.word	0x20000000
 8004884:	20000004 	.word	0x20000004

08004888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800488c:	b094      	sub	sp, #80	@ 0x50
 800488e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048a0:	4b79      	ldr	r3, [pc, #484]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d00d      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x40>
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	f200 80e1 	bhi.w	8004a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x34>
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ba:	e0db      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048bc:	4b73      	ldr	r3, [pc, #460]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80048be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048c0:	e0db      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048c2:	4b73      	ldr	r3, [pc, #460]	@ (8004a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80048c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048c6:	e0d8      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d063      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048de:	4b6a      	ldr	r3, [pc, #424]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	099b      	lsrs	r3, r3, #6
 80048e4:	2200      	movs	r2, #0
 80048e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f2:	2300      	movs	r3, #0
 80048f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048fa:	4622      	mov	r2, r4
 80048fc:	462b      	mov	r3, r5
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	0159      	lsls	r1, r3, #5
 8004908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490c:	0150      	lsls	r0, r2, #5
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4621      	mov	r1, r4
 8004914:	1a51      	subs	r1, r2, r1
 8004916:	6139      	str	r1, [r7, #16]
 8004918:	4629      	mov	r1, r5
 800491a:	eb63 0301 	sbc.w	r3, r3, r1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800492c:	4659      	mov	r1, fp
 800492e:	018b      	lsls	r3, r1, #6
 8004930:	4651      	mov	r1, sl
 8004932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004936:	4651      	mov	r1, sl
 8004938:	018a      	lsls	r2, r1, #6
 800493a:	4651      	mov	r1, sl
 800493c:	ebb2 0801 	subs.w	r8, r2, r1
 8004940:	4659      	mov	r1, fp
 8004942:	eb63 0901 	sbc.w	r9, r3, r1
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800495a:	4690      	mov	r8, r2
 800495c:	4699      	mov	r9, r3
 800495e:	4623      	mov	r3, r4
 8004960:	eb18 0303 	adds.w	r3, r8, r3
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	462b      	mov	r3, r5
 8004968:	eb49 0303 	adc.w	r3, r9, r3
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800497a:	4629      	mov	r1, r5
 800497c:	024b      	lsls	r3, r1, #9
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004984:	4621      	mov	r1, r4
 8004986:	024a      	lsls	r2, r1, #9
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004998:	f7fb fc16 	bl	80001c8 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4613      	mov	r3, r2
 80049a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a4:	e058      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a6:	4b38      	ldr	r3, [pc, #224]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	099b      	lsrs	r3, r3, #6
 80049ac:	2200      	movs	r2, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	4611      	mov	r1, r2
 80049b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	2300      	movs	r3, #0
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80049bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	0159      	lsls	r1, r3, #5
 80049ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d2:	0150      	lsls	r0, r2, #5
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4641      	mov	r1, r8
 80049da:	ebb2 0a01 	subs.w	sl, r2, r1
 80049de:	4649      	mov	r1, r9
 80049e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049f8:	ebb2 040a 	subs.w	r4, r2, sl
 80049fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	00eb      	lsls	r3, r5, #3
 8004a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0e:	00e2      	lsls	r2, r4, #3
 8004a10:	4614      	mov	r4, r2
 8004a12:	461d      	mov	r5, r3
 8004a14:	4643      	mov	r3, r8
 8004a16:	18e3      	adds	r3, r4, r3
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	eb45 0303 	adc.w	r3, r5, r3
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a2e:	4629      	mov	r1, r5
 8004a30:	028b      	lsls	r3, r1, #10
 8004a32:	4621      	mov	r1, r4
 8004a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a38:	4621      	mov	r1, r4
 8004a3a:	028a      	lsls	r2, r1, #10
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a42:	2200      	movs	r2, #0
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	61fa      	str	r2, [r7, #28]
 8004a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a4c:	f7fb fbbc 	bl	80001c8 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4613      	mov	r3, r2
 8004a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a58:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	3301      	adds	r3, #1
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a72:	e002      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3750      	adds	r7, #80	@ 0x50
 8004a80:	46bd      	mov	sp, r7
 8004a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a86:	bf00      	nop
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	00f42400 	.word	0x00f42400
 8004a90:	007a1200 	.word	0x007a1200

08004a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a98:	4b03      	ldr	r3, [pc, #12]	@ (8004aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000000 	.word	0x20000000

08004aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ab0:	f7ff fff0 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b05      	ldr	r3, [pc, #20]	@ (8004acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	0a9b      	lsrs	r3, r3, #10
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	4903      	ldr	r1, [pc, #12]	@ (8004ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac2:	5ccb      	ldrb	r3, [r1, r3]
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	0800f970 	.word	0x0800f970

08004ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ad8:	f7ff ffdc 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	0b5b      	lsrs	r3, r3, #13
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	4903      	ldr	r1, [pc, #12]	@ (8004af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40023800 	.word	0x40023800
 8004af8:	0800f970 	.word	0x0800f970

08004afc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d035      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b24:	4b62      	ldr	r3, [pc, #392]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b2a:	f7fc fcd3 	bl	80014d4 <HAL_GetTick>
 8004b2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b32:	f7fc fccf 	bl	80014d4 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0b0      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b44:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	019a      	lsls	r2, r3, #6
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	071b      	lsls	r3, r3, #28
 8004b5c:	4955      	ldr	r1, [pc, #340]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b64:	4b52      	ldr	r3, [pc, #328]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b6a:	f7fc fcb3 	bl	80014d4 <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b72:	f7fc fcaf 	bl	80014d4 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e090      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b84:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8083 	beq.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	4b44      	ldr	r3, [pc, #272]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	4a43      	ldr	r2, [pc, #268]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bae:	4b41      	ldr	r3, [pc, #260]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bba:	4b3f      	ldr	r3, [pc, #252]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3e      	ldr	r2, [pc, #248]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fc85 	bl	80014d4 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fc fc81 	bl	80014d4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e062      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004be0:	4b35      	ldr	r3, [pc, #212]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bec:	4b31      	ldr	r3, [pc, #196]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02f      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d028      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c14:	4b29      	ldr	r3, [pc, #164]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c1a:	4b28      	ldr	r3, [pc, #160]	@ (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c20:	4a24      	ldr	r2, [pc, #144]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c26:	4b23      	ldr	r3, [pc, #140]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d114      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fc fc4f 	bl	80014d4 <HAL_GetTick>
 8004c36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c38:	e00a      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3a:	f7fc fc4b 	bl	80014d4 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e02a      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c50:	4b18      	ldr	r3, [pc, #96]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0ee      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c68:	d10d      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c6a:	4b12      	ldr	r3, [pc, #72]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c7e:	490d      	ldr	r1, [pc, #52]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]
 8004c84:	e005      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c86:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c90:	6093      	str	r3, [r2, #8]
 8004c92:	4b08      	ldr	r3, [pc, #32]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9e:	4905      	ldr	r1, [pc, #20]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	42470068 	.word	0x42470068
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	40007000 	.word	0x40007000
 8004cbc:	42470e40 	.word	0x42470e40

08004cc0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004cc6:	f7fc fc05 	bl	80014d4 <HAL_GetTick>
 8004cca:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004ccc:	4b5d      	ldr	r3, [pc, #372]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a5c      	ldr	r2, [pc, #368]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cda:	f7fc fbfb 	bl	80014d4 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0a7      	b.n	8004e3c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004cec:	4b55      	ldr	r3, [pc, #340]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8004cf8:	4b52      	ldr	r3, [pc, #328]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a51      	ldr	r2, [pc, #324]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d02:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004d04:	f7fc fbe6 	bl	80014d4 <HAL_GetTick>
 8004d08:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8004d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004d10:	e00a      	b.n	8004d28 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d12:	f7fc fbdf 	bl	80014d4 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e089      	b.n	8004e3c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004d28:	4b46      	ldr	r3, [pc, #280]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1ee      	bne.n	8004d12 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004d34:	f7fc fbce 	bl	80014d4 <HAL_GetTick>
 8004d38:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8004d3a:	4b42      	ldr	r3, [pc, #264]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a41      	ldr	r2, [pc, #260]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004d40:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8004d44:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fc fbc4 	bl	80014d4 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	@ 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e070      	b.n	8004e3c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004d5a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004d66:	f7fc fbb5 	bl	80014d4 <HAL_GetTick>
 8004d6a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004d6c:	4b35      	ldr	r3, [pc, #212]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a34      	ldr	r2, [pc, #208]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fc fbab 	bl	80014d4 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e057      	b.n	8004e3c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f0      	bne.n	8004d7a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004d98:	f7fc fb9c 	bl	80014d4 <HAL_GetTick>
 8004d9c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8004d9e:	4b29      	ldr	r3, [pc, #164]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a28      	ldr	r2, [pc, #160]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004da4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004da8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dac:	f7fc fb92 	bl	80014d4 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e03e      	b.n	8004e3c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004dbe:	4b21      	ldr	r3, [pc, #132]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8004dca:	4b1e      	ldr	r3, [pc, #120]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8004e48 <HAL_RCC_DeInit+0x188>)
 8004dce:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8004dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e4c <HAL_RCC_DeInit+0x18c>)
 8004dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8004dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004dde:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004de2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8004de4:	4b17      	ldr	r3, [pc, #92]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4a16      	ldr	r2, [pc, #88]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004dea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dee:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8004df0:	4b14      	ldr	r3, [pc, #80]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004df6:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8004dfa:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8004dfc:	4b11      	ldr	r3, [pc, #68]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a10      	ldr	r2, [pc, #64]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e06:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004e08:	4b0e      	ldr	r3, [pc, #56]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004e14:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e18:	4a0a      	ldr	r2, [pc, #40]	@ (8004e44 <HAL_RCC_DeInit+0x184>)
 8004e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e1e:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8004e20:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <HAL_RCC_DeInit+0x190>)
 8004e22:	4a0c      	ldr	r2, [pc, #48]	@ (8004e54 <HAL_RCC_DeInit+0x194>)
 8004e24:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e26:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <HAL_RCC_DeInit+0x198>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fc fb0e 	bl	800144c <HAL_InitTick>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
  }
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40023800 	.word	0x40023800
 8004e48:	04003010 	.word	0x04003010
 8004e4c:	20003000 	.word	0x20003000
 8004e50:	20000000 	.word	0x20000000
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	20000004 	.word	0x20000004

08004e5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e073      	b.n	8004f5a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	7f5b      	ldrb	r3, [r3, #29]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fc f96c 	bl	8001160 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d055      	beq.n	8004f48 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	22ca      	movs	r2, #202	@ 0xca
 8004ea2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2253      	movs	r2, #83	@ 0x53
 8004eaa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f87f 	bl	8004fb0 <RTC_EnterInitMode>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d12c      	bne.n	8004f16 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ece:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6899      	ldr	r1, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68d2      	ldr	r2, [r2, #12]
 8004ef6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6919      	ldr	r1, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	041a      	lsls	r2, r3, #16
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f886 	bl	800501e <RTC_ExitInitMode>
 8004f12:	4603      	mov	r3, r0
 8004f14:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d110      	bne.n	8004f3e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f2a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	22ff      	movs	r2, #255	@ 0xff
 8004f44:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f46:	e001      	b.n	8004f4c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a0d      	ldr	r2, [pc, #52]	@ (8004fac <HAL_RTC_WaitForSynchro+0x48>)
 8004f76:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f78:	f7fc faac 	bl	80014d4 <HAL_GetTick>
 8004f7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f7e:	e009      	b.n	8004f94 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f80:	f7fc faa8 	bl	80014d4 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f8e:	d901      	bls.n	8004f94 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e007      	b.n	8004fa4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0ee      	beq.n	8004f80 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	00017f5f 	.word	0x00017f5f

08004fb0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d122      	bne.n	8005014 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fdc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fde:	f7fc fa79 	bl	80014d4 <HAL_GetTick>
 8004fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004fe4:	e00c      	b.n	8005000 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fe6:	f7fc fa75 	bl	80014d4 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ff4:	d904      	bls.n	8005000 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <RTC_EnterInitMode+0x64>
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d1e8      	bne.n	8004fe6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005038:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff ff8b 	bl	8004f64 <HAL_RTC_WaitForSynchro>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2204      	movs	r2, #4
 8005058:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800505e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3350      	adds	r3, #80	@ 0x50
 800507e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3350      	adds	r3, #80	@ 0x50
 80050b0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e042      	b.n	8005164 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc f85e 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	@ 0x24
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800510e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f973 	bl	80053fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	@ 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b20      	cmp	r3, #32
 800518a:	d175      	bne.n	8005278 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Transmit+0x2c>
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e06e      	b.n	800527a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2221      	movs	r2, #33	@ 0x21
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051aa:	f7fc f993 	bl	80014d4 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c4:	d108      	bne.n	80051d8 <HAL_UART_Transmit+0x6c>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e003      	b.n	80051e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051e0:	e02e      	b.n	8005240 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	2180      	movs	r1, #128	@ 0x80
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f848 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e03a      	b.n	800527a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	3302      	adds	r3, #2
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e007      	b.n	8005232 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	781a      	ldrb	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	3301      	adds	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1cb      	bne.n	80051e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2200      	movs	r2, #0
 8005252:	2140      	movs	r1, #64	@ 0x40
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f814 	bl	8005282 <UART_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005292:	e03b      	b.n	800530c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d037      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529c:	f7fc f91a 	bl	80014d4 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	6a3a      	ldr	r2, [r7, #32]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d302      	bcc.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e03a      	b.n	800532c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d023      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0x8a>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b80      	cmp	r3, #128	@ 0x80
 80052c8:	d020      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0x8a>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b40      	cmp	r3, #64	@ 0x40
 80052ce:	d01d      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d116      	bne.n	800530c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f81d 	bl	8005334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2208      	movs	r2, #8
 80052fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e00f      	b.n	800532c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	429a      	cmp	r2, r3
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	429a      	cmp	r2, r3
 8005328:	d0b4      	beq.n	8005294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b095      	sub	sp, #84	@ 0x54
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800535c:	643a      	str	r2, [r7, #64]	@ 0x40
 800535e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005362:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e5      	bne.n	800533c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3314      	adds	r3, #20
 8005376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3314      	adds	r3, #20
 800538e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005390:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d119      	bne.n	80053e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f023 0310 	bic.w	r3, r3, #16
 80053c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053cc:	61ba      	str	r2, [r7, #24]
 80053ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6979      	ldr	r1, [r7, #20]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	613b      	str	r3, [r7, #16]
   return(result);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e5      	bne.n	80053ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053ee:	bf00      	nop
 80053f0:	3754      	adds	r7, #84	@ 0x54
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005400:	b0c0      	sub	sp, #256	@ 0x100
 8005402:	af00      	add	r7, sp, #0
 8005404:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	68d9      	ldr	r1, [r3, #12]
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	ea40 0301 	orr.w	r3, r0, r1
 8005424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	431a      	orrs	r2, r3
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	431a      	orrs	r2, r3
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005454:	f021 010c 	bic.w	r1, r1, #12
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005462:	430b      	orrs	r3, r1
 8005464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005476:	6999      	ldr	r1, [r3, #24]
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	ea40 0301 	orr.w	r3, r0, r1
 8005482:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b8f      	ldr	r3, [pc, #572]	@ (80056c8 <UART_SetConfig+0x2cc>)
 800548c:	429a      	cmp	r2, r3
 800548e:	d005      	beq.n	800549c <UART_SetConfig+0xa0>
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b8d      	ldr	r3, [pc, #564]	@ (80056cc <UART_SetConfig+0x2d0>)
 8005498:	429a      	cmp	r2, r3
 800549a:	d104      	bne.n	80054a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800549c:	f7ff fb1a 	bl	8004ad4 <HAL_RCC_GetPCLK2Freq>
 80054a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054a4:	e003      	b.n	80054ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054a6:	f7ff fb01 	bl	8004aac <HAL_RCC_GetPCLK1Freq>
 80054aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054b8:	f040 810c 	bne.w	80056d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054ce:	4622      	mov	r2, r4
 80054d0:	462b      	mov	r3, r5
 80054d2:	1891      	adds	r1, r2, r2
 80054d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054d6:	415b      	adcs	r3, r3
 80054d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054de:	4621      	mov	r1, r4
 80054e0:	eb12 0801 	adds.w	r8, r2, r1
 80054e4:	4629      	mov	r1, r5
 80054e6:	eb43 0901 	adc.w	r9, r3, r1
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054fe:	4690      	mov	r8, r2
 8005500:	4699      	mov	r9, r3
 8005502:	4623      	mov	r3, r4
 8005504:	eb18 0303 	adds.w	r3, r8, r3
 8005508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800550c:	462b      	mov	r3, r5
 800550e:	eb49 0303 	adc.w	r3, r9, r3
 8005512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005522:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800552a:	460b      	mov	r3, r1
 800552c:	18db      	adds	r3, r3, r3
 800552e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005530:	4613      	mov	r3, r2
 8005532:	eb42 0303 	adc.w	r3, r2, r3
 8005536:	657b      	str	r3, [r7, #84]	@ 0x54
 8005538:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800553c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005540:	f7fa fe42 	bl	80001c8 <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4b61      	ldr	r3, [pc, #388]	@ (80056d0 <UART_SetConfig+0x2d4>)
 800554a:	fba3 2302 	umull	r2, r3, r3, r2
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	011c      	lsls	r4, r3, #4
 8005552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005556:	2200      	movs	r2, #0
 8005558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800555c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005560:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005564:	4642      	mov	r2, r8
 8005566:	464b      	mov	r3, r9
 8005568:	1891      	adds	r1, r2, r2
 800556a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800556c:	415b      	adcs	r3, r3
 800556e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005574:	4641      	mov	r1, r8
 8005576:	eb12 0a01 	adds.w	sl, r2, r1
 800557a:	4649      	mov	r1, r9
 800557c:	eb43 0b01 	adc.w	fp, r3, r1
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800558c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005590:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005594:	4692      	mov	sl, r2
 8005596:	469b      	mov	fp, r3
 8005598:	4643      	mov	r3, r8
 800559a:	eb1a 0303 	adds.w	r3, sl, r3
 800559e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055a2:	464b      	mov	r3, r9
 80055a4:	eb4b 0303 	adc.w	r3, fp, r3
 80055a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055c0:	460b      	mov	r3, r1
 80055c2:	18db      	adds	r3, r3, r3
 80055c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055c6:	4613      	mov	r3, r2
 80055c8:	eb42 0303 	adc.w	r3, r2, r3
 80055cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80055d6:	f7fa fdf7 	bl	80001c8 <__aeabi_uldivmod>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4611      	mov	r1, r2
 80055e0:	4b3b      	ldr	r3, [pc, #236]	@ (80056d0 <UART_SetConfig+0x2d4>)
 80055e2:	fba3 2301 	umull	r2, r3, r3, r1
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	2264      	movs	r2, #100	@ 0x64
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	1acb      	subs	r3, r1, r3
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80055f6:	4b36      	ldr	r3, [pc, #216]	@ (80056d0 <UART_SetConfig+0x2d4>)
 80055f8:	fba3 2302 	umull	r2, r3, r3, r2
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005604:	441c      	add	r4, r3
 8005606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005610:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005614:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005618:	4642      	mov	r2, r8
 800561a:	464b      	mov	r3, r9
 800561c:	1891      	adds	r1, r2, r2
 800561e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005620:	415b      	adcs	r3, r3
 8005622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005628:	4641      	mov	r1, r8
 800562a:	1851      	adds	r1, r2, r1
 800562c:	6339      	str	r1, [r7, #48]	@ 0x30
 800562e:	4649      	mov	r1, r9
 8005630:	414b      	adcs	r3, r1
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005640:	4659      	mov	r1, fp
 8005642:	00cb      	lsls	r3, r1, #3
 8005644:	4651      	mov	r1, sl
 8005646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800564a:	4651      	mov	r1, sl
 800564c:	00ca      	lsls	r2, r1, #3
 800564e:	4610      	mov	r0, r2
 8005650:	4619      	mov	r1, r3
 8005652:	4603      	mov	r3, r0
 8005654:	4642      	mov	r2, r8
 8005656:	189b      	adds	r3, r3, r2
 8005658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800565c:	464b      	mov	r3, r9
 800565e:	460a      	mov	r2, r1
 8005660:	eb42 0303 	adc.w	r3, r2, r3
 8005664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005674:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005678:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800567c:	460b      	mov	r3, r1
 800567e:	18db      	adds	r3, r3, r3
 8005680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005682:	4613      	mov	r3, r2
 8005684:	eb42 0303 	adc.w	r3, r2, r3
 8005688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800568a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800568e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005692:	f7fa fd99 	bl	80001c8 <__aeabi_uldivmod>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <UART_SetConfig+0x2d4>)
 800569c:	fba3 1302 	umull	r1, r3, r3, r2
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	2164      	movs	r1, #100	@ 0x64
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	3332      	adds	r3, #50	@ 0x32
 80056ae:	4a08      	ldr	r2, [pc, #32]	@ (80056d0 <UART_SetConfig+0x2d4>)
 80056b0:	fba2 2303 	umull	r2, r3, r2, r3
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	f003 0207 	and.w	r2, r3, #7
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4422      	add	r2, r4
 80056c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056c4:	e106      	b.n	80058d4 <UART_SetConfig+0x4d8>
 80056c6:	bf00      	nop
 80056c8:	40011000 	.word	0x40011000
 80056cc:	40011400 	.word	0x40011400
 80056d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d8:	2200      	movs	r2, #0
 80056da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80056e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80056e6:	4642      	mov	r2, r8
 80056e8:	464b      	mov	r3, r9
 80056ea:	1891      	adds	r1, r2, r2
 80056ec:	6239      	str	r1, [r7, #32]
 80056ee:	415b      	adcs	r3, r3
 80056f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056f6:	4641      	mov	r1, r8
 80056f8:	1854      	adds	r4, r2, r1
 80056fa:	4649      	mov	r1, r9
 80056fc:	eb43 0501 	adc.w	r5, r3, r1
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	00eb      	lsls	r3, r5, #3
 800570a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800570e:	00e2      	lsls	r2, r4, #3
 8005710:	4614      	mov	r4, r2
 8005712:	461d      	mov	r5, r3
 8005714:	4643      	mov	r3, r8
 8005716:	18e3      	adds	r3, r4, r3
 8005718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800571c:	464b      	mov	r3, r9
 800571e:	eb45 0303 	adc.w	r3, r5, r3
 8005722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005732:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005742:	4629      	mov	r1, r5
 8005744:	008b      	lsls	r3, r1, #2
 8005746:	4621      	mov	r1, r4
 8005748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800574c:	4621      	mov	r1, r4
 800574e:	008a      	lsls	r2, r1, #2
 8005750:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005754:	f7fa fd38 	bl	80001c8 <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4b60      	ldr	r3, [pc, #384]	@ (80058e0 <UART_SetConfig+0x4e4>)
 800575e:	fba3 2302 	umull	r2, r3, r3, r2
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	011c      	lsls	r4, r3, #4
 8005766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800576a:	2200      	movs	r2, #0
 800576c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005770:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005774:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005778:	4642      	mov	r2, r8
 800577a:	464b      	mov	r3, r9
 800577c:	1891      	adds	r1, r2, r2
 800577e:	61b9      	str	r1, [r7, #24]
 8005780:	415b      	adcs	r3, r3
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005788:	4641      	mov	r1, r8
 800578a:	1851      	adds	r1, r2, r1
 800578c:	6139      	str	r1, [r7, #16]
 800578e:	4649      	mov	r1, r9
 8005790:	414b      	adcs	r3, r1
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057a0:	4659      	mov	r1, fp
 80057a2:	00cb      	lsls	r3, r1, #3
 80057a4:	4651      	mov	r1, sl
 80057a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057aa:	4651      	mov	r1, sl
 80057ac:	00ca      	lsls	r2, r1, #3
 80057ae:	4610      	mov	r0, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	4642      	mov	r2, r8
 80057b6:	189b      	adds	r3, r3, r2
 80057b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057bc:	464b      	mov	r3, r9
 80057be:	460a      	mov	r2, r1
 80057c0:	eb42 0303 	adc.w	r3, r2, r3
 80057c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80057e0:	4649      	mov	r1, r9
 80057e2:	008b      	lsls	r3, r1, #2
 80057e4:	4641      	mov	r1, r8
 80057e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ea:	4641      	mov	r1, r8
 80057ec:	008a      	lsls	r2, r1, #2
 80057ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80057f2:	f7fa fce9 	bl	80001c8 <__aeabi_uldivmod>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	4b38      	ldr	r3, [pc, #224]	@ (80058e0 <UART_SetConfig+0x4e4>)
 80057fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	2264      	movs	r2, #100	@ 0x64
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	1acb      	subs	r3, r1, r3
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	3332      	adds	r3, #50	@ 0x32
 8005810:	4a33      	ldr	r2, [pc, #204]	@ (80058e0 <UART_SetConfig+0x4e4>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800581c:	441c      	add	r4, r3
 800581e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005822:	2200      	movs	r2, #0
 8005824:	673b      	str	r3, [r7, #112]	@ 0x70
 8005826:	677a      	str	r2, [r7, #116]	@ 0x74
 8005828:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800582c:	4642      	mov	r2, r8
 800582e:	464b      	mov	r3, r9
 8005830:	1891      	adds	r1, r2, r2
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	415b      	adcs	r3, r3
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800583c:	4641      	mov	r1, r8
 800583e:	1851      	adds	r1, r2, r1
 8005840:	6039      	str	r1, [r7, #0]
 8005842:	4649      	mov	r1, r9
 8005844:	414b      	adcs	r3, r1
 8005846:	607b      	str	r3, [r7, #4]
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005854:	4659      	mov	r1, fp
 8005856:	00cb      	lsls	r3, r1, #3
 8005858:	4651      	mov	r1, sl
 800585a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800585e:	4651      	mov	r1, sl
 8005860:	00ca      	lsls	r2, r1, #3
 8005862:	4610      	mov	r0, r2
 8005864:	4619      	mov	r1, r3
 8005866:	4603      	mov	r3, r0
 8005868:	4642      	mov	r2, r8
 800586a:	189b      	adds	r3, r3, r2
 800586c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800586e:	464b      	mov	r3, r9
 8005870:	460a      	mov	r2, r1
 8005872:	eb42 0303 	adc.w	r3, r2, r3
 8005876:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	663b      	str	r3, [r7, #96]	@ 0x60
 8005882:	667a      	str	r2, [r7, #100]	@ 0x64
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005890:	4649      	mov	r1, r9
 8005892:	008b      	lsls	r3, r1, #2
 8005894:	4641      	mov	r1, r8
 8005896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800589a:	4641      	mov	r1, r8
 800589c:	008a      	lsls	r2, r1, #2
 800589e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058a2:	f7fa fc91 	bl	80001c8 <__aeabi_uldivmod>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4b0d      	ldr	r3, [pc, #52]	@ (80058e0 <UART_SetConfig+0x4e4>)
 80058ac:	fba3 1302 	umull	r1, r3, r3, r2
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	2164      	movs	r1, #100	@ 0x64
 80058b4:	fb01 f303 	mul.w	r3, r1, r3
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	3332      	adds	r3, #50	@ 0x32
 80058be:	4a08      	ldr	r2, [pc, #32]	@ (80058e0 <UART_SetConfig+0x4e4>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f003 020f 	and.w	r2, r3, #15
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4422      	add	r2, r4
 80058d2:	609a      	str	r2, [r3, #8]
}
 80058d4:	bf00      	nop
 80058d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80058da:	46bd      	mov	sp, r7
 80058dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058e0:	51eb851f 	.word	0x51eb851f

080058e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058e4:	b084      	sub	sp, #16
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	f107 001c 	add.w	r0, r7, #28
 80058f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d123      	bne.n	8005946 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005902:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005926:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800592a:	2b01      	cmp	r3, #1
 800592c:	d105      	bne.n	800593a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f9dc 	bl	8005cf8 <USB_CoreReset>
 8005940:	4603      	mov	r3, r0
 8005942:	73fb      	strb	r3, [r7, #15]
 8005944:	e01b      	b.n	800597e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f9d0 	bl	8005cf8 <USB_CoreReset>
 8005958:	4603      	mov	r3, r0
 800595a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800595c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005968:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005970:	e005      	b.n	800597e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005976:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800597e:	7fbb      	ldrb	r3, [r7, #30]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d10b      	bne.n	800599c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f043 0206 	orr.w	r2, r3, #6
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f043 0220 	orr.w	r2, r3, #32
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059a8:	b004      	add	sp, #16
 80059aa:	4770      	bx	lr

080059ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f043 0201 	orr.w	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f023 0201 	bic.w	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d115      	bne.n	8005a3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a1e:	200a      	movs	r0, #10
 8005a20:	f7fb fd64 	bl	80014ec <HAL_Delay>
      ms += 10U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	330a      	adds	r3, #10
 8005a28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f956 	bl	8005cdc <USB_GetMode>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d01e      	beq.n	8005a74 <USB_SetCurrentMode+0x84>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a3a:	d9f0      	bls.n	8005a1e <USB_SetCurrentMode+0x2e>
 8005a3c:	e01a      	b.n	8005a74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d115      	bne.n	8005a70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a50:	200a      	movs	r0, #10
 8005a52:	f7fb fd4b 	bl	80014ec <HAL_Delay>
      ms += 10U;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	330a      	adds	r3, #10
 8005a5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f93d 	bl	8005cdc <USB_GetMode>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <USB_SetCurrentMode+0x84>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a6c:	d9f0      	bls.n	8005a50 <USB_SetCurrentMode+0x60>
 8005a6e:	e001      	b.n	8005a74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e005      	b.n	8005a80 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a78:	d101      	bne.n	8005a7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005aa2:	d901      	bls.n	8005aa8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e01b      	b.n	8005ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	daf2      	bge.n	8005a96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	019b      	lsls	r3, r3, #6
 8005ab8:	f043 0220 	orr.w	r2, r3, #32
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005acc:	d901      	bls.n	8005ad2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e006      	b.n	8005ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d0f0      	beq.n	8005ac0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b04:	d901      	bls.n	8005b0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e018      	b.n	8005b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	daf2      	bge.n	8005af8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2210      	movs	r2, #16
 8005b1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b28:	d901      	bls.n	8005b2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e006      	b.n	8005b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d0f0      	beq.n	8005b1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b089      	sub	sp, #36	@ 0x24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4611      	mov	r1, r2
 8005b54:	461a      	mov	r2, r3
 8005b56:	460b      	mov	r3, r1
 8005b58:	71fb      	strb	r3, [r7, #7]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d123      	bne.n	8005bb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b6e:	88bb      	ldrh	r3, [r7, #4]
 8005b70:	3303      	adds	r3, #3
 8005b72:	089b      	lsrs	r3, r3, #2
 8005b74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b76:	2300      	movs	r3, #0
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	e018      	b.n	8005bae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	031a      	lsls	r2, r3, #12
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b88:	461a      	mov	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	3301      	adds	r3, #1
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d3e2      	bcc.n	8005b7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3724      	adds	r7, #36	@ 0x24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b08b      	sub	sp, #44	@ 0x2c
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	089b      	lsrs	r3, r3, #2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bea:	2300      	movs	r3, #0
 8005bec:	623b      	str	r3, [r7, #32]
 8005bee:	e014      	b.n	8005c1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	3301      	adds	r3, #1
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	3301      	adds	r3, #1
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	3301      	adds	r3, #1
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	3301      	adds	r3, #1
 8005c18:	623b      	str	r3, [r7, #32]
 8005c1a:	6a3a      	ldr	r2, [r7, #32]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d3e6      	bcc.n	8005bf0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c22:	8bfb      	ldrh	r3, [r7, #30]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01e      	beq.n	8005c66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c32:	461a      	mov	r2, r3
 8005c34:	f107 0310 	add.w	r3, r7, #16
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	701a      	strb	r2, [r3, #0]
      i++;
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	3301      	adds	r3, #1
 8005c52:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	3301      	adds	r3, #1
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c5a:	8bfb      	ldrh	r3, [r7, #30]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c60:	8bfb      	ldrh	r3, [r7, #30]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1ea      	bne.n	8005c3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	372c      	adds	r7, #44	@ 0x2c
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cce:	68bb      	ldr	r3, [r7, #8]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3301      	adds	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d10:	d901      	bls.n	8005d16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e01b      	b.n	8005d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	daf2      	bge.n	8005d04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f043 0201 	orr.w	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d3a:	d901      	bls.n	8005d40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e006      	b.n	8005d4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d0f0      	beq.n	8005d2e <USB_CoreReset+0x36>

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b086      	sub	sp, #24
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d86:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d92:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d119      	bne.n	8005de6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005db2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d10a      	bne.n	8005dd0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dc8:	f043 0304 	orr.w	r3, r3, #4
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e014      	b.n	8005dfa <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dde:	f023 0304 	bic.w	r3, r3, #4
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	e009      	b.n	8005dfa <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005df4:	f023 0304 	bic.w	r3, r3, #4
 8005df8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dfa:	2110      	movs	r1, #16
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff fe43 	bl	8005a88 <USB_FlushTxFifo>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff fe6d 	bl	8005aec <USB_FlushRxFifo>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	e015      	b.n	8005e4e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295
 8005e34:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e42:	461a      	mov	r2, r3
 8005e44:	2300      	movs	r3, #0
 8005e46:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e52:	461a      	mov	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d3e3      	bcc.n	8005e22 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f04f 32ff 	mov.w	r2, #4294967295
 8005e66:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a18      	ldr	r2, [pc, #96]	@ (8005ecc <USB_HostInit+0x170>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10b      	bne.n	8005e88 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e76:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a15      	ldr	r2, [pc, #84]	@ (8005ed0 <USB_HostInit+0x174>)
 8005e7c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a14      	ldr	r2, [pc, #80]	@ (8005ed4 <USB_HostInit+0x178>)
 8005e82:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005e86:	e009      	b.n	8005e9c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2280      	movs	r2, #128	@ 0x80
 8005e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a11      	ldr	r2, [pc, #68]	@ (8005ed8 <USB_HostInit+0x17c>)
 8005e92:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a11      	ldr	r2, [pc, #68]	@ (8005edc <USB_HostInit+0x180>)
 8005e98:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d105      	bne.n	8005eb0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	f043 0210 	orr.w	r2, r3, #16
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee0 <USB_HostInit+0x184>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ec8:	b004      	add	sp, #16
 8005eca:	4770      	bx	lr
 8005ecc:	40040000 	.word	0x40040000
 8005ed0:	01000200 	.word	0x01000200
 8005ed4:	00e00300 	.word	0x00e00300
 8005ed8:	00600080 	.word	0x00600080
 8005edc:	004000e0 	.word	0x004000e0
 8005ee0:	a3200008 	.word	0xa3200008

08005ee4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f02:	f023 0303 	bic.w	r3, r3, #3
 8005f06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d107      	bne.n	8005f36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f32:	6053      	str	r3, [r2, #4]
 8005f34:	e00c      	b.n	8005f50 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d107      	bne.n	8005f4c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f42:	461a      	mov	r2, r3
 8005f44:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005f48:	6053      	str	r3, [r2, #4]
 8005f4a:	e001      	b.n	8005f50 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f7e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f8c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f8e:	2064      	movs	r0, #100	@ 0x64
 8005f90:	f7fb faac 	bl	80014ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fa0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005fa2:	200a      	movs	r0, #10
 8005fa4:	f7fb faa2 	bl	80014ec <HAL_Delay>

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005fd6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <USB_DriveVbus+0x44>
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d106      	bne.n	8005ff6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ff0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ff4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006000:	d109      	bne.n	8006016 <USB_DriveVbus+0x64>
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006010:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006014:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	0c5b      	lsrs	r3, r3, #17
 8006042:	f003 0303 	and.w	r3, r3, #3
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006052:	b480      	push	{r7}
 8006054:	b085      	sub	sp, #20
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	b29b      	uxth	r3, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	4608      	mov	r0, r1
 800607e:	4611      	mov	r1, r2
 8006080:	461a      	mov	r2, r3
 8006082:	4603      	mov	r3, r0
 8006084:	70fb      	strb	r3, [r7, #3]
 8006086:	460b      	mov	r3, r1
 8006088:	70bb      	strb	r3, [r7, #2]
 800608a:	4613      	mov	r3, r2
 800608c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4413      	add	r3, r2
 800609e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a2:	461a      	mov	r2, r3
 80060a4:	f04f 33ff 	mov.w	r3, #4294967295
 80060a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80060aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d87c      	bhi.n	80061ac <USB_HC_Init+0x138>
 80060b2:	a201      	add	r2, pc, #4	@ (adr r2, 80060b8 <USB_HC_Init+0x44>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	0800616f 	.word	0x0800616f
 80060c0:	080060c9 	.word	0x080060c9
 80060c4:	08006131 	.word	0x08006131
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d4:	461a      	mov	r2, r3
 80060d6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80060da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80060dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	da10      	bge.n	8006106 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	78fa      	ldrb	r2, [r7, #3]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006102:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006104:	e055      	b.n	80061b2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a6f      	ldr	r2, [pc, #444]	@ (80062c8 <USB_HC_Init+0x254>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d151      	bne.n	80061b2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	440a      	add	r2, r1
 8006124:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006128:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800612c:	60d3      	str	r3, [r2, #12]
      break;
 800612e:	e040      	b.n	80061b2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4413      	add	r3, r2
 8006138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800613c:	461a      	mov	r2, r3
 800613e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006142:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006144:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006148:	2b00      	cmp	r3, #0
 800614a:	da34      	bge.n	80061b6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	78fa      	ldrb	r2, [r7, #3]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	440a      	add	r2, r1
 8006162:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800616a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800616c:	e023      	b.n	80061b6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800617a:	461a      	mov	r2, r3
 800617c:	f240 2325 	movw	r3, #549	@ 0x225
 8006180:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006182:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006186:	2b00      	cmp	r3, #0
 8006188:	da17      	bge.n	80061ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061a4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80061a8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80061aa:	e006      	b.n	80061ba <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	77fb      	strb	r3, [r7, #31]
      break;
 80061b0:	e004      	b.n	80061bc <USB_HC_Init+0x148>
      break;
 80061b2:	bf00      	nop
 80061b4:	e002      	b.n	80061bc <USB_HC_Init+0x148>
      break;
 80061b6:	bf00      	nop
 80061b8:	e000      	b.n	80061bc <USB_HC_Init+0x148>
      break;
 80061ba:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c8:	461a      	mov	r2, r3
 80061ca:	2300      	movs	r3, #0
 80061cc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	2101      	movs	r1, #1
 80061fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006202:	6939      	ldr	r1, [r7, #16]
 8006204:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006208:	4313      	orrs	r3, r2
 800620a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006218:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800621c:	2b00      	cmp	r3, #0
 800621e:	da03      	bge.n	8006228 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006220:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	e001      	b.n	800622c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff fef9 	bl	8006024 <USB_GetHostSpeed>
 8006232:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006234:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006238:	2b02      	cmp	r3, #2
 800623a:	d106      	bne.n	800624a <USB_HC_Init+0x1d6>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d003      	beq.n	800624a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006242:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e001      	b.n	800624e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800624e:	787b      	ldrb	r3, [r7, #1]
 8006250:	059b      	lsls	r3, r3, #22
 8006252:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006256:	78bb      	ldrb	r3, [r7, #2]
 8006258:	02db      	lsls	r3, r3, #11
 800625a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800625e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006260:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006264:	049b      	lsls	r3, r3, #18
 8006266:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800626a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800626c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800626e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006272:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	431a      	orrs	r2, r3
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	440a      	add	r2, r1
 8006284:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006288:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800628c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800628e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006292:	2b03      	cmp	r3, #3
 8006294:	d003      	beq.n	800629e <USB_HC_Init+0x22a>
 8006296:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10f      	bne.n	80062be <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	78fa      	ldrb	r2, [r7, #3]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062bc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80062be:	7ffb      	ldrb	r3, [r7, #31]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40040000 	.word	0x40040000

080062cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08c      	sub	sp, #48	@ 0x30
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	785b      	ldrb	r3, [r3, #1]
 80062e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80062e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062e8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4a5d      	ldr	r2, [pc, #372]	@ (8006464 <USB_HC_StartXfer+0x198>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d12f      	bne.n	8006352 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d11c      	bne.n	8006332 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	7c9b      	ldrb	r3, [r3, #18]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <USB_HC_StartXfer+0x3c>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	7c9b      	ldrb	r3, [r3, #18]
 8006304:	2b02      	cmp	r3, #2
 8006306:	d124      	bne.n	8006352 <USB_HC_StartXfer+0x86>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	799b      	ldrb	r3, [r3, #6]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d120      	bne.n	8006352 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	4413      	add	r3, r2
 8006318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	6a3a      	ldr	r2, [r7, #32]
 8006324:	440a      	add	r2, r1
 8006326:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800632a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632e:	60d3      	str	r3, [r2, #12]
 8006330:	e00f      	b.n	8006352 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	791b      	ldrb	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <USB_HC_StartXfer+0x86>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	795b      	ldrb	r3, [r3, #5]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d107      	bne.n	8006352 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	4619      	mov	r1, r3
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fb6b 	bl	8006a24 <USB_DoPing>
        return HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	e232      	b.n	80067b8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	799b      	ldrb	r3, [r3, #6]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d158      	bne.n	800640c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800635a:	2301      	movs	r3, #1
 800635c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	78db      	ldrb	r3, [r3, #3]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d007      	beq.n	8006376 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006366:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	8a92      	ldrh	r2, [r2, #20]
 800636c:	fb03 f202 	mul.w	r2, r3, r2
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	61da      	str	r2, [r3, #28]
 8006374:	e07c      	b.n	8006470 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	7c9b      	ldrb	r3, [r3, #18]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d130      	bne.n	80063e0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	2bbc      	cmp	r3, #188	@ 0xbc
 8006384:	d918      	bls.n	80063b8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	8a9b      	ldrh	r3, [r3, #20]
 800638a:	461a      	mov	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	69da      	ldr	r2, [r3, #28]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d003      	beq.n	80063a8 <USB_HC_StartXfer+0xdc>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d103      	bne.n	80063b0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2202      	movs	r2, #2
 80063ac:	60da      	str	r2, [r3, #12]
 80063ae:	e05f      	b.n	8006470 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2201      	movs	r2, #1
 80063b4:	60da      	str	r2, [r3, #12]
 80063b6:	e05b      	b.n	8006470 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6a1a      	ldr	r2, [r3, #32]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d007      	beq.n	80063d8 <USB_HC_StartXfer+0x10c>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d003      	beq.n	80063d8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2204      	movs	r2, #4
 80063d4:	60da      	str	r2, [r3, #12]
 80063d6:	e04b      	b.n	8006470 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2203      	movs	r2, #3
 80063dc:	60da      	str	r2, [r3, #12]
 80063de:	e047      	b.n	8006470 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d10d      	bne.n	8006402 <USB_HC_StartXfer+0x136>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	8a92      	ldrh	r2, [r2, #20]
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d907      	bls.n	8006402 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	8a92      	ldrh	r2, [r2, #20]
 80063f8:	fb03 f202 	mul.w	r2, r3, r2
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	61da      	str	r2, [r3, #28]
 8006400:	e036      	b.n	8006470 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6a1a      	ldr	r2, [r3, #32]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	61da      	str	r2, [r3, #28]
 800640a:	e031      	b.n	8006470 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d018      	beq.n	8006446 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	8a92      	ldrh	r2, [r2, #20]
 800641c:	4413      	add	r3, r2
 800641e:	3b01      	subs	r3, #1
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	8a92      	ldrh	r2, [r2, #20]
 8006424:	fbb3 f3f2 	udiv	r3, r3, r2
 8006428:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800642a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800642c:	8b7b      	ldrh	r3, [r7, #26]
 800642e:	429a      	cmp	r2, r3
 8006430:	d90b      	bls.n	800644a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006432:	8b7b      	ldrh	r3, [r7, #26]
 8006434:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006436:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	8a92      	ldrh	r2, [r2, #20]
 800643c:	fb03 f202 	mul.w	r2, r3, r2
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	61da      	str	r2, [r3, #28]
 8006444:	e001      	b.n	800644a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006446:	2301      	movs	r3, #1
 8006448:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	78db      	ldrb	r3, [r3, #3]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006452:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	8a92      	ldrh	r2, [r2, #20]
 8006458:	fb03 f202 	mul.w	r2, r3, r2
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	61da      	str	r2, [r3, #28]
 8006460:	e006      	b.n	8006470 <USB_HC_StartXfer+0x1a4>
 8006462:	bf00      	nop
 8006464:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006478:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800647a:	04d9      	lsls	r1, r3, #19
 800647c:	4ba3      	ldr	r3, [pc, #652]	@ (800670c <USB_HC_StartXfer+0x440>)
 800647e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006480:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	7d9b      	ldrb	r3, [r3, #22]
 8006486:	075b      	lsls	r3, r3, #29
 8006488:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800648c:	69f9      	ldr	r1, [r7, #28]
 800648e:	0148      	lsls	r0, r1, #5
 8006490:	6a39      	ldr	r1, [r7, #32]
 8006492:	4401      	add	r1, r0
 8006494:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006498:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800649a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6999      	ldr	r1, [r3, #24]
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064b2:	460a      	mov	r2, r1
 80064b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf0c      	ite	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	2300      	movne	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80064ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	7e7b      	ldrb	r3, [r7, #25]
 80064fe:	075b      	lsls	r3, r3, #29
 8006500:	69f9      	ldr	r1, [r7, #28]
 8006502:	0148      	lsls	r0, r1, #5
 8006504:	6a39      	ldr	r1, [r7, #32]
 8006506:	4401      	add	r1, r0
 8006508:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800650c:	4313      	orrs	r3, r2
 800650e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	799b      	ldrb	r3, [r3, #6]
 8006514:	2b01      	cmp	r3, #1
 8006516:	f040 80c3 	bne.w	80066a0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	7c5b      	ldrb	r3, [r3, #17]
 800651e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006524:	4313      	orrs	r3, r2
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	440a      	add	r2, r1
 800652e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006532:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006536:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	69fa      	ldr	r2, [r7, #28]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	6a3a      	ldr	r2, [r7, #32]
 800654c:	440a      	add	r2, r1
 800654e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006552:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006556:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	79db      	ldrb	r3, [r3, #7]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d123      	bne.n	80065a8 <USB_HC_StartXfer+0x2dc>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	78db      	ldrb	r3, [r3, #3]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d11f      	bne.n	80065a8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	6a3a      	ldr	r2, [r7, #32]
 800657c:	440a      	add	r2, r1
 800657e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006586:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	4413      	add	r3, r2
 8006590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	6a3a      	ldr	r2, [r7, #32]
 800659c:	440a      	add	r2, r1
 800659e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065a6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	7c9b      	ldrb	r3, [r3, #18]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d003      	beq.n	80065b8 <USB_HC_StartXfer+0x2ec>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	7c9b      	ldrb	r3, [r3, #18]
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d117      	bne.n	80065e8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d113      	bne.n	80065e8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	78db      	ldrb	r3, [r3, #3]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d10f      	bne.n	80065e8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	6a3a      	ldr	r2, [r7, #32]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	7c9b      	ldrb	r3, [r3, #18]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d162      	bne.n	80066b6 <USB_HC_StartXfer+0x3ea>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	78db      	ldrb	r3, [r3, #3]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d15e      	bne.n	80066b6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d858      	bhi.n	80066b4 <USB_HC_StartXfer+0x3e8>
 8006602:	a201      	add	r2, pc, #4	@ (adr r2, 8006608 <USB_HC_StartXfer+0x33c>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	08006619 	.word	0x08006619
 800660c:	0800663b 	.word	0x0800663b
 8006610:	0800665d 	.word	0x0800665d
 8006614:	0800667f 	.word	0x0800667f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	4413      	add	r3, r2
 8006620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	440a      	add	r2, r1
 800662e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006636:	6053      	str	r3, [r2, #4]
          break;
 8006638:	e03d      	b.n	80066b6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	4413      	add	r3, r2
 8006642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	6a3a      	ldr	r2, [r7, #32]
 800664e:	440a      	add	r2, r1
 8006650:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006654:	f043 030e 	orr.w	r3, r3, #14
 8006658:	6053      	str	r3, [r2, #4]
          break;
 800665a:	e02c      	b.n	80066b6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	4413      	add	r3, r2
 8006664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	6a3a      	ldr	r2, [r7, #32]
 8006670:	440a      	add	r2, r1
 8006672:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800667a:	6053      	str	r3, [r2, #4]
          break;
 800667c:	e01b      	b.n	80066b6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	4413      	add	r3, r2
 8006686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	6a3a      	ldr	r2, [r7, #32]
 8006692:	440a      	add	r2, r1
 8006694:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800669c:	6053      	str	r3, [r2, #4]
          break;
 800669e:	e00a      	b.n	80066b6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ac:	461a      	mov	r2, r3
 80066ae:	2300      	movs	r3, #0
 80066b0:	6053      	str	r3, [r2, #4]
 80066b2:	e000      	b.n	80066b6 <USB_HC_StartXfer+0x3ea>
          break;
 80066b4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066cc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	78db      	ldrb	r3, [r3, #3]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e003      	b.n	80066e8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066e6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066ee:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066fc:	461a      	mov	r2, r3
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	e055      	b.n	80067b8 <USB_HC_StartXfer+0x4ec>
 800670c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	78db      	ldrb	r3, [r3, #3]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d14e      	bne.n	80067b6 <USB_HC_StartXfer+0x4ea>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d04a      	beq.n	80067b6 <USB_HC_StartXfer+0x4ea>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	79db      	ldrb	r3, [r3, #7]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d146      	bne.n	80067b6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	7c9b      	ldrb	r3, [r3, #18]
 800672c:	2b03      	cmp	r3, #3
 800672e:	d831      	bhi.n	8006794 <USB_HC_StartXfer+0x4c8>
 8006730:	a201      	add	r2, pc, #4	@ (adr r2, 8006738 <USB_HC_StartXfer+0x46c>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	08006749 	.word	0x08006749
 800673c:	0800676d 	.word	0x0800676d
 8006740:	08006749 	.word	0x08006749
 8006744:	0800676d 	.word	0x0800676d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	3303      	adds	r3, #3
 800674e:	089b      	lsrs	r3, r3, #2
 8006750:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006752:	8afa      	ldrh	r2, [r7, #22]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006758:	b29b      	uxth	r3, r3
 800675a:	429a      	cmp	r2, r3
 800675c:	d91c      	bls.n	8006798 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	619a      	str	r2, [r3, #24]
        }
        break;
 800676a:	e015      	b.n	8006798 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	3303      	adds	r3, #3
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006776:	8afa      	ldrh	r2, [r7, #22]
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	b29b      	uxth	r3, r3
 8006782:	429a      	cmp	r2, r3
 8006784:	d90a      	bls.n	800679c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	619a      	str	r2, [r3, #24]
        }
        break;
 8006792:	e003      	b.n	800679c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006794:	bf00      	nop
 8006796:	e002      	b.n	800679e <USB_HC_StartXfer+0x4d2>
        break;
 8006798:	bf00      	nop
 800679a:	e000      	b.n	800679e <USB_HC_StartXfer+0x4d2>
        break;
 800679c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6999      	ldr	r1, [r3, #24]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	785a      	ldrb	r2, [r3, #1]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2000      	movs	r0, #0
 80067ae:	9000      	str	r0, [sp, #0]
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff f9c9 	bl	8005b48 <USB_WritePacket>
  }

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3728      	adds	r7, #40	@ 0x28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	b29b      	uxth	r3, r3
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b089      	sub	sp, #36	@ 0x24
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	0c9b      	lsrs	r3, r3, #18
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	0fdb      	lsrs	r3, r3, #31
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	0fdb      	lsrs	r3, r3, #31
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b20      	cmp	r3, #32
 8006846:	d10d      	bne.n	8006864 <USB_HC_Halt+0x82>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <USB_HC_Halt+0x82>
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d002      	beq.n	8006860 <USB_HC_Halt+0x7e>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b03      	cmp	r3, #3
 800685e:	d101      	bne.n	8006864 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	e0d8      	b.n	8006a16 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <USB_HC_Halt+0x8e>
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d173      	bne.n	8006958 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	4413      	add	r3, r2
 8006878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	440a      	add	r2, r1
 8006886:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800688a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800688e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d14a      	bne.n	8006932 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d133      	bne.n	8006910 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068c6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068e6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068f4:	d82e      	bhi.n	8006954 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006908:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800690c:	d0ec      	beq.n	80068e8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800690e:	e081      	b.n	8006a14 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	440a      	add	r2, r1
 8006926:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800692a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800692e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006930:	e070      	b.n	8006a14 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	440a      	add	r2, r1
 8006948:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800694c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006950:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006952:	e05f      	b.n	8006a14 <USB_HC_Halt+0x232>
            break;
 8006954:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006956:	e05d      	b.n	8006a14 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	0151      	lsls	r1, r2, #5
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	440a      	add	r2, r1
 800696e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006972:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006976:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d133      	bne.n	80069f0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	4413      	add	r3, r2
 8006990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	0151      	lsls	r1, r2, #5
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	440a      	add	r2, r1
 800699e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069c6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	3301      	adds	r3, #1
 80069cc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069d4:	d81d      	bhi.n	8006a12 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069ec:	d0ec      	beq.n	80069c8 <USB_HC_Halt+0x1e6>
 80069ee:	e011      	b.n	8006a14 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	0151      	lsls	r1, r2, #5
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	440a      	add	r2, r1
 8006a06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	e000      	b.n	8006a14 <USB_HC_Halt+0x232>
          break;
 8006a12:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3724      	adds	r7, #36	@ 0x24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	04da      	lsls	r2, r3, #19
 8006a40:	4b15      	ldr	r3, [pc, #84]	@ (8006a98 <USB_DoPing+0x74>)
 8006a42:	4013      	ands	r3, r2
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	0151      	lsls	r1, r2, #5
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	440a      	add	r2, r1
 8006a4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a54:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a6c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a74:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a82:	461a      	mov	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	1ff80000 	.word	0x1ff80000

08006a9c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7fe ff8c 	bl	80059ce <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ab6:	2110      	movs	r1, #16
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7fe ffe5 	bl	8005a88 <USB_FlushTxFifo>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff f80f 	bl	8005aec <USB_FlushRxFifo>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	e01f      	b.n	8006b1e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006af4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006afc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b12:	461a      	mov	r2, r3
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b0f      	cmp	r3, #15
 8006b22:	d9dc      	bls.n	8006ade <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b24:	2300      	movs	r3, #0
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	e034      	b.n	8006b94 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b40:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b50:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b5e:	461a      	mov	r2, r3
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b70:	d80c      	bhi.n	8006b8c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b88:	d0ec      	beq.n	8006b64 <USB_StopHost+0xc8>
 8006b8a:	e000      	b.n	8006b8e <USB_StopHost+0xf2>
        break;
 8006b8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	3301      	adds	r3, #1
 8006b92:	61bb      	str	r3, [r7, #24]
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d9c7      	bls.n	8006b2a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fe fefb 	bl	80059ac <USB_EnableGlobalInt>

  return ret;
 8006bb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006bc4:	4904      	ldr	r1, [pc, #16]	@ (8006bd8 <MX_FATFS_Init+0x18>)
 8006bc6:	4805      	ldr	r0, [pc, #20]	@ (8006bdc <MX_FATFS_Init+0x1c>)
 8006bc8:	f007 ff9e 	bl	800eb08 <FATFS_LinkDriver>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	461a      	mov	r2, r3
 8006bd0:	4b03      	ldr	r3, [pc, #12]	@ (8006be0 <MX_FATFS_Init+0x20>)
 8006bd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006bd4:	bf00      	nop
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	200015c4 	.word	0x200015c4
 8006bdc:	0800f978 	.word	0x0800f978
 8006be0:	200015c0 	.word	0x200015c0

08006be4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	4603      	mov	r3, r0
 8006c04:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4808      	ldr	r0, [pc, #32]	@ (8006c30 <USBH_status+0x34>)
 8006c10:	f000 fe79 	bl	8007906 <USBH_MSC_UnitIsReady>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <USBH_status+0x24>
  {
    res = RES_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
 8006c1e:	e001      	b.n	8006c24 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20001a5c 	.word	0x20001a5c

08006c34 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b094      	sub	sp, #80	@ 0x50
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006c4a:	7bf9      	ldrb	r1, [r7, #15]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	4813      	ldr	r0, [pc, #76]	@ (8006ca4 <USBH_read+0x70>)
 8006c56:	f000 feaa 	bl	80079ae <USBH_MSC_Read>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d103      	bne.n	8006c68 <USBH_read+0x34>
  {
    res = RES_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006c66:	e017      	b.n	8006c98 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006c68:	f107 0210 	add.w	r2, r7, #16
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	480c      	ldr	r0, [pc, #48]	@ (8006ca4 <USBH_read+0x70>)
 8006c72:	f000 fe73 	bl	800795c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006c76:	7f7b      	ldrb	r3, [r7, #29]
 8006c78:	2b3a      	cmp	r3, #58	@ 0x3a
 8006c7a:	d005      	beq.n	8006c88 <USBH_read+0x54>
 8006c7c:	2b3a      	cmp	r3, #58	@ 0x3a
 8006c7e:	dc07      	bgt.n	8006c90 <USBH_read+0x5c>
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d001      	beq.n	8006c88 <USBH_read+0x54>
 8006c84:	2b28      	cmp	r3, #40	@ 0x28
 8006c86:	d103      	bne.n	8006c90 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006c8e:	e003      	b.n	8006c98 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006c96:	bf00      	nop
    }
  }

  return res;
 8006c98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3748      	adds	r7, #72	@ 0x48
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20001a5c 	.word	0x20001a5c

08006ca8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b094      	sub	sp, #80	@ 0x50
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006cbe:	7bf9      	ldrb	r1, [r7, #15]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	4817      	ldr	r0, [pc, #92]	@ (8006d28 <USBH_write+0x80>)
 8006cca:	f000 fed0 	bl	8007a6e <USBH_MSC_Write>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d103      	bne.n	8006cdc <USBH_write+0x34>
  {
    res = RES_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006cda:	e01f      	b.n	8006d1c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006cdc:	f107 0210 	add.w	r2, r7, #16
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4810      	ldr	r0, [pc, #64]	@ (8006d28 <USBH_write+0x80>)
 8006ce6:	f000 fe39 	bl	800795c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006cea:	7f7b      	ldrb	r3, [r7, #29]
 8006cec:	2b3a      	cmp	r3, #58	@ 0x3a
 8006cee:	d00d      	beq.n	8006d0c <USBH_write+0x64>
 8006cf0:	2b3a      	cmp	r3, #58	@ 0x3a
 8006cf2:	dc0f      	bgt.n	8006d14 <USBH_write+0x6c>
 8006cf4:	2b28      	cmp	r3, #40	@ 0x28
 8006cf6:	d009      	beq.n	8006d0c <USBH_write+0x64>
 8006cf8:	2b28      	cmp	r3, #40	@ 0x28
 8006cfa:	dc0b      	bgt.n	8006d14 <USBH_write+0x6c>
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d005      	beq.n	8006d0c <USBH_write+0x64>
 8006d00:	2b27      	cmp	r3, #39	@ 0x27
 8006d02:	d107      	bne.n	8006d14 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006d04:	2302      	movs	r3, #2
 8006d06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006d0a:	e007      	b.n	8006d1c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006d12:	e003      	b.n	8006d1c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006d1a:	bf00      	nop
    }
  }

  return res;
 8006d1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3748      	adds	r7, #72	@ 0x48
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20001a5c 	.word	0x20001a5c

08006d2c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b090      	sub	sp, #64	@ 0x40
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	603a      	str	r2, [r7, #0]
 8006d36:	71fb      	strb	r3, [r7, #7]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006d42:	79bb      	ldrb	r3, [r7, #6]
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d852      	bhi.n	8006dee <USBH_ioctl+0xc2>
 8006d48:	a201      	add	r2, pc, #4	@ (adr r2, 8006d50 <USBH_ioctl+0x24>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006d69 	.word	0x08006d69
 8006d58:	08006d93 	.word	0x08006d93
 8006d5c:	08006dbf 	.word	0x08006dbf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006d66:	e045      	b.n	8006df4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006d68:	f107 0208 	add.w	r2, r7, #8
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4823      	ldr	r0, [pc, #140]	@ (8006e00 <USBH_ioctl+0xd4>)
 8006d72:	f000 fdf3 	bl	800795c <USBH_MSC_GetLUNInfo>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d106      	bne.n	8006d8a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006d88:	e034      	b.n	8006df4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006d90:	e030      	b.n	8006df4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006d92:	f107 0208 	add.w	r2, r7, #8
 8006d96:	79fb      	ldrb	r3, [r7, #7]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4819      	ldr	r0, [pc, #100]	@ (8006e00 <USBH_ioctl+0xd4>)
 8006d9c:	f000 fdde 	bl	800795c <USBH_MSC_GetLUNInfo>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d107      	bne.n	8006db6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006da6:	8a3b      	ldrh	r3, [r7, #16]
 8006da8:	461a      	mov	r2, r3
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006db4:	e01e      	b.n	8006df4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006dbc:	e01a      	b.n	8006df4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006dbe:	f107 0208 	add.w	r2, r7, #8
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	480e      	ldr	r0, [pc, #56]	@ (8006e00 <USBH_ioctl+0xd4>)
 8006dc8:	f000 fdc8 	bl	800795c <USBH_MSC_GetLUNInfo>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006dd2:	8a3b      	ldrh	r3, [r7, #16]
 8006dd4:	0a5b      	lsrs	r3, r3, #9
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	461a      	mov	r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006de4:	e006      	b.n	8006df4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006dec:	e002      	b.n	8006df4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006dee:	2304      	movs	r3, #4
 8006df0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8006df4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3740      	adds	r7, #64	@ 0x40
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20001a5c 	.word	0x20001a5c

08006e04 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e04:	b590      	push	{r4, r7, lr}
 8006e06:	b089      	sub	sp, #36	@ 0x24
 8006e08:	af04      	add	r7, sp, #16
 8006e0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e12:	7919      	ldrb	r1, [r3, #4]
 8006e14:	2350      	movs	r3, #80	@ 0x50
 8006e16:	2206      	movs	r2, #6
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fcd7 	bl	80087cc <USBH_FindInterface>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	2bff      	cmp	r3, #255	@ 0xff
 8006e26:	d002      	beq.n	8006e2e <USBH_MSC_InterfaceInit+0x2a>
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d901      	bls.n	8006e32 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e106      	b.n	8007040 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 fcac 	bl	8008794 <USBH_SelectInterface>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006e46:	2302      	movs	r3, #2
 8006e48:	e0fa      	b.n	8007040 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006e50:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8006e54:	f008 fa3e 	bl	800f2d4 <malloc>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e0e7      	b.n	8007040 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006e70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006e74:	2100      	movs	r1, #0
 8006e76:	68b8      	ldr	r0, [r7, #8]
 8006e78:	f008 faea 	bl	800f450 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	211a      	movs	r1, #26
 8006e82:	fb01 f303 	mul.w	r3, r1, r3
 8006e86:	4413      	add	r3, r2
 8006e88:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b25b      	sxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	da16      	bge.n	8006ec2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	211a      	movs	r1, #26
 8006e9a:	fb01 f303 	mul.w	r3, r1, r3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	211a      	movs	r1, #26
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006eba:	881a      	ldrh	r2, [r3, #0]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	815a      	strh	r2, [r3, #10]
 8006ec0:	e015      	b.n	8006eee <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	211a      	movs	r1, #26
 8006ec8:	fb01 f303 	mul.w	r3, r1, r3
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ed2:	781a      	ldrb	r2, [r3, #0]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	211a      	movs	r1, #26
 8006ede:	fb01 f303 	mul.w	r3, r1, r3
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006ee8:	881a      	ldrh	r2, [r3, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	211a      	movs	r1, #26
 8006ef4:	fb01 f303 	mul.w	r3, r1, r3
 8006ef8:	4413      	add	r3, r2
 8006efa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	b25b      	sxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da16      	bge.n	8006f34 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	211a      	movs	r1, #26
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	4413      	add	r3, r2
 8006f12:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006f16:	781a      	ldrb	r2, [r3, #0]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	211a      	movs	r1, #26
 8006f22:	fb01 f303 	mul.w	r3, r1, r3
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006f2c:	881a      	ldrh	r2, [r3, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	815a      	strh	r2, [r3, #10]
 8006f32:	e015      	b.n	8006f60 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	211a      	movs	r1, #26
 8006f3a:	fb01 f303 	mul.w	r3, r1, r3
 8006f3e:	4413      	add	r3, r2
 8006f40:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006f44:	781a      	ldrb	r2, [r3, #0]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	211a      	movs	r1, #26
 8006f50:	fb01 f303 	mul.w	r3, r1, r3
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006f5a:	881a      	ldrh	r2, [r3, #0]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2200      	movs	r2, #0
 8006f64:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	799b      	ldrb	r3, [r3, #6]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f002 ffb4 	bl	8009ee6 <USBH_AllocPipe>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	461a      	mov	r2, r3
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	79db      	ldrb	r3, [r3, #7]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f002 ffaa 	bl	8009ee6 <USBH_AllocPipe>
 8006f92:	4603      	mov	r3, r0
 8006f94:	461a      	mov	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fe02 	bl	8007ba4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	799b      	ldrb	r3, [r3, #6]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01e      	beq.n	8006fe6 <USBH_MSC_InterfaceInit+0x1e2>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	891b      	ldrh	r3, [r3, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01a      	beq.n	8006fe6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	7959      	ldrb	r1, [r3, #5]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	7998      	ldrb	r0, [r3, #6]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	8912      	ldrh	r2, [r2, #8]
 8006fc8:	9202      	str	r2, [sp, #8]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	9201      	str	r2, [sp, #4]
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	4623      	mov	r3, r4
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f002 ff57 	bl	8009e88 <USBH_OpenPipe>
 8006fda:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	79db      	ldrb	r3, [r3, #7]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d02c      	beq.n	800703e <USBH_MSC_InterfaceInit+0x23a>
 8006fe4:	e001      	b.n	8006fea <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e02a      	b.n	8007040 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	895b      	ldrh	r3, [r3, #10]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d025      	beq.n	800703e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	7919      	ldrb	r1, [r3, #4]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	79d8      	ldrb	r0, [r3, #7]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	8952      	ldrh	r2, [r2, #10]
 800700a:	9202      	str	r2, [sp, #8]
 800700c:	2202      	movs	r2, #2
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	4623      	mov	r3, r4
 8007014:	4602      	mov	r2, r0
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f002 ff36 	bl	8009e88 <USBH_OpenPipe>
 800701c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	791b      	ldrb	r3, [r3, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f008 f8b7 	bl	800f19a <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	795b      	ldrb	r3, [r3, #5]
 8007030:	2200      	movs	r2, #0
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f008 f8b0 	bl	800f19a <USBH_LL_SetToggle>

  return USBH_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	e000      	b.n	8007040 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800703e:	2303      	movs	r3, #3
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	bd90      	pop	{r4, r7, pc}

08007048 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	795b      	ldrb	r3, [r3, #5]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00e      	beq.n	8007080 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	795b      	ldrb	r3, [r3, #5]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f002 ff2c 	bl	8009ec6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	795b      	ldrb	r3, [r3, #5]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f002 ff57 	bl	8009f28 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	791b      	ldrb	r3, [r3, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00e      	beq.n	80070a6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	791b      	ldrb	r3, [r3, #4]
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f002 ff19 	bl	8009ec6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	791b      	ldrb	r3, [r3, #4]
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f002 ff44 	bl	8009f28 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00b      	beq.n	80070ca <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f008 f912 	bl	800f2e4 <free>
    phost->pActiveClass->pData = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070c6:	2200      	movs	r2, #0
 80070c8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070e6:	2301      	movs	r3, #1
 80070e8:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	7b9b      	ldrb	r3, [r3, #14]
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d041      	beq.n	8007176 <USBH_MSC_ClassRequest+0xa2>
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	dc4b      	bgt.n	800718e <USBH_MSC_ClassRequest+0xba>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <USBH_MSC_ClassRequest+0x2a>
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d147      	bne.n	800718e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fd30 	bl	8007b68 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	2b03      	cmp	r3, #3
 8007110:	d104      	bne.n	800711c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2200      	movs	r2, #0
 8007116:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d137      	bne.n	8007192 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d804      	bhi.n	8007134 <USBH_MSC_ClassRequest+0x60>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	3301      	adds	r3, #1
 8007130:	b2da      	uxtb	r2, r3
 8007132:	e000      	b.n	8007136 <USBH_MSC_ClassRequest+0x62>
 8007134:	2202      	movs	r2, #2
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 800713a:	2300      	movs	r3, #0
 800713c:	73bb      	strb	r3, [r7, #14]
 800713e:	e014      	b.n	800716a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	2134      	movs	r1, #52	@ 0x34
 8007146:	fb01 f303 	mul.w	r3, r1, r3
 800714a:	4413      	add	r3, r2
 800714c:	3392      	adds	r3, #146	@ 0x92
 800714e:	2202      	movs	r2, #2
 8007150:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	2134      	movs	r1, #52	@ 0x34
 8007158:	fb01 f303 	mul.w	r3, r1, r3
 800715c:	4413      	add	r3, r2
 800715e:	33c1      	adds	r3, #193	@ 0xc1
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	3301      	adds	r3, #1
 8007168:	73bb      	strb	r3, [r7, #14]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	7bba      	ldrb	r2, [r7, #14]
 8007170:	429a      	cmp	r2, r3
 8007172:	d3e5      	bcc.n	8007140 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8007174:	e00d      	b.n	8007192 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007176:	2100      	movs	r1, #0
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f002 f8ff 	bl	800937c <USBH_ClrFeature>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d108      	bne.n	8007196 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	7bda      	ldrb	r2, [r3, #15]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800718c:	e003      	b.n	8007196 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800718e:	bf00      	nop
 8007190:	e002      	b.n	8007198 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007192:	bf00      	nop
 8007194:	e000      	b.n	8007198 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007196:	bf00      	nop
  }

  return status;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80071b6:	2301      	movs	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80071be:	2301      	movs	r3, #1
 80071c0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	7b1b      	ldrb	r3, [r3, #12]
 80071c6:	2b0a      	cmp	r3, #10
 80071c8:	f000 8280 	beq.w	80076cc <USBH_MSC_Process+0x528>
 80071cc:	2b0a      	cmp	r3, #10
 80071ce:	f300 82b8 	bgt.w	8007742 <USBH_MSC_Process+0x59e>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <USBH_MSC_Process+0x3a>
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	f000 82b0 	beq.w	800773c <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80071dc:	e2b1      	b.n	8007742 <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	7812      	ldrb	r2, [r2, #0]
 80071e8:	4293      	cmp	r3, r2
 80071ea:	f080 825d 	bcs.w	80076a8 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80071f4:	4619      	mov	r1, r3
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	2334      	movs	r3, #52	@ 0x34
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	4413      	add	r3, r2
 8007200:	3391      	adds	r3, #145	@ 0x91
 8007202:	2201      	movs	r2, #1
 8007204:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800720c:	4619      	mov	r1, r3
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	2334      	movs	r3, #52	@ 0x34
 8007212:	fb01 f303 	mul.w	r3, r1, r3
 8007216:	4413      	add	r3, r2
 8007218:	3390      	adds	r3, #144	@ 0x90
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b08      	cmp	r3, #8
 800721e:	f200 824b 	bhi.w	80076b8 <USBH_MSC_Process+0x514>
 8007222:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <USBH_MSC_Process+0x84>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	0800724d 	.word	0x0800724d
 800722c:	080076b9 	.word	0x080076b9
 8007230:	08007317 	.word	0x08007317
 8007234:	0800749d 	.word	0x0800749d
 8007238:	08007273 	.word	0x08007273
 800723c:	08007569 	.word	0x08007569
 8007240:	080076b9 	.word	0x080076b9
 8007244:	080076b9 	.word	0x080076b9
 8007248:	08007697 	.word	0x08007697
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007252:	4619      	mov	r1, r3
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	2334      	movs	r3, #52	@ 0x34
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	4413      	add	r3, r2
 800725e:	3390      	adds	r3, #144	@ 0x90
 8007260:	2204      	movs	r2, #4
 8007262:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 8007270:	e22b      	b.n	80076ca <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007278:	b2d9      	uxtb	r1, r3
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007280:	461a      	mov	r2, r3
 8007282:	2334      	movs	r3, #52	@ 0x34
 8007284:	fb02 f303 	mul.w	r3, r2, r3
 8007288:	3398      	adds	r3, #152	@ 0x98
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4413      	add	r3, r2
 800728e:	3307      	adds	r3, #7
 8007290:	461a      	mov	r2, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 ffa3 	bl	80081de <USBH_MSC_SCSI_Inquiry>
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10c      	bne.n	80072bc <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80072a8:	4619      	mov	r1, r3
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	2334      	movs	r3, #52	@ 0x34
 80072ae:	fb01 f303 	mul.w	r3, r1, r3
 80072b2:	4413      	add	r3, r2
 80072b4:	3390      	adds	r3, #144	@ 0x90
 80072b6:	2202      	movs	r2, #2
 80072b8:	701a      	strb	r2, [r3, #0]
            break;
 80072ba:	e1ff      	b.n	80076bc <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d10c      	bne.n	80072dc <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80072c8:	4619      	mov	r1, r3
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	2334      	movs	r3, #52	@ 0x34
 80072ce:	fb01 f303 	mul.w	r3, r1, r3
 80072d2:	4413      	add	r3, r2
 80072d4:	3390      	adds	r3, #144	@ 0x90
 80072d6:	2205      	movs	r2, #5
 80072d8:	701a      	strb	r2, [r3, #0]
            break;
 80072da:	e1ef      	b.n	80076bc <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b04      	cmp	r3, #4
 80072e0:	f040 81ec 	bne.w	80076bc <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80072ea:	4619      	mov	r1, r3
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	2334      	movs	r3, #52	@ 0x34
 80072f0:	fb01 f303 	mul.w	r3, r1, r3
 80072f4:	4413      	add	r3, r2
 80072f6:	3390      	adds	r3, #144	@ 0x90
 80072f8:	2208      	movs	r2, #8
 80072fa:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007302:	4619      	mov	r1, r3
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	2334      	movs	r3, #52	@ 0x34
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	4413      	add	r3, r2
 800730e:	3391      	adds	r3, #145	@ 0x91
 8007310:	2202      	movs	r2, #2
 8007312:	701a      	strb	r2, [r3, #0]
            break;
 8007314:	e1d2      	b.n	80076bc <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800731c:	b2db      	uxtb	r3, r3
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fe9f 	bl	8008064 <USBH_MSC_SCSI_TestUnitReady>
 8007326:	4603      	mov	r3, r0
 8007328:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d14a      	bne.n	80073c6 <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007336:	4619      	mov	r1, r3
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	2334      	movs	r3, #52	@ 0x34
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	4413      	add	r3, r2
 8007342:	3392      	adds	r3, #146	@ 0x92
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00c      	beq.n	8007364 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007350:	4619      	mov	r1, r3
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	2334      	movs	r3, #52	@ 0x34
 8007356:	fb01 f303 	mul.w	r3, r1, r3
 800735a:	4413      	add	r3, r2
 800735c:	33c1      	adds	r3, #193	@ 0xc1
 800735e:	2201      	movs	r2, #1
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	e00b      	b.n	800737c <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800736a:	4619      	mov	r1, r3
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	2334      	movs	r3, #52	@ 0x34
 8007370:	fb01 f303 	mul.w	r3, r1, r3
 8007374:	4413      	add	r3, r2
 8007376:	33c1      	adds	r3, #193	@ 0xc1
 8007378:	2200      	movs	r2, #0
 800737a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007382:	4619      	mov	r1, r3
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	2334      	movs	r3, #52	@ 0x34
 8007388:	fb01 f303 	mul.w	r3, r1, r3
 800738c:	4413      	add	r3, r2
 800738e:	3390      	adds	r3, #144	@ 0x90
 8007390:	2203      	movs	r2, #3
 8007392:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800739a:	4619      	mov	r1, r3
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	2334      	movs	r3, #52	@ 0x34
 80073a0:	fb01 f303 	mul.w	r3, r1, r3
 80073a4:	4413      	add	r3, r2
 80073a6:	3391      	adds	r3, #145	@ 0x91
 80073a8:	2200      	movs	r2, #0
 80073aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80073b2:	4619      	mov	r1, r3
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	2334      	movs	r3, #52	@ 0x34
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	4413      	add	r3, r2
 80073be:	3392      	adds	r3, #146	@ 0x92
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
            break;
 80073c4:	e17c      	b.n	80076c0 <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d14a      	bne.n	8007462 <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80073d2:	4619      	mov	r1, r3
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	2334      	movs	r3, #52	@ 0x34
 80073d8:	fb01 f303 	mul.w	r3, r1, r3
 80073dc:	4413      	add	r3, r2
 80073de:	3392      	adds	r3, #146	@ 0x92
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d00c      	beq.n	8007400 <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80073ec:	4619      	mov	r1, r3
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	2334      	movs	r3, #52	@ 0x34
 80073f2:	fb01 f303 	mul.w	r3, r1, r3
 80073f6:	4413      	add	r3, r2
 80073f8:	33c1      	adds	r3, #193	@ 0xc1
 80073fa:	2201      	movs	r2, #1
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e00b      	b.n	8007418 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007406:	4619      	mov	r1, r3
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	2334      	movs	r3, #52	@ 0x34
 800740c:	fb01 f303 	mul.w	r3, r1, r3
 8007410:	4413      	add	r3, r2
 8007412:	33c1      	adds	r3, #193	@ 0xc1
 8007414:	2200      	movs	r2, #0
 8007416:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800741e:	4619      	mov	r1, r3
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	2334      	movs	r3, #52	@ 0x34
 8007424:	fb01 f303 	mul.w	r3, r1, r3
 8007428:	4413      	add	r3, r2
 800742a:	3390      	adds	r3, #144	@ 0x90
 800742c:	2205      	movs	r2, #5
 800742e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007436:	4619      	mov	r1, r3
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	2334      	movs	r3, #52	@ 0x34
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	4413      	add	r3, r2
 8007442:	3391      	adds	r3, #145	@ 0x91
 8007444:	2201      	movs	r2, #1
 8007446:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800744e:	4619      	mov	r1, r3
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	2334      	movs	r3, #52	@ 0x34
 8007454:	fb01 f303 	mul.w	r3, r1, r3
 8007458:	4413      	add	r3, r2
 800745a:	3392      	adds	r3, #146	@ 0x92
 800745c:	2202      	movs	r2, #2
 800745e:	701a      	strb	r2, [r3, #0]
            break;
 8007460:	e12e      	b.n	80076c0 <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	2b04      	cmp	r3, #4
 8007466:	f040 812b 	bne.w	80076c0 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007470:	4619      	mov	r1, r3
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	2334      	movs	r3, #52	@ 0x34
 8007476:	fb01 f303 	mul.w	r3, r1, r3
 800747a:	4413      	add	r3, r2
 800747c:	3390      	adds	r3, #144	@ 0x90
 800747e:	2208      	movs	r2, #8
 8007480:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007488:	4619      	mov	r1, r3
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	2334      	movs	r3, #52	@ 0x34
 800748e:	fb01 f303 	mul.w	r3, r1, r3
 8007492:	4413      	add	r3, r2
 8007494:	3391      	adds	r3, #145	@ 0x91
 8007496:	2202      	movs	r2, #2
 8007498:	701a      	strb	r2, [r3, #0]
            break;
 800749a:	e111      	b.n	80076c0 <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80074a2:	b2d9      	uxtb	r1, r3
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80074aa:	461a      	mov	r2, r3
 80074ac:	2334      	movs	r3, #52	@ 0x34
 80074ae:	fb02 f303 	mul.w	r3, r2, r3
 80074b2:	3390      	adds	r3, #144	@ 0x90
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	4413      	add	r3, r2
 80074b8:	3304      	adds	r3, #4
 80074ba:	461a      	mov	r2, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fe14 	bl	80080ea <USBH_MSC_SCSI_ReadCapacity>
 80074c2:	4603      	mov	r3, r0
 80074c4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d120      	bne.n	800750e <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80074d2:	4619      	mov	r1, r3
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	2334      	movs	r3, #52	@ 0x34
 80074d8:	fb01 f303 	mul.w	r3, r1, r3
 80074dc:	4413      	add	r3, r2
 80074de:	3390      	adds	r3, #144	@ 0x90
 80074e0:	2201      	movs	r2, #1
 80074e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80074ea:	4619      	mov	r1, r3
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	2334      	movs	r3, #52	@ 0x34
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
 80074f4:	4413      	add	r3, r2
 80074f6:	3391      	adds	r3, #145	@ 0x91
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007502:	3301      	adds	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800750c:	e0da      	b.n	80076c4 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d10c      	bne.n	800752e <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800751a:	4619      	mov	r1, r3
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	2334      	movs	r3, #52	@ 0x34
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	4413      	add	r3, r2
 8007526:	3390      	adds	r3, #144	@ 0x90
 8007528:	2205      	movs	r2, #5
 800752a:	701a      	strb	r2, [r3, #0]
            break;
 800752c:	e0ca      	b.n	80076c4 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	2b04      	cmp	r3, #4
 8007532:	f040 80c7 	bne.w	80076c4 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800753c:	4619      	mov	r1, r3
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	2334      	movs	r3, #52	@ 0x34
 8007542:	fb01 f303 	mul.w	r3, r1, r3
 8007546:	4413      	add	r3, r2
 8007548:	3390      	adds	r3, #144	@ 0x90
 800754a:	2208      	movs	r2, #8
 800754c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007554:	4619      	mov	r1, r3
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	2334      	movs	r3, #52	@ 0x34
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	4413      	add	r3, r2
 8007560:	3391      	adds	r3, #145	@ 0x91
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
            break;
 8007566:	e0ad      	b.n	80076c4 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800756e:	b2d9      	uxtb	r1, r3
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007576:	461a      	mov	r2, r3
 8007578:	2334      	movs	r3, #52	@ 0x34
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	3398      	adds	r3, #152	@ 0x98
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4413      	add	r3, r2
 8007584:	3304      	adds	r3, #4
 8007586:	461a      	mov	r2, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fecd 	bl	8008328 <USBH_MSC_SCSI_RequestSense>
 800758e:	4603      	mov	r3, r0
 8007590:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d146      	bne.n	8007626 <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800759e:	4619      	mov	r1, r3
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	2334      	movs	r3, #52	@ 0x34
 80075a4:	fb01 f303 	mul.w	r3, r1, r3
 80075a8:	4413      	add	r3, r2
 80075aa:	339c      	adds	r3, #156	@ 0x9c
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b06      	cmp	r3, #6
 80075b0:	d00c      	beq.n	80075cc <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80075b8:	4619      	mov	r1, r3
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	2334      	movs	r3, #52	@ 0x34
 80075be:	fb01 f303 	mul.w	r3, r1, r3
 80075c2:	4413      	add	r3, r2
 80075c4:	339c      	adds	r3, #156	@ 0x9c
 80075c6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d117      	bne.n	80075fc <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80075de:	4293      	cmp	r3, r2
 80075e0:	d80c      	bhi.n	80075fc <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80075e8:	4619      	mov	r1, r3
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	2334      	movs	r3, #52	@ 0x34
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	4413      	add	r3, r2
 80075f4:	3390      	adds	r3, #144	@ 0x90
 80075f6:	2202      	movs	r2, #2
 80075f8:	701a      	strb	r2, [r3, #0]
                  break;
 80075fa:	e066      	b.n	80076ca <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007602:	4619      	mov	r1, r3
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	2334      	movs	r3, #52	@ 0x34
 8007608:	fb01 f303 	mul.w	r3, r1, r3
 800760c:	4413      	add	r3, r2
 800760e:	3390      	adds	r3, #144	@ 0x90
 8007610:	2201      	movs	r2, #1
 8007612:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800761a:	3301      	adds	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8007624:	e050      	b.n	80076c8 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d118      	bne.n	800765e <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007632:	4619      	mov	r1, r3
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	2334      	movs	r3, #52	@ 0x34
 8007638:	fb01 f303 	mul.w	r3, r1, r3
 800763c:	4413      	add	r3, r2
 800763e:	3390      	adds	r3, #144	@ 0x90
 8007640:	2208      	movs	r2, #8
 8007642:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800764a:	4619      	mov	r1, r3
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	2334      	movs	r3, #52	@ 0x34
 8007650:	fb01 f303 	mul.w	r3, r1, r3
 8007654:	4413      	add	r3, r2
 8007656:	3391      	adds	r3, #145	@ 0x91
 8007658:	2202      	movs	r2, #2
 800765a:	701a      	strb	r2, [r3, #0]
            break;
 800765c:	e034      	b.n	80076c8 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b04      	cmp	r3, #4
 8007662:	d131      	bne.n	80076c8 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800766a:	4619      	mov	r1, r3
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	2334      	movs	r3, #52	@ 0x34
 8007670:	fb01 f303 	mul.w	r3, r1, r3
 8007674:	4413      	add	r3, r2
 8007676:	3390      	adds	r3, #144	@ 0x90
 8007678:	2208      	movs	r2, #8
 800767a:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8007682:	4619      	mov	r1, r3
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	2334      	movs	r3, #52	@ 0x34
 8007688:	fb01 f303 	mul.w	r3, r1, r3
 800768c:	4413      	add	r3, r2
 800768e:	3391      	adds	r3, #145	@ 0x91
 8007690:	2202      	movs	r2, #2
 8007692:	701a      	strb	r2, [r3, #0]
            break;
 8007694:	e018      	b.n	80076c8 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800769c:	3301      	adds	r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80076a6:	e010      	b.n	80076ca <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	220a      	movs	r2, #10
 80076b4:	731a      	strb	r2, [r3, #12]
      break;
 80076b6:	e045      	b.n	8007744 <USBH_MSC_Process+0x5a0>
            break;
 80076b8:	bf00      	nop
 80076ba:	e043      	b.n	8007744 <USBH_MSC_Process+0x5a0>
            break;
 80076bc:	bf00      	nop
 80076be:	e041      	b.n	8007744 <USBH_MSC_Process+0x5a0>
            break;
 80076c0:	bf00      	nop
 80076c2:	e03f      	b.n	8007744 <USBH_MSC_Process+0x5a0>
            break;
 80076c4:	bf00      	nop
 80076c6:	e03d      	b.n	8007744 <USBH_MSC_Process+0x5a0>
            break;
 80076c8:	bf00      	nop
      break;
 80076ca:	e03b      	b.n	8007744 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	7812      	ldrb	r2, [r2, #0]
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d228      	bcs.n	800772c <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80076ec:	4619      	mov	r1, r3
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	2334      	movs	r3, #52	@ 0x34
 80076f2:	fb01 f303 	mul.w	r3, r1, r3
 80076f6:	4413      	add	r3, r2
 80076f8:	3391      	adds	r3, #145	@ 0x91
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007706:	2102      	movs	r1, #2
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	4798      	blx	r3
 800770c:	e005      	b.n	800771a <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007714:	2106      	movs	r1, #6
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
        MSC_Handle->lun++;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8007720:	3301      	adds	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 800772a:	e00b      	b.n	8007744 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	2200      	movs	r2, #0
 8007730:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	2201      	movs	r2, #1
 8007738:	731a      	strb	r2, [r3, #12]
      break;
 800773a:	e003      	b.n	8007744 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	75fb      	strb	r3, [r7, #23]
      break;
 8007740:	e000      	b.n	8007744 <USBH_MSC_Process+0x5a0>
      break;
 8007742:	bf00      	nop
  }
  return error;
 8007744:	7dfb      	ldrb	r3, [r7, #23]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop

08007750 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b088      	sub	sp, #32
 800776a:	af02      	add	r7, sp, #8
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	460b      	mov	r3, r1
 8007770:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800777c:	2301      	movs	r3, #1
 800777e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007780:	2301      	movs	r3, #1
 8007782:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	2134      	movs	r1, #52	@ 0x34
 800778a:	fb01 f303 	mul.w	r3, r1, r3
 800778e:	4413      	add	r3, r2
 8007790:	3390      	adds	r3, #144	@ 0x90
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b07      	cmp	r3, #7
 8007796:	d03c      	beq.n	8007812 <USBH_MSC_RdWrProcess+0xac>
 8007798:	2b07      	cmp	r3, #7
 800779a:	f300 80a8 	bgt.w	80078ee <USBH_MSC_RdWrProcess+0x188>
 800779e:	2b05      	cmp	r3, #5
 80077a0:	d06c      	beq.n	800787c <USBH_MSC_RdWrProcess+0x116>
 80077a2:	2b06      	cmp	r3, #6
 80077a4:	f040 80a3 	bne.w	80078ee <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80077a8:	78f9      	ldrb	r1, [r7, #3]
 80077aa:	2300      	movs	r3, #0
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	2300      	movs	r3, #0
 80077b0:	2200      	movs	r2, #0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fea7 	bl	8008506 <USBH_MSC_SCSI_Read>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	2134      	movs	r1, #52	@ 0x34
 80077c8:	fb01 f303 	mul.w	r3, r1, r3
 80077cc:	4413      	add	r3, r2
 80077ce:	3390      	adds	r3, #144	@ 0x90
 80077d0:	2201      	movs	r2, #1
 80077d2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077d8:	e08b      	b.n	80078f2 <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d109      	bne.n	80077f4 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	2134      	movs	r1, #52	@ 0x34
 80077e6:	fb01 f303 	mul.w	r3, r1, r3
 80077ea:	4413      	add	r3, r2
 80077ec:	3390      	adds	r3, #144	@ 0x90
 80077ee:	2205      	movs	r2, #5
 80077f0:	701a      	strb	r2, [r3, #0]
      break;
 80077f2:	e07e      	b.n	80078f2 <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d17b      	bne.n	80078f2 <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	2134      	movs	r1, #52	@ 0x34
 8007800:	fb01 f303 	mul.w	r3, r1, r3
 8007804:	4413      	add	r3, r2
 8007806:	3390      	adds	r3, #144	@ 0x90
 8007808:	2208      	movs	r2, #8
 800780a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800780c:	2302      	movs	r3, #2
 800780e:	75fb      	strb	r3, [r7, #23]
      break;
 8007810:	e06f      	b.n	80078f2 <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007812:	78f9      	ldrb	r1, [r7, #3]
 8007814:	2300      	movs	r3, #0
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	2300      	movs	r3, #0
 800781a:	2200      	movs	r2, #0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fe02 	bl	8008426 <USBH_MSC_SCSI_Write>
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10b      	bne.n	8007844 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	2134      	movs	r1, #52	@ 0x34
 8007832:	fb01 f303 	mul.w	r3, r1, r3
 8007836:	4413      	add	r3, r2
 8007838:	3390      	adds	r3, #144	@ 0x90
 800783a:	2201      	movs	r2, #1
 800783c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007842:	e058      	b.n	80078f6 <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d109      	bne.n	800785e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	2134      	movs	r1, #52	@ 0x34
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	4413      	add	r3, r2
 8007856:	3390      	adds	r3, #144	@ 0x90
 8007858:	2205      	movs	r2, #5
 800785a:	701a      	strb	r2, [r3, #0]
      break;
 800785c:	e04b      	b.n	80078f6 <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	2b04      	cmp	r3, #4
 8007862:	d148      	bne.n	80078f6 <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	2134      	movs	r1, #52	@ 0x34
 800786a:	fb01 f303 	mul.w	r3, r1, r3
 800786e:	4413      	add	r3, r2
 8007870:	3390      	adds	r3, #144	@ 0x90
 8007872:	2208      	movs	r2, #8
 8007874:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007876:	2302      	movs	r3, #2
 8007878:	75fb      	strb	r3, [r7, #23]
      break;
 800787a:	e03c      	b.n	80078f6 <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	2234      	movs	r2, #52	@ 0x34
 8007880:	fb02 f303 	mul.w	r3, r2, r3
 8007884:	3398      	adds	r3, #152	@ 0x98
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4413      	add	r3, r2
 800788a:	1d1a      	adds	r2, r3, #4
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fd49 	bl	8008328 <USBH_MSC_SCSI_RequestSense>
 8007896:	4603      	mov	r3, r0
 8007898:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d114      	bne.n	80078ca <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	2134      	movs	r1, #52	@ 0x34
 80078a6:	fb01 f303 	mul.w	r3, r1, r3
 80078aa:	4413      	add	r3, r2
 80078ac:	3390      	adds	r3, #144	@ 0x90
 80078ae:	2201      	movs	r2, #1
 80078b0:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80078b2:	78fb      	ldrb	r3, [r7, #3]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	2134      	movs	r1, #52	@ 0x34
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	4413      	add	r3, r2
 80078be:	3391      	adds	r3, #145	@ 0x91
 80078c0:	2202      	movs	r2, #2
 80078c2:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80078c4:	2302      	movs	r3, #2
 80078c6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078c8:	e017      	b.n	80078fa <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d014      	beq.n	80078fa <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d111      	bne.n	80078fa <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80078d6:	78fb      	ldrb	r3, [r7, #3]
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	2134      	movs	r1, #52	@ 0x34
 80078dc:	fb01 f303 	mul.w	r3, r1, r3
 80078e0:	4413      	add	r3, r2
 80078e2:	3390      	adds	r3, #144	@ 0x90
 80078e4:	2208      	movs	r2, #8
 80078e6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80078e8:	2302      	movs	r3, #2
 80078ea:	75fb      	strb	r3, [r7, #23]
      break;
 80078ec:	e005      	b.n	80078fa <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 80078ee:	bf00      	nop
 80078f0:	e004      	b.n	80078fc <USBH_MSC_RdWrProcess+0x196>
      break;
 80078f2:	bf00      	nop
 80078f4:	e002      	b.n	80078fc <USBH_MSC_RdWrProcess+0x196>
      break;
 80078f6:	bf00      	nop
 80078f8:	e000      	b.n	80078fc <USBH_MSC_RdWrProcess+0x196>
      break;
 80078fa:	bf00      	nop

  }
  return error;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007906:	b480      	push	{r7}
 8007908:	b085      	sub	sp, #20
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	b29a      	uxth	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b0b      	cmp	r3, #11
 800792e:	d10c      	bne.n	800794a <USBH_MSC_UnitIsReady+0x44>
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	2134      	movs	r1, #52	@ 0x34
 8007936:	fb01 f303 	mul.w	r3, r1, r3
 800793a:	4413      	add	r3, r2
 800793c:	3391      	adds	r3, #145	@ 0x91
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 8007944:	2301      	movs	r3, #1
 8007946:	73fb      	strb	r3, [r7, #15]
 8007948:	e001      	b.n	800794e <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	460b      	mov	r3, r1
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	b29a      	uxth	r2, r3
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b0b      	cmp	r3, #11
 8007986:	d10d      	bne.n	80079a4 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007988:	7afb      	ldrb	r3, [r7, #11]
 800798a:	2234      	movs	r2, #52	@ 0x34
 800798c:	fb02 f303 	mul.w	r3, r2, r3
 8007990:	3390      	adds	r3, #144	@ 0x90
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4413      	add	r3, r2
 8007996:	2234      	movs	r2, #52	@ 0x34
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f007 fd9c 	bl	800f4d8 <memcpy>
    return USBH_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	e000      	b.n	80079a6 <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 80079a4:	2302      	movs	r3, #2
  }
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b088      	sub	sp, #32
 80079b2:	af02      	add	r7, sp, #8
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	603b      	str	r3, [r7, #0]
 80079ba:	460b      	mov	r3, r1
 80079bc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00e      	beq.n	80079fc <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80079e4:	2b0b      	cmp	r3, #11
 80079e6:	d109      	bne.n	80079fc <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	2134      	movs	r1, #52	@ 0x34
 80079ee:	fb01 f303 	mul.w	r3, r1, r3
 80079f2:	4413      	add	r3, r2
 80079f4:	3390      	adds	r3, #144	@ 0x90
 80079f6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d001      	beq.n	8007a00 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 80079fc:	2302      	movs	r3, #2
 80079fe:	e032      	b.n	8007a66 <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	2134      	movs	r1, #52	@ 0x34
 8007a06:	fb01 f303 	mul.w	r3, r1, r3
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3390      	adds	r3, #144	@ 0x90
 8007a0e:	2206      	movs	r2, #6
 8007a10:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007a12:	7af9      	ldrb	r1, [r7, #11]
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fd72 	bl	8008506 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007a28:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007a2a:	e013      	b.n	8007a54 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	1ad2      	subs	r2, r2, r3
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	f242 7110 	movw	r1, #10000	@ 0x2710
 8007a3c:	fb01 f303 	mul.w	r3, r1, r3
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d805      	bhi.n	8007a50 <USBH_MSC_Read+0xa2>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 8007a50:	2302      	movs	r3, #2
 8007a52:	e008      	b.n	8007a66 <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007a54:	7afb      	ldrb	r3, [r7, #11]
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff fe84 	bl	8007766 <USBH_MSC_RdWrProcess>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d0e3      	beq.n	8007a2c <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b088      	sub	sp, #32
 8007a72:	af02      	add	r7, sp, #8
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00e      	beq.n	8007abc <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007aa4:	2b0b      	cmp	r3, #11
 8007aa6:	d109      	bne.n	8007abc <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	2134      	movs	r1, #52	@ 0x34
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3390      	adds	r3, #144	@ 0x90
 8007ab6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d001      	beq.n	8007ac0 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 8007abc:	2302      	movs	r3, #2
 8007abe:	e032      	b.n	8007b26 <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007ac0:	7afb      	ldrb	r3, [r7, #11]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	2134      	movs	r1, #52	@ 0x34
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	4413      	add	r3, r2
 8007acc:	3390      	adds	r3, #144	@ 0x90
 8007ace:	2207      	movs	r2, #7
 8007ad0:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007ad2:	7af9      	ldrb	r1, [r7, #11]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fca2 	bl	8008426 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ae8:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007aea:	e013      	b.n	8007b14 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	1ad2      	subs	r2, r2, r3
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d805      	bhi.n	8007b10 <USBH_MSC_Write+0xa2>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 8007b10:	2302      	movs	r3, #2
 8007b12:	e008      	b.n	8007b26 <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007b14:	7afb      	ldrb	r3, [r7, #11]
 8007b16:	4619      	mov	r1, r3
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7ff fe24 	bl	8007766 <USBH_MSC_RdWrProcess>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d0e3      	beq.n	8007aec <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2221      	movs	r2, #33	@ 0x21
 8007b3a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	22ff      	movs	r2, #255	@ 0xff
 8007b40:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8007b54:	2200      	movs	r2, #0
 8007b56:	2100      	movs	r1, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 ff44 	bl	80099e6 <USBH_CtlReq>
 8007b5e:	4603      	mov	r3, r0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	22a1      	movs	r2, #161	@ 0xa1
 8007b76:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	22fe      	movs	r2, #254	@ 0xfe
 8007b7c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007b90:	2201      	movs	r2, #1
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 ff26 	bl	80099e6 <USBH_CtlReq>
 8007b9a:	4603      	mov	r3, r0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4a09      	ldr	r2, [pc, #36]	@ (8007be0 <USBH_MSC_BOT_Init+0x3c>)
 8007bba:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4a09      	ldr	r2, [pc, #36]	@ (8007be4 <USBH_MSC_BOT_Init+0x40>)
 8007bc0:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	43425355 	.word	0x43425355
 8007be4:	20304050 	.word	0x20304050

08007be8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c00:	2300      	movs	r3, #0
 8007c02:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	2b0a      	cmp	r3, #10
 8007c1c:	f200 819e 	bhi.w	8007f5c <USBH_MSC_BOT_Process+0x374>
 8007c20:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <USBH_MSC_BOT_Process+0x40>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c55 	.word	0x08007c55
 8007c2c:	08007c7d 	.word	0x08007c7d
 8007c30:	08007ce7 	.word	0x08007ce7
 8007c34:	08007d05 	.word	0x08007d05
 8007c38:	08007d89 	.word	0x08007d89
 8007c3c:	08007dab 	.word	0x08007dab
 8007c40:	08007e43 	.word	0x08007e43
 8007c44:	08007e5f 	.word	0x08007e5f
 8007c48:	08007eb1 	.word	0x08007eb1
 8007c4c:	08007ee1 	.word	0x08007ee1
 8007c50:	08007f43 	.word	0x08007f43
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	78fa      	ldrb	r2, [r7, #3]
 8007c58:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	795b      	ldrb	r3, [r3, #5]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	9200      	str	r2, [sp, #0]
 8007c72:	221f      	movs	r2, #31
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f002 f8c4 	bl	8009e02 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007c7a:	e17e      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	795b      	ldrb	r3, [r3, #5]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f007 fa68 	bl	800f158 <USBH_LL_GetURBState>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007c8c:	7d3b      	ldrb	r3, [r7, #20]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d118      	bne.n	8007cc4 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00f      	beq.n	8007cba <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8007ca0:	b25b      	sxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	da04      	bge.n	8007cb0 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2203      	movs	r2, #3
 8007caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007cae:	e157      	b.n	8007f60 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2205      	movs	r2, #5
 8007cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007cb8:	e152      	b.n	8007f60 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007cc2:	e14d      	b.n	8007f60 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007cc4:	7d3b      	ldrb	r3, [r7, #20]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d104      	bne.n	8007cd4 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007cd2:	e145      	b.n	8007f60 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8007cd4:	7d3b      	ldrb	r3, [r7, #20]
 8007cd6:	2b05      	cmp	r3, #5
 8007cd8:	f040 8142 	bne.w	8007f60 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	220a      	movs	r2, #10
 8007ce0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007ce4:	e13c      	b.n	8007f60 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	895a      	ldrh	r2, [r3, #10]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	791b      	ldrb	r3, [r3, #4]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f002 f8a9 	bl	8009e4c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2204      	movs	r2, #4
 8007cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 8007d02:	e13a      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	791b      	ldrb	r3, [r3, #4]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f007 fa24 	bl	800f158 <USBH_LL_GetURBState>
 8007d10:	4603      	mov	r3, r0
 8007d12:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007d14:	7d3b      	ldrb	r3, [r7, #20]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d12d      	bne.n	8007d76 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	8952      	ldrh	r2, [r2, #10]
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d910      	bls.n	8007d48 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	8952      	ldrh	r2, [r2, #10]
 8007d30:	441a      	add	r2, r3
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	8952      	ldrh	r2, [r2, #10]
 8007d40:	1a9a      	subs	r2, r3, r2
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007d46:	e002      	b.n	8007d4e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	895a      	ldrh	r2, [r3, #10]
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	791b      	ldrb	r3, [r3, #4]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f002 f871 	bl	8009e4c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007d6a:	e0fb      	b.n	8007f64 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2207      	movs	r2, #7
 8007d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007d74:	e0f6      	b.n	8007f64 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8007d76:	7d3b      	ldrb	r3, [r7, #20]
 8007d78:	2b05      	cmp	r3, #5
 8007d7a:	f040 80f3 	bne.w	8007f64 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2209      	movs	r2, #9
 8007d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007d86:	e0ed      	b.n	8007f64 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	891a      	ldrh	r2, [r3, #8]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	795b      	ldrb	r3, [r3, #5]
 8007d96:	2001      	movs	r0, #1
 8007d98:	9000      	str	r0, [sp, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f002 f831 	bl	8009e02 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2206      	movs	r2, #6
 8007da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007da8:	e0e7      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	795b      	ldrb	r3, [r3, #5]
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f007 f9d1 	bl	800f158 <USBH_LL_GetURBState>
 8007db6:	4603      	mov	r3, r0
 8007db8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007dba:	7d3b      	ldrb	r3, [r7, #20]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d12f      	bne.n	8007e20 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	8912      	ldrh	r2, [r2, #8]
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d910      	bls.n	8007dee <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	8912      	ldrh	r2, [r2, #8]
 8007dd6:	441a      	add	r2, r3
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	8912      	ldrh	r2, [r2, #8]
 8007de6:	1a9a      	subs	r2, r3, r2
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007dec:	e002      	b.n	8007df4 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2200      	movs	r2, #0
 8007df2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00c      	beq.n	8007e16 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	891a      	ldrh	r2, [r3, #8]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	795b      	ldrb	r3, [r3, #5]
 8007e0a:	2001      	movs	r0, #1
 8007e0c:	9000      	str	r0, [sp, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 fff7 	bl	8009e02 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007e14:	e0a8      	b.n	8007f68 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	2207      	movs	r2, #7
 8007e1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007e1e:	e0a3      	b.n	8007f68 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e20:	7d3b      	ldrb	r3, [r7, #20]
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d104      	bne.n	8007e30 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2205      	movs	r2, #5
 8007e2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007e2e:	e09b      	b.n	8007f68 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8007e30:	7d3b      	ldrb	r3, [r7, #20]
 8007e32:	2b05      	cmp	r3, #5
 8007e34:	f040 8098 	bne.w	8007f68 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	220a      	movs	r2, #10
 8007e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007e40:	e092      	b.n	8007f68 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	791b      	ldrb	r3, [r3, #4]
 8007e4c:	220d      	movs	r2, #13
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fffc 	bl	8009e4c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2208      	movs	r2, #8
 8007e58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007e5c:	e08d      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	791b      	ldrb	r3, [r3, #4]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f007 f977 	bl	800f158 <USBH_LL_GetURBState>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007e6e:	7d3b      	ldrb	r3, [r7, #20]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d115      	bne.n	8007ea0 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f8a9 	bl	8007fdc <USBH_MSC_DecodeCSW>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007e8e:	7d7b      	ldrb	r3, [r7, #21]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d102      	bne.n	8007e9a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007e98:	e068      	b.n	8007f6c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e9e:	e065      	b.n	8007f6c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8007ea0:	7d3b      	ldrb	r3, [r7, #20]
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	d162      	bne.n	8007f6c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	2209      	movs	r2, #9
 8007eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007eae:	e05d      	b.n	8007f6c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f864 	bl	8007f84 <USBH_MSC_BOT_Abort>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007ec0:	7dbb      	ldrb	r3, [r7, #22]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2207      	movs	r2, #7
 8007eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007ece:	e04f      	b.n	8007f70 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007ed0:	7dbb      	ldrb	r3, [r7, #22]
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d14c      	bne.n	8007f70 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	220b      	movs	r2, #11
 8007eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007ede:	e047      	b.n	8007f70 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f84c 	bl	8007f84 <USBH_MSC_BOT_Abort>
 8007eec:	4603      	mov	r3, r0
 8007eee:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007ef0:	7dbb      	ldrb	r3, [r7, #22]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d11d      	bne.n	8007f32 <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	795b      	ldrb	r3, [r3, #5]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f007 f97f 	bl	800f200 <USBH_LL_GetToggle>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	7959      	ldrb	r1, [r3, #5]
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	f1c3 0301 	rsb	r3, r3, #1
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	461a      	mov	r2, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f007 f940 	bl	800f19a <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	791b      	ldrb	r3, [r3, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f007 f939 	bl	800f19a <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2209      	movs	r2, #9
 8007f2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007f30:	e020      	b.n	8007f74 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8007f32:	7dbb      	ldrb	r3, [r7, #22]
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d11d      	bne.n	8007f74 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	220b      	movs	r2, #11
 8007f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007f40:	e018      	b.n	8007f74 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fdf3 	bl	8007b2e <USBH_MSC_BOT_REQ_Reset>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d112      	bne.n	8007f78 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8007f5a:	e00d      	b.n	8007f78 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8007f5c:	bf00      	nop
 8007f5e:	e00c      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>
      break;
 8007f60:	bf00      	nop
 8007f62:	e00a      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>
      break;
 8007f64:	bf00      	nop
 8007f66:	e008      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>
      break;
 8007f68:	bf00      	nop
 8007f6a:	e006      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>
      break;
 8007f6c:	bf00      	nop
 8007f6e:	e004      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>
      break;
 8007f70:	bf00      	nop
 8007f72:	e002      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>
      break;
 8007f74:	bf00      	nop
 8007f76:	e000      	b.n	8007f7a <USBH_MSC_BOT_Process+0x392>
      break;
 8007f78:	bf00      	nop
  }
  return status;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
 8007f90:	4613      	mov	r3, r2
 8007f92:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8007f94:	2302      	movs	r3, #2
 8007f96:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8007fa2:	78bb      	ldrb	r3, [r7, #2]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <USBH_MSC_BOT_Abort+0x2a>
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d009      	beq.n	8007fc0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007fac:	e011      	b.n	8007fd2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	79db      	ldrb	r3, [r3, #7]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 f9e1 	bl	800937c <USBH_ClrFeature>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbe:	e008      	b.n	8007fd2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	799b      	ldrb	r3, [r3, #6]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 f9d8 	bl	800937c <USBH_ClrFeature>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd0:	bf00      	nop
  }
  return status;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f007 f81b 	bl	800f034 <USBH_LL_GetLastXferSize>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b0d      	cmp	r3, #13
 8008002:	d002      	beq.n	800800a <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 8008004:	2302      	movs	r3, #2
 8008006:	73fb      	strb	r3, [r7, #15]
 8008008:	e024      	b.n	8008054 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800800e:	4a14      	ldr	r2, [pc, #80]	@ (8008060 <USBH_MSC_DecodeCSW+0x84>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d11d      	bne.n	8008050 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800801c:	429a      	cmp	r2, r3
 800801e:	d119      	bne.n	8008054 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]
 800802e:	e011      	b.n	8008054 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008036:	2b01      	cmp	r3, #1
 8008038:	d102      	bne.n	8008040 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800803a:	2301      	movs	r3, #1
 800803c:	73fb      	strb	r3, [r7, #15]
 800803e:	e009      	b.n	8008054 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008046:	2b02      	cmp	r3, #2
 8008048:	d104      	bne.n	8008054 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800804a:	2302      	movs	r3, #2
 800804c:	73fb      	strb	r3, [r7, #15]
 800804e:	e001      	b.n	8008054 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008050:	2302      	movs	r3, #2
 8008052:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	53425355 	.word	0x53425355

08008064 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008070:	2302      	movs	r3, #2
 8008072:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008084:	2b01      	cmp	r3, #1
 8008086:	d002      	beq.n	800808e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008088:	2b02      	cmp	r3, #2
 800808a:	d021      	beq.n	80080d0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800808c:	e028      	b.n	80080e0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2200      	movs	r2, #0
 8008092:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	220a      	movs	r2, #10
 80080a0:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	3363      	adds	r3, #99	@ 0x63
 80080a8:	2210      	movs	r2, #16
 80080aa:	2100      	movs	r1, #0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f007 f9cf 	bl	800f450 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2202      	movs	r2, #2
 80080c6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 80080ca:	2301      	movs	r3, #1
 80080cc:	73fb      	strb	r3, [r7, #15]
      break;
 80080ce:	e007      	b.n	80080e0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff fd87 	bl	8007be8 <USBH_MSC_BOT_Process>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]
      break;
 80080de:	bf00      	nop
  }

  return error;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b086      	sub	sp, #24
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	460b      	mov	r3, r1
 80080f4:	607a      	str	r2, [r7, #4]
 80080f6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 80080f8:	2301      	movs	r3, #1
 80080fa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800810c:	2b01      	cmp	r3, #1
 800810e:	d002      	beq.n	8008116 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008110:	2b02      	cmp	r3, #2
 8008112:	d027      	beq.n	8008164 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008114:	e05e      	b.n	80081d4 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	2208      	movs	r2, #8
 800811a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2280      	movs	r2, #128	@ 0x80
 8008120:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	220a      	movs	r2, #10
 8008128:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3363      	adds	r3, #99	@ 0x63
 8008130:	2210      	movs	r2, #16
 8008132:	2100      	movs	r1, #0
 8008134:	4618      	mov	r0, r3
 8008136:	f007 f98b 	bl	800f450 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	2225      	movs	r2, #37	@ 0x25
 800813e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2202      	movs	r2, #2
 800814e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f103 0210 	add.w	r2, r3, #16
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800815e:	2301      	movs	r3, #1
 8008160:	75fb      	strb	r3, [r7, #23]
      break;
 8008162:	e037      	b.n	80081d4 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	4619      	mov	r1, r3
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fd3d 	bl	8007be8 <USBH_MSC_BOT_Process>
 800816e:	4603      	mov	r3, r0
 8008170:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d12c      	bne.n	80081d2 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800817e:	3303      	adds	r3, #3
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800818a:	3302      	adds	r3, #2
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008198:	3301      	adds	r3, #1
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800819e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	061b      	lsls	r3, r3, #24
 80081aa:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081b6:	3307      	adds	r3, #7
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081c2:	3306      	adds	r3, #6
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4313      	orrs	r3, r2
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	809a      	strh	r2, [r3, #4]
      break;
 80081d2:	bf00      	nop
  }

  return error;
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b086      	sub	sp, #24
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	460b      	mov	r3, r1
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80081ec:	2302      	movs	r3, #2
 80081ee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008200:	2b01      	cmp	r3, #1
 8008202:	d002      	beq.n	800820a <USBH_MSC_SCSI_Inquiry+0x2c>
 8008204:	2b02      	cmp	r3, #2
 8008206:	d03d      	beq.n	8008284 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008208:	e089      	b.n	800831e <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2224      	movs	r2, #36	@ 0x24
 800820e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2280      	movs	r2, #128	@ 0x80
 8008214:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	220a      	movs	r2, #10
 800821c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	3363      	adds	r3, #99	@ 0x63
 8008224:	220a      	movs	r2, #10
 8008226:	2100      	movs	r1, #0
 8008228:	4618      	mov	r0, r3
 800822a:	f007 f911 	bl	800f450 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2212      	movs	r2, #18
 8008232:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8008236:	7afb      	ldrb	r3, [r7, #11]
 8008238:	015b      	lsls	r3, r3, #5
 800823a:	b2da      	uxtb	r2, r3
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2224      	movs	r2, #36	@ 0x24
 8008256:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2202      	movs	r2, #2
 800826e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f103 0210 	add.w	r2, r3, #16
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800827e:	2301      	movs	r3, #1
 8008280:	75fb      	strb	r3, [r7, #23]
      break;
 8008282:	e04c      	b.n	800831e <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	4619      	mov	r1, r3
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7ff fcad 	bl	8007be8 <USBH_MSC_BOT_Process>
 800828e:	4603      	mov	r3, r0
 8008290:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d141      	bne.n	800831c <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008298:	2222      	movs	r2, #34	@ 0x22
 800829a:	2100      	movs	r1, #0
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f007 f8d7 	bl	800f450 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	f003 031f 	and.w	r3, r3, #31
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	095b      	lsrs	r3, r3, #5
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ca:	3301      	adds	r3, #1
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	da03      	bge.n	80082dc <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	709a      	strb	r2, [r3, #2]
 80082da:	e002      	b.n	80082e2 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	1cd8      	adds	r0, r3, #3
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ec:	3308      	adds	r3, #8
 80082ee:	2208      	movs	r2, #8
 80082f0:	4619      	mov	r1, r3
 80082f2:	f007 f8f1 	bl	800f4d8 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f103 000c 	add.w	r0, r3, #12
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008302:	3310      	adds	r3, #16
 8008304:	2210      	movs	r2, #16
 8008306:	4619      	mov	r1, r3
 8008308:	f007 f8e6 	bl	800f4d8 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	331d      	adds	r3, #29
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8008316:	3220      	adds	r2, #32
 8008318:	6812      	ldr	r2, [r2, #0]
 800831a:	601a      	str	r2, [r3, #0]
      break;
 800831c:	bf00      	nop
  }

  return error;
 800831e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	460b      	mov	r3, r1
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008336:	2302      	movs	r3, #2
 8008338:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800834a:	2b01      	cmp	r3, #1
 800834c:	d002      	beq.n	8008354 <USBH_MSC_SCSI_RequestSense+0x2c>
 800834e:	2b02      	cmp	r3, #2
 8008350:	d03d      	beq.n	80083ce <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 8008352:	e063      	b.n	800841c <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	220e      	movs	r2, #14
 8008358:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	2280      	movs	r2, #128	@ 0x80
 800835e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	220a      	movs	r2, #10
 8008366:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	3363      	adds	r3, #99	@ 0x63
 800836e:	2210      	movs	r2, #16
 8008370:	2100      	movs	r1, #0
 8008372:	4618      	mov	r0, r3
 8008374:	f007 f86c 	bl	800f450 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	2203      	movs	r2, #3
 800837c:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	015b      	lsls	r3, r3, #5
 8008384:	b2da      	uxtb	r2, r3
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	220e      	movs	r2, #14
 80083a0:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f103 0210 	add.w	r2, r3, #16
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80083c8:	2301      	movs	r3, #1
 80083ca:	75fb      	strb	r3, [r7, #23]
      break;
 80083cc:	e026      	b.n	800841c <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 80083ce:	7afb      	ldrb	r3, [r7, #11]
 80083d0:	4619      	mov	r1, r3
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7ff fc08 	bl	8007be8 <USBH_MSC_BOT_Process>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d11b      	bne.n	800841a <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083e8:	3302      	adds	r3, #2
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083fc:	7b1a      	ldrb	r2, [r3, #12]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008408:	7b5a      	ldrb	r2, [r3, #13]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	2b3a      	cmp	r3, #58	@ 0x3a
 8008414:	d101      	bne.n	800841a <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 8008416:	2304      	movs	r3, #4
 8008418:	75fb      	strb	r3, [r7, #23]
      break;
 800841a:	bf00      	nop
  }

  return error;
 800841c:	7dfb      	ldrb	r3, [r7, #23]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b086      	sub	sp, #24
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	460b      	mov	r3, r1
 8008434:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8008436:	2302      	movs	r3, #2
 8008438:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800844a:	2b01      	cmp	r3, #1
 800844c:	d002      	beq.n	8008454 <USBH_MSC_SCSI_Write+0x2e>
 800844e:	2b02      	cmp	r3, #2
 8008450:	d04c      	beq.n	80084ec <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008452:	e053      	b.n	80084fc <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8008454:	7afb      	ldrb	r3, [r7, #11]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	2134      	movs	r1, #52	@ 0x34
 800845a:	fb01 f303 	mul.w	r3, r1, r3
 800845e:	4413      	add	r3, r2
 8008460:	3398      	adds	r3, #152	@ 0x98
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	fb03 f202 	mul.w	r2, r3, r2
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	220a      	movs	r2, #10
 800847c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	3363      	adds	r3, #99	@ 0x63
 8008484:	2210      	movs	r2, #16
 8008486:	2100      	movs	r1, #0
 8008488:	4618      	mov	r0, r3
 800848a:	f006 ffe1 	bl	800f450 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	222a      	movs	r2, #42	@ 0x2a
 8008492:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8008496:	79fa      	ldrb	r2, [r7, #7]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800849e:	79ba      	ldrb	r2, [r7, #6]
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 80084a6:	797a      	ldrb	r2, [r7, #5]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 80084ae:	1d3b      	adds	r3, r7, #4
 80084b0:	781a      	ldrb	r2, [r3, #0]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 80084b8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 80084c2:	f107 0320 	add.w	r3, r7, #32
 80084c6:	781a      	ldrb	r2, [r3, #0]
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2202      	movs	r2, #2
 80084da:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80084e6:	2301      	movs	r3, #1
 80084e8:	75fb      	strb	r3, [r7, #23]
      break;
 80084ea:	e007      	b.n	80084fc <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	4619      	mov	r1, r3
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f7ff fb79 	bl	8007be8 <USBH_MSC_BOT_Process>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]
      break;
 80084fa:	bf00      	nop
  }

  return error;
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b086      	sub	sp, #24
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	603b      	str	r3, [r7, #0]
 8008512:	460b      	mov	r3, r1
 8008514:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008516:	2302      	movs	r3, #2
 8008518:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800852a:	2b01      	cmp	r3, #1
 800852c:	d002      	beq.n	8008534 <USBH_MSC_SCSI_Read+0x2e>
 800852e:	2b02      	cmp	r3, #2
 8008530:	d04c      	beq.n	80085cc <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008532:	e053      	b.n	80085dc <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8008534:	7afb      	ldrb	r3, [r7, #11]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	2134      	movs	r1, #52	@ 0x34
 800853a:	fb01 f303 	mul.w	r3, r1, r3
 800853e:	4413      	add	r3, r2
 8008540:	3398      	adds	r3, #152	@ 0x98
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	fb03 f202 	mul.w	r2, r3, r2
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	2280      	movs	r2, #128	@ 0x80
 8008554:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	220a      	movs	r2, #10
 800855c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	3363      	adds	r3, #99	@ 0x63
 8008564:	2210      	movs	r2, #16
 8008566:	2100      	movs	r1, #0
 8008568:	4618      	mov	r0, r3
 800856a:	f006 ff71 	bl	800f450 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	2228      	movs	r2, #40	@ 0x28
 8008572:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8008576:	79fa      	ldrb	r2, [r7, #7]
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800857e:	79ba      	ldrb	r2, [r7, #6]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8008586:	797a      	ldrb	r2, [r7, #5]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800858e:	1d3b      	adds	r3, r7, #4
 8008590:	781a      	ldrb	r2, [r3, #0]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8008598:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 80085a2:	f107 0320 	add.w	r3, r7, #32
 80085a6:	781a      	ldrb	r2, [r3, #0]
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2202      	movs	r2, #2
 80085ba:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80085c6:	2301      	movs	r3, #1
 80085c8:	75fb      	strb	r3, [r7, #23]
      break;
 80085ca:	e007      	b.n	80085dc <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 80085cc:	7afb      	ldrb	r3, [r7, #11]
 80085ce:	4619      	mov	r1, r3
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff fb09 	bl	8007be8 <USBH_MSC_BOT_Process>
 80085d6:	4603      	mov	r3, r0
 80085d8:	75fb      	strb	r3, [r7, #23]
      break;
 80085da:	bf00      	nop
  }

  return error;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	4613      	mov	r3, r2
 80085f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80085fa:	2302      	movs	r3, #2
 80085fc:	e029      	b.n	8008652 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	79fa      	ldrb	r2, [r7, #7]
 8008602:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 f81f 	bl	800865a <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f006 fc34 	bl	800eeb8 <USBH_LL_Init>

  return USBH_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008666:	2300      	movs	r3, #0
 8008668:	60fb      	str	r3, [r7, #12]
 800866a:	e009      	b.n	8008680 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	33e0      	adds	r3, #224	@ 0xe0
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	2200      	movs	r2, #0
 8008678:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b0f      	cmp	r3, #15
 8008684:	d9f2      	bls.n	800866c <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	e009      	b.n	80086a0 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4413      	add	r3, r2
 8008692:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008696:	2200      	movs	r2, #0
 8008698:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086a6:	d3f1      	bcc.n	800868c <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2240      	movs	r2, #64	@ 0x40
 80086cc:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	331c      	adds	r3, #28
 80086f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086fc:	2100      	movs	r1, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	f006 fea6 	bl	800f450 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800870a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800870e:	2100      	movs	r1, #0
 8008710:	4618      	mov	r0, r3
 8008712:	f006 fe9d 	bl	800f450 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800871c:	2212      	movs	r2, #18
 800871e:	2100      	movs	r1, #0
 8008720:	4618      	mov	r0, r3
 8008722:	f006 fe95 	bl	800f450 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800872c:	223e      	movs	r2, #62	@ 0x3e
 800872e:	2100      	movs	r1, #0
 8008730:	4618      	mov	r0, r3
 8008732:	f006 fe8d 	bl	800f450 <memset>

  return USBH_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d016      	beq.n	8008782 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10e      	bne.n	800877c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008764:	1c59      	adds	r1, r3, #1
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	33de      	adds	r3, #222	@ 0xde
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]
 800877a:	e004      	b.n	8008786 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800877c:	2302      	movs	r3, #2
 800877e:	73fb      	strb	r3, [r7, #15]
 8008780:	e001      	b.n	8008786 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008782:	2302      	movs	r3, #2
 8008784:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80087aa:	78fa      	ldrb	r2, [r7, #3]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d204      	bcs.n	80087ba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	78fa      	ldrb	r2, [r7, #3]
 80087b4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80087b8:	e001      	b.n	80087be <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80087ba:	2302      	movs	r3, #2
 80087bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	4608      	mov	r0, r1
 80087d6:	4611      	mov	r1, r2
 80087d8:	461a      	mov	r2, r3
 80087da:	4603      	mov	r3, r0
 80087dc:	70fb      	strb	r3, [r7, #3]
 80087de:	460b      	mov	r3, r1
 80087e0:	70bb      	strb	r3, [r7, #2]
 80087e2:	4613      	mov	r3, r2
 80087e4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80087f4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087f6:	e025      	b.n	8008844 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	221a      	movs	r2, #26
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
 8008800:	3308      	adds	r3, #8
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4413      	add	r3, r2
 8008806:	3302      	adds	r3, #2
 8008808:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	795b      	ldrb	r3, [r3, #5]
 800880e:	78fa      	ldrb	r2, [r7, #3]
 8008810:	429a      	cmp	r2, r3
 8008812:	d002      	beq.n	800881a <USBH_FindInterface+0x4e>
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	2bff      	cmp	r3, #255	@ 0xff
 8008818:	d111      	bne.n	800883e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800881e:	78ba      	ldrb	r2, [r7, #2]
 8008820:	429a      	cmp	r2, r3
 8008822:	d002      	beq.n	800882a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008824:	78bb      	ldrb	r3, [r7, #2]
 8008826:	2bff      	cmp	r3, #255	@ 0xff
 8008828:	d109      	bne.n	800883e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800882e:	787a      	ldrb	r2, [r7, #1]
 8008830:	429a      	cmp	r2, r3
 8008832:	d002      	beq.n	800883a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008834:	787b      	ldrb	r3, [r7, #1]
 8008836:	2bff      	cmp	r3, #255	@ 0xff
 8008838:	d101      	bne.n	800883e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	e006      	b.n	800884c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	3301      	adds	r3, #1
 8008842:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d9d6      	bls.n	80087f8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800884a:	23ff      	movs	r3, #255	@ 0xff
}
 800884c:	4618      	mov	r0, r3
 800884e:	371c      	adds	r7, #28
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f006 fb6f 	bl	800ef44 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008866:	2101      	movs	r1, #1
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f006 fc88 	bl	800f17e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af04      	add	r7, sp, #16
 800887e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008880:	2302      	movs	r3, #2
 8008882:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b01      	cmp	r3, #1
 8008892:	d102      	bne.n	800889a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2203      	movs	r2, #3
 8008898:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b0b      	cmp	r3, #11
 80088a2:	f200 81bb 	bhi.w	8008c1c <USBH_Process+0x3a4>
 80088a6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ac <USBH_Process+0x34>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088dd 	.word	0x080088dd
 80088b0:	0800890f 	.word	0x0800890f
 80088b4:	08008977 	.word	0x08008977
 80088b8:	08008bb7 	.word	0x08008bb7
 80088bc:	08008c1d 	.word	0x08008c1d
 80088c0:	08008a17 	.word	0x08008a17
 80088c4:	08008b5d 	.word	0x08008b5d
 80088c8:	08008a4d 	.word	0x08008a4d
 80088cc:	08008a6d 	.word	0x08008a6d
 80088d0:	08008a8b 	.word	0x08008a8b
 80088d4:	08008acf 	.word	0x08008acf
 80088d8:	08008b9f 	.word	0x08008b9f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 819b 	beq.w	8008c20 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80088f0:	20c8      	movs	r0, #200	@ 0xc8
 80088f2:	f006 fcb8 	bl	800f266 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f006 fb81 	bl	800effe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800890c:	e188      	b.n	8008c20 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008914:	2b01      	cmp	r3, #1
 8008916:	d107      	bne.n	8008928 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008926:	e18a      	b.n	8008c3e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800892e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008932:	d914      	bls.n	800895e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800893a:	3301      	adds	r3, #1
 800893c:	b2da      	uxtb	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800894a:	2b03      	cmp	r3, #3
 800894c:	d903      	bls.n	8008956 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	220d      	movs	r2, #13
 8008952:	701a      	strb	r2, [r3, #0]
      break;
 8008954:	e173      	b.n	8008c3e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	701a      	strb	r2, [r3, #0]
      break;
 800895c:	e16f      	b.n	8008c3e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008964:	f103 020a 	add.w	r2, r3, #10
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800896e:	200a      	movs	r0, #10
 8008970:	f006 fc79 	bl	800f266 <USBH_Delay>
      break;
 8008974:	e163      	b.n	8008c3e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800897c:	2b00      	cmp	r3, #0
 800897e:	d005      	beq.n	800898c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008986:	2104      	movs	r1, #4
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800898c:	2064      	movs	r0, #100	@ 0x64
 800898e:	f006 fc6a 	bl	800f266 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f006 fb0c 	bl	800efb0 <USBH_LL_GetSpeed>
 8008998:	4603      	mov	r3, r0
 800899a:	461a      	mov	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2205      	movs	r2, #5
 80089a6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80089a8:	2100      	movs	r1, #0
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 fa9b 	bl	8009ee6 <USBH_AllocPipe>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80089b8:	2180      	movs	r1, #128	@ 0x80
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 fa93 	bl	8009ee6 <USBH_AllocPipe>
 80089c0:	4603      	mov	r3, r0
 80089c2:	461a      	mov	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	7919      	ldrb	r1, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80089dc:	9202      	str	r2, [sp, #8]
 80089de:	2200      	movs	r2, #0
 80089e0:	9201      	str	r2, [sp, #4]
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	4603      	mov	r3, r0
 80089e6:	2280      	movs	r2, #128	@ 0x80
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f001 fa4d 	bl	8009e88 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	7959      	ldrb	r1, [r3, #5]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a02:	9202      	str	r2, [sp, #8]
 8008a04:	2200      	movs	r2, #0
 8008a06:	9201      	str	r2, [sp, #4]
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 fa3a 	bl	8009e88 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a14:	e113      	b.n	8008c3e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f916 	bl	8008c48 <USBH_HandleEnum>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f040 80fd 	bne.w	8008c24 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d103      	bne.n	8008a44 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2208      	movs	r2, #8
 8008a40:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a42:	e0ef      	b.n	8008c24 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2207      	movs	r2, #7
 8008a48:	701a      	strb	r2, [r3, #0]
      break;
 8008a4a:	e0eb      	b.n	8008c24 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 80e8 	beq.w	8008c28 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a5e:	2101      	movs	r1, #1
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2208      	movs	r2, #8
 8008a68:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008a6a:	e0dd      	b.n	8008c28 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fc3a 	bl	80092ee <USBH_SetCfg>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f040 80d5 	bne.w	8008c2c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2209      	movs	r2, #9
 8008a86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a88:	e0d0      	b.n	8008c2c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d016      	beq.n	8008ac6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008a98:	2101      	movs	r1, #1
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fc4a 	bl	8009334 <USBH_SetFeature>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d103      	bne.n	8008ab4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	220a      	movs	r2, #10
 8008ab0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ab2:	e0bd      	b.n	8008c30 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	f040 80b9 	bne.w	8008c30 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	220a      	movs	r2, #10
 8008ac2:	701a      	strb	r2, [r3, #0]
      break;
 8008ac4:	e0b4      	b.n	8008c30 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	220a      	movs	r2, #10
 8008aca:	701a      	strb	r2, [r3, #0]
      break;
 8008acc:	e0b0      	b.n	8008c30 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 80ad 	beq.w	8008c34 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
 8008ae6:	e016      	b.n	8008b16 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008ae8:	7bfa      	ldrb	r2, [r7, #15]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	32de      	adds	r2, #222	@ 0xde
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	791a      	ldrb	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d108      	bne.n	8008b10 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008afe:	7bfa      	ldrb	r2, [r7, #15]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	32de      	adds	r2, #222	@ 0xde
 8008b04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008b0e:	e005      	b.n	8008b1c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	3301      	adds	r3, #1
 8008b14:	73fb      	strb	r3, [r7, #15]
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0e5      	beq.n	8008ae8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d016      	beq.n	8008b54 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	4798      	blx	r3
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d109      	bne.n	8008b4c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2206      	movs	r2, #6
 8008b3c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b44:	2103      	movs	r1, #3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b4a:	e073      	b.n	8008c34 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	220d      	movs	r2, #13
 8008b50:	701a      	strb	r2, [r3, #0]
      break;
 8008b52:	e06f      	b.n	8008c34 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	220d      	movs	r2, #13
 8008b58:	701a      	strb	r2, [r3, #0]
      break;
 8008b5a:	e06b      	b.n	8008c34 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d017      	beq.n	8008b96 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	4798      	blx	r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d103      	bne.n	8008b86 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	220b      	movs	r2, #11
 8008b82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b84:	e058      	b.n	8008c38 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d154      	bne.n	8008c38 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	220d      	movs	r2, #13
 8008b92:	701a      	strb	r2, [r3, #0]
      break;
 8008b94:	e050      	b.n	8008c38 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	220d      	movs	r2, #13
 8008b9a:	701a      	strb	r2, [r3, #0]
      break;
 8008b9c:	e04c      	b.n	8008c38 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d049      	beq.n	8008c3c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	4798      	blx	r3
      }
      break;
 8008bb4:	e042      	b.n	8008c3c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff fd4b 	bl	800865a <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d009      	beq.n	8008be2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bf2:	2105      	movs	r1, #5
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d107      	bne.n	8008c14 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff fe23 	bl	8008858 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c12:	e014      	b.n	8008c3e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f006 f995 	bl	800ef44 <USBH_LL_Start>
      break;
 8008c1a:	e010      	b.n	8008c3e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008c1c:	bf00      	nop
 8008c1e:	e00e      	b.n	8008c3e <USBH_Process+0x3c6>
      break;
 8008c20:	bf00      	nop
 8008c22:	e00c      	b.n	8008c3e <USBH_Process+0x3c6>
      break;
 8008c24:	bf00      	nop
 8008c26:	e00a      	b.n	8008c3e <USBH_Process+0x3c6>
    break;
 8008c28:	bf00      	nop
 8008c2a:	e008      	b.n	8008c3e <USBH_Process+0x3c6>
      break;
 8008c2c:	bf00      	nop
 8008c2e:	e006      	b.n	8008c3e <USBH_Process+0x3c6>
      break;
 8008c30:	bf00      	nop
 8008c32:	e004      	b.n	8008c3e <USBH_Process+0x3c6>
      break;
 8008c34:	bf00      	nop
 8008c36:	e002      	b.n	8008c3e <USBH_Process+0x3c6>
      break;
 8008c38:	bf00      	nop
 8008c3a:	e000      	b.n	8008c3e <USBH_Process+0x3c6>
      break;
 8008c3c:	bf00      	nop
  }
  return USBH_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af04      	add	r7, sp, #16
 8008c4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008c50:	2301      	movs	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008c54:	2301      	movs	r3, #1
 8008c56:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	785b      	ldrb	r3, [r3, #1]
 8008c5c:	2b07      	cmp	r3, #7
 8008c5e:	f200 81bd 	bhi.w	8008fdc <USBH_HandleEnum+0x394>
 8008c62:	a201      	add	r2, pc, #4	@ (adr r2, 8008c68 <USBH_HandleEnum+0x20>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c89 	.word	0x08008c89
 8008c6c:	08008d43 	.word	0x08008d43
 8008c70:	08008dad 	.word	0x08008dad
 8008c74:	08008e37 	.word	0x08008e37
 8008c78:	08008ea1 	.word	0x08008ea1
 8008c7c:	08008f11 	.word	0x08008f11
 8008c80:	08008f57 	.word	0x08008f57
 8008c84:	08008f9d 	.word	0x08008f9d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008c88:	2108      	movs	r1, #8
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa4c 	bl	8009128 <USBH_Get_DevDesc>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d12e      	bne.n	8008cf8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	7919      	ldrb	r1, [r3, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008cbe:	9202      	str	r2, [sp, #8]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	9201      	str	r2, [sp, #4]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2280      	movs	r2, #128	@ 0x80
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f001 f8dc 	bl	8009e88 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	7959      	ldrb	r1, [r3, #5]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ce4:	9202      	str	r2, [sp, #8]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	9201      	str	r2, [sp, #4]
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	4603      	mov	r3, r0
 8008cee:	2200      	movs	r2, #0
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 f8c9 	bl	8009e88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008cf6:	e173      	b.n	8008fe0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	f040 8170 	bne.w	8008fe0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d06:	3301      	adds	r3, #1
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d903      	bls.n	8008d22 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	220d      	movs	r2, #13
 8008d1e:	701a      	strb	r2, [r3, #0]
      break;
 8008d20:	e15e      	b.n	8008fe0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	795b      	ldrb	r3, [r3, #5]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 f8fd 	bl	8009f28 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	791b      	ldrb	r3, [r3, #4]
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 f8f7 	bl	8009f28 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	701a      	strb	r2, [r3, #0]
      break;
 8008d40:	e14e      	b.n	8008fe0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008d42:	2112      	movs	r1, #18
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f9ef 	bl	8009128 <USBH_Get_DevDesc>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d103      	bne.n	8008d5c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d5a:	e143      	b.n	8008fe4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	f040 8140 	bne.w	8008fe4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d903      	bls.n	8008d86 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	220d      	movs	r2, #13
 8008d82:	701a      	strb	r2, [r3, #0]
      break;
 8008d84:	e12e      	b.n	8008fe4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	795b      	ldrb	r3, [r3, #5]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 f8cb 	bl	8009f28 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	791b      	ldrb	r3, [r3, #4]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 f8c5 	bl	8009f28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
      break;
 8008daa:	e11b      	b.n	8008fe4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008dac:	2101      	movs	r1, #1
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fa79 	bl	80092a6 <USBH_SetAddress>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d130      	bne.n	8008e20 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008dbe:	2002      	movs	r0, #2
 8008dc0:	f006 fa51 	bl	800f266 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2203      	movs	r2, #3
 8008dd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	7919      	ldrb	r1, [r3, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008de6:	9202      	str	r2, [sp, #8]
 8008de8:	2200      	movs	r2, #0
 8008dea:	9201      	str	r2, [sp, #4]
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	4603      	mov	r3, r0
 8008df0:	2280      	movs	r2, #128	@ 0x80
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 f848 	bl	8009e88 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	7959      	ldrb	r1, [r3, #5]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e0c:	9202      	str	r2, [sp, #8]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	9201      	str	r2, [sp, #4]
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	4603      	mov	r3, r0
 8008e16:	2200      	movs	r2, #0
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 f835 	bl	8009e88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e1e:	e0e3      	b.n	8008fe8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	f040 80e0 	bne.w	8008fe8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	220d      	movs	r2, #13
 8008e2c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	705a      	strb	r2, [r3, #1]
      break;
 8008e34:	e0d8      	b.n	8008fe8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008e36:	2109      	movs	r1, #9
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f9a1 	bl	8009180 <USBH_Get_CfgDesc>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d103      	bne.n	8008e50 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2204      	movs	r2, #4
 8008e4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e4e:	e0cd      	b.n	8008fec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	f040 80ca 	bne.w	8008fec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e5e:	3301      	adds	r3, #1
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d903      	bls.n	8008e7a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	220d      	movs	r2, #13
 8008e76:	701a      	strb	r2, [r3, #0]
      break;
 8008e78:	e0b8      	b.n	8008fec <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	795b      	ldrb	r3, [r3, #5]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 f851 	bl	8009f28 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	791b      	ldrb	r3, [r3, #4]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 f84b 	bl	8009f28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	701a      	strb	r2, [r3, #0]
      break;
 8008e9e:	e0a5      	b.n	8008fec <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f969 	bl	8009180 <USBH_Get_CfgDesc>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d103      	bne.n	8008ec0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2205      	movs	r2, #5
 8008ebc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ebe:	e097      	b.n	8008ff0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	f040 8094 	bne.w	8008ff0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ece:	3301      	adds	r3, #1
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d903      	bls.n	8008eea <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	220d      	movs	r2, #13
 8008ee6:	701a      	strb	r2, [r3, #0]
      break;
 8008ee8:	e082      	b.n	8008ff0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	795b      	ldrb	r3, [r3, #5]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 f819 	bl	8009f28 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	791b      	ldrb	r3, [r3, #4]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 f813 	bl	8009f28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	701a      	strb	r2, [r3, #0]
      break;
 8008f0e:	e06f      	b.n	8008ff0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d019      	beq.n	8008f4e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f26:	23ff      	movs	r3, #255	@ 0xff
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f953 	bl	80091d4 <USBH_Get_StringDesc>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d103      	bne.n	8008f40 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2206      	movs	r2, #6
 8008f3c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f3e:	e059      	b.n	8008ff4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d156      	bne.n	8008ff4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2206      	movs	r2, #6
 8008f4a:	705a      	strb	r2, [r3, #1]
      break;
 8008f4c:	e052      	b.n	8008ff4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2206      	movs	r2, #6
 8008f52:	705a      	strb	r2, [r3, #1]
      break;
 8008f54:	e04e      	b.n	8008ff4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d019      	beq.n	8008f94 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f6c:	23ff      	movs	r3, #255	@ 0xff
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f930 	bl	80091d4 <USBH_Get_StringDesc>
 8008f74:	4603      	mov	r3, r0
 8008f76:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d103      	bne.n	8008f86 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2207      	movs	r2, #7
 8008f82:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f84:	e038      	b.n	8008ff8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d135      	bne.n	8008ff8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2207      	movs	r2, #7
 8008f90:	705a      	strb	r2, [r3, #1]
      break;
 8008f92:	e031      	b.n	8008ff8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2207      	movs	r2, #7
 8008f98:	705a      	strb	r2, [r3, #1]
      break;
 8008f9a:	e02d      	b.n	8008ff8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d017      	beq.n	8008fd6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008fb2:	23ff      	movs	r3, #255	@ 0xff
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f90d 	bl	80091d4 <USBH_Get_StringDesc>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008fbe:	7bbb      	ldrb	r3, [r7, #14]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d102      	bne.n	8008fca <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008fc8:	e018      	b.n	8008ffc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d115      	bne.n	8008ffc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd4:	e012      	b.n	8008ffc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8008fda:	e00f      	b.n	8008ffc <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008fdc:	bf00      	nop
 8008fde:	e00e      	b.n	8008ffe <USBH_HandleEnum+0x3b6>
      break;
 8008fe0:	bf00      	nop
 8008fe2:	e00c      	b.n	8008ffe <USBH_HandleEnum+0x3b6>
      break;
 8008fe4:	bf00      	nop
 8008fe6:	e00a      	b.n	8008ffe <USBH_HandleEnum+0x3b6>
      break;
 8008fe8:	bf00      	nop
 8008fea:	e008      	b.n	8008ffe <USBH_HandleEnum+0x3b6>
      break;
 8008fec:	bf00      	nop
 8008fee:	e006      	b.n	8008ffe <USBH_HandleEnum+0x3b6>
      break;
 8008ff0:	bf00      	nop
 8008ff2:	e004      	b.n	8008ffe <USBH_HandleEnum+0x3b6>
      break;
 8008ff4:	bf00      	nop
 8008ff6:	e002      	b.n	8008ffe <USBH_HandleEnum+0x3b6>
      break;
 8008ff8:	bf00      	nop
 8008ffa:	e000      	b.n	8008ffe <USBH_HandleEnum+0x3b6>
      break;
 8008ffc:	bf00      	nop
  }
  return Status;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f804 	bl	800904a <USBH_HandleSof>
}
 8009042:	bf00      	nop
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b0b      	cmp	r3, #11
 800905a:	d10a      	bne.n	8009072 <USBH_HandleSof+0x28>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	4798      	blx	r3
  }
}
 8009072:	bf00      	nop
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800908a:	bf00      	nop
}
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80090a6:	bf00      	nop
}
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f005 ff3a 	bl	800ef7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	791b      	ldrb	r3, [r3, #4]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 ff0b 	bl	8009f28 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	795b      	ldrb	r3, [r3, #5]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 ff05 	bl	8009f28 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af02      	add	r7, sp, #8
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009134:	887b      	ldrh	r3, [r7, #2]
 8009136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800913a:	d901      	bls.n	8009140 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800913c:	2303      	movs	r3, #3
 800913e:	e01b      	b.n	8009178 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009146:	887b      	ldrh	r3, [r7, #2]
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	4613      	mov	r3, r2
 800914c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009150:	2100      	movs	r1, #0
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f872 	bl	800923c <USBH_GetDescriptor>
 8009158:	4603      	mov	r3, r0
 800915a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800915c:	7bfb      	ldrb	r3, [r7, #15]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d109      	bne.n	8009176 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009168:	887a      	ldrh	r2, [r7, #2]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f929 	bl	80093c4 <USBH_ParseDevDesc>
 8009172:	4603      	mov	r3, r0
 8009174:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af02      	add	r7, sp, #8
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	331c      	adds	r3, #28
 8009190:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009192:	887b      	ldrh	r3, [r7, #2]
 8009194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009198:	d901      	bls.n	800919e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800919a:	2303      	movs	r3, #3
 800919c:	e016      	b.n	80091cc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800919e:	887b      	ldrh	r3, [r7, #2]
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091a8:	2100      	movs	r1, #0
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f846 	bl	800923c <USBH_GetDescriptor>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d107      	bne.n	80091ca <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80091ba:	887b      	ldrh	r3, [r7, #2]
 80091bc:	461a      	mov	r2, r3
 80091be:	68b9      	ldr	r1, [r7, #8]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f9af 	bl	8009524 <USBH_ParseCfgDesc>
 80091c6:	4603      	mov	r3, r0
 80091c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af02      	add	r7, sp, #8
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	607a      	str	r2, [r7, #4]
 80091de:	461a      	mov	r2, r3
 80091e0:	460b      	mov	r3, r1
 80091e2:	72fb      	strb	r3, [r7, #11]
 80091e4:	4613      	mov	r3, r2
 80091e6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80091e8:	893b      	ldrh	r3, [r7, #8]
 80091ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ee:	d802      	bhi.n	80091f6 <USBH_Get_StringDesc+0x22>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e01c      	b.n	8009234 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80091fa:	7afb      	ldrb	r3, [r7, #11]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009202:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800920a:	893b      	ldrh	r3, [r7, #8]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	460b      	mov	r3, r1
 8009210:	2100      	movs	r1, #0
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f812 	bl	800923c <USBH_GetDescriptor>
 8009218:	4603      	mov	r3, r0
 800921a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d107      	bne.n	8009232 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009228:	893a      	ldrh	r2, [r7, #8]
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fb8d 	bl	800994c <USBH_ParseStringDesc>
  }

  return status;
 8009232:	7dfb      	ldrb	r3, [r7, #23]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	607b      	str	r3, [r7, #4]
 8009246:	460b      	mov	r3, r1
 8009248:	72fb      	strb	r3, [r7, #11]
 800924a:	4613      	mov	r3, r2
 800924c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	789b      	ldrb	r3, [r3, #2]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d11c      	bne.n	8009290 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009256:	7afb      	ldrb	r3, [r7, #11]
 8009258:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800925c:	b2da      	uxtb	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2206      	movs	r2, #6
 8009266:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	893a      	ldrh	r2, [r7, #8]
 800926c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800926e:	893b      	ldrh	r3, [r7, #8]
 8009270:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009274:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009278:	d104      	bne.n	8009284 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f240 4209 	movw	r2, #1033	@ 0x409
 8009280:	829a      	strh	r2, [r3, #20]
 8009282:	e002      	b.n	800928a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	8b3a      	ldrh	r2, [r7, #24]
 800928e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009290:	8b3b      	ldrh	r3, [r7, #24]
 8009292:	461a      	mov	r2, r3
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 fba5 	bl	80099e6 <USBH_CtlReq>
 800929c:	4603      	mov	r3, r0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	789b      	ldrb	r3, [r3, #2]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d10f      	bne.n	80092da <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2205      	movs	r2, #5
 80092c4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092da:	2200      	movs	r2, #0
 80092dc:	2100      	movs	r1, #0
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fb81 	bl	80099e6 <USBH_CtlReq>
 80092e4:	4603      	mov	r3, r0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	460b      	mov	r3, r1
 80092f8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	789b      	ldrb	r3, [r3, #2]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d10e      	bne.n	8009320 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2209      	movs	r2, #9
 800930c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	887a      	ldrh	r2, [r7, #2]
 8009312:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009320:	2200      	movs	r2, #0
 8009322:	2100      	movs	r1, #0
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fb5e 	bl	80099e6 <USBH_CtlReq>
 800932a:	4603      	mov	r3, r0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	789b      	ldrb	r3, [r3, #2]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d10f      	bne.n	8009368 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2203      	movs	r2, #3
 8009352:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	b29a      	uxth	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009368:	2200      	movs	r2, #0
 800936a:	2100      	movs	r1, #0
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fb3a 	bl	80099e6 <USBH_CtlReq>
 8009372:	4603      	mov	r3, r0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	789b      	ldrb	r3, [r3, #2]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d10f      	bne.n	80093b0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80093b0:	2200      	movs	r2, #0
 80093b2:	2100      	movs	r1, #0
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fb16 	bl	80099e6 <USBH_CtlReq>
 80093ba:	4603      	mov	r3, r0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b087      	sub	sp, #28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	4613      	mov	r3, r2
 80093d0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80093d8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80093e4:	2302      	movs	r3, #2
 80093e6:	e094      	b.n	8009512 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	781a      	ldrb	r2, [r3, #0]
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	785a      	ldrb	r2, [r3, #1]
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	3302      	adds	r3, #2
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	3303      	adds	r3, #3
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	021b      	lsls	r3, r3, #8
 8009408:	b29b      	uxth	r3, r3
 800940a:	4313      	orrs	r3, r2
 800940c:	b29a      	uxth	r2, r3
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	791a      	ldrb	r2, [r3, #4]
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	795a      	ldrb	r2, [r3, #5]
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	799a      	ldrb	r2, [r3, #6]
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	79da      	ldrb	r2, [r3, #7]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009442:	2b01      	cmp	r3, #1
 8009444:	d11b      	bne.n	800947e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	79db      	ldrb	r3, [r3, #7]
 800944a:	2b20      	cmp	r3, #32
 800944c:	dc0f      	bgt.n	800946e <USBH_ParseDevDesc+0xaa>
 800944e:	2b08      	cmp	r3, #8
 8009450:	db0f      	blt.n	8009472 <USBH_ParseDevDesc+0xae>
 8009452:	3b08      	subs	r3, #8
 8009454:	4a32      	ldr	r2, [pc, #200]	@ (8009520 <USBH_ParseDevDesc+0x15c>)
 8009456:	fa22 f303 	lsr.w	r3, r2, r3
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	bf14      	ite	ne
 8009462:	2301      	movne	r3, #1
 8009464:	2300      	moveq	r3, #0
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d106      	bne.n	800947a <USBH_ParseDevDesc+0xb6>
 800946c:	e001      	b.n	8009472 <USBH_ParseDevDesc+0xae>
 800946e:	2b40      	cmp	r3, #64	@ 0x40
 8009470:	d003      	beq.n	800947a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2208      	movs	r2, #8
 8009476:	71da      	strb	r2, [r3, #7]
        break;
 8009478:	e000      	b.n	800947c <USBH_ParseDevDesc+0xb8>
        break;
 800947a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800947c:	e00e      	b.n	800949c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009484:	2b02      	cmp	r3, #2
 8009486:	d107      	bne.n	8009498 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	79db      	ldrb	r3, [r3, #7]
 800948c:	2b08      	cmp	r3, #8
 800948e:	d005      	beq.n	800949c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2208      	movs	r2, #8
 8009494:	71da      	strb	r2, [r3, #7]
 8009496:	e001      	b.n	800949c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009498:	2303      	movs	r3, #3
 800949a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	2b08      	cmp	r3, #8
 80094a0:	d936      	bls.n	8009510 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	3308      	adds	r3, #8
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	3309      	adds	r3, #9
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	021b      	lsls	r3, r3, #8
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	4313      	orrs	r3, r2
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	330a      	adds	r3, #10
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	330b      	adds	r3, #11
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	021b      	lsls	r3, r3, #8
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	4313      	orrs	r3, r2
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	330c      	adds	r3, #12
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	330d      	adds	r3, #13
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	021b      	lsls	r3, r3, #8
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	4313      	orrs	r3, r2
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	7b9a      	ldrb	r2, [r3, #14]
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	7bda      	ldrb	r2, [r3, #15]
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	7c1a      	ldrb	r2, [r3, #16]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	7c5a      	ldrb	r2, [r3, #17]
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
}
 8009512:	4618      	mov	r0, r3
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	01000101 	.word	0x01000101

08009524 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b08c      	sub	sp, #48	@ 0x30
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	4613      	mov	r3, r2
 8009530:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009538:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009552:	2302      	movs	r3, #2
 8009554:	e0da      	b.n	800970c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800955a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b09      	cmp	r3, #9
 8009560:	d002      	beq.n	8009568 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009564:	2209      	movs	r2, #9
 8009566:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	781a      	ldrb	r2, [r3, #0]
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	785a      	ldrb	r2, [r3, #1]
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	3302      	adds	r3, #2
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	3303      	adds	r3, #3
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	021b      	lsls	r3, r3, #8
 8009588:	b29b      	uxth	r3, r3
 800958a:	4313      	orrs	r3, r2
 800958c:	b29b      	uxth	r3, r3
 800958e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009592:	bf28      	it	cs
 8009594:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009598:	b29a      	uxth	r2, r3
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	791a      	ldrb	r2, [r3, #4]
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	795a      	ldrb	r2, [r3, #5]
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	799a      	ldrb	r2, [r3, #6]
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	79da      	ldrb	r2, [r3, #7]
 80095ba:	6a3b      	ldr	r3, [r7, #32]
 80095bc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	7a1a      	ldrb	r2, [r3, #8]
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	2b09      	cmp	r3, #9
 80095ca:	f240 809d 	bls.w	8009708 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80095ce:	2309      	movs	r3, #9
 80095d0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80095d6:	e081      	b.n	80096dc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80095d8:	f107 0316 	add.w	r3, r7, #22
 80095dc:	4619      	mov	r1, r3
 80095de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095e0:	f000 f9e7 	bl	80099b2 <USBH_GetNextDesc>
 80095e4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80095e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e8:	785b      	ldrb	r3, [r3, #1]
 80095ea:	2b04      	cmp	r3, #4
 80095ec:	d176      	bne.n	80096dc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80095ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b09      	cmp	r3, #9
 80095f4:	d002      	beq.n	80095fc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80095f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f8:	2209      	movs	r2, #9
 80095fa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80095fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009600:	221a      	movs	r2, #26
 8009602:	fb02 f303 	mul.w	r3, r2, r3
 8009606:	3308      	adds	r3, #8
 8009608:	6a3a      	ldr	r2, [r7, #32]
 800960a:	4413      	add	r3, r2
 800960c:	3302      	adds	r3, #2
 800960e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009612:	69f8      	ldr	r0, [r7, #28]
 8009614:	f000 f87e 	bl	8009714 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009622:	e043      	b.n	80096ac <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009624:	f107 0316 	add.w	r3, r7, #22
 8009628:	4619      	mov	r1, r3
 800962a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800962c:	f000 f9c1 	bl	80099b2 <USBH_GetNextDesc>
 8009630:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009634:	785b      	ldrb	r3, [r3, #1]
 8009636:	2b05      	cmp	r3, #5
 8009638:	d138      	bne.n	80096ac <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	795b      	ldrb	r3, [r3, #5]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d113      	bne.n	800966a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009646:	2b02      	cmp	r3, #2
 8009648:	d003      	beq.n	8009652 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	799b      	ldrb	r3, [r3, #6]
 800964e:	2b03      	cmp	r3, #3
 8009650:	d10b      	bne.n	800966a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	79db      	ldrb	r3, [r3, #7]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10b      	bne.n	8009672 <USBH_ParseCfgDesc+0x14e>
 800965a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b09      	cmp	r3, #9
 8009660:	d007      	beq.n	8009672 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009664:	2209      	movs	r2, #9
 8009666:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009668:	e003      	b.n	8009672 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800966a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966c:	2207      	movs	r2, #7
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	e000      	b.n	8009674 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009672:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009678:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800967c:	3201      	adds	r2, #1
 800967e:	00d2      	lsls	r2, r2, #3
 8009680:	211a      	movs	r1, #26
 8009682:	fb01 f303 	mul.w	r3, r1, r3
 8009686:	4413      	add	r3, r2
 8009688:	3308      	adds	r3, #8
 800968a:	6a3a      	ldr	r2, [r7, #32]
 800968c:	4413      	add	r3, r2
 800968e:	3304      	adds	r3, #4
 8009690:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009694:	69b9      	ldr	r1, [r7, #24]
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 f870 	bl	800977c <USBH_ParseEPDesc>
 800969c:	4603      	mov	r3, r0
 800969e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80096a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096a6:	3301      	adds	r3, #1
 80096a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	791b      	ldrb	r3, [r3, #4]
 80096b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d204      	bcs.n	80096c2 <USBH_ParseCfgDesc+0x19e>
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	885a      	ldrh	r2, [r3, #2]
 80096bc:	8afb      	ldrh	r3, [r7, #22]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d8b0      	bhi.n	8009624 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	791b      	ldrb	r3, [r3, #4]
 80096c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d201      	bcs.n	80096d2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e01c      	b.n	800970c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80096d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096d6:	3301      	adds	r3, #1
 80096d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80096dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d805      	bhi.n	80096f0 <USBH_ParseCfgDesc+0x1cc>
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	885a      	ldrh	r2, [r3, #2]
 80096e8:	8afb      	ldrh	r3, [r7, #22]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	f63f af74 	bhi.w	80095d8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	791b      	ldrb	r3, [r3, #4]
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	bf28      	it	cs
 80096f8:	2302      	movcs	r3, #2
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009700:	429a      	cmp	r2, r3
 8009702:	d201      	bcs.n	8009708 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009704:	2303      	movs	r3, #3
 8009706:	e001      	b.n	800970c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009708:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800970c:	4618      	mov	r0, r3
 800970e:	3730      	adds	r7, #48	@ 0x30
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	781a      	ldrb	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	785a      	ldrb	r2, [r3, #1]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	789a      	ldrb	r2, [r3, #2]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	78da      	ldrb	r2, [r3, #3]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	3304      	adds	r3, #4
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b02      	cmp	r3, #2
 8009746:	bf28      	it	cs
 8009748:	2302      	movcs	r3, #2
 800974a:	b2da      	uxtb	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	795a      	ldrb	r2, [r3, #5]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	799a      	ldrb	r2, [r3, #6]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	79da      	ldrb	r2, [r3, #7]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	7a1a      	ldrb	r2, [r3, #8]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	721a      	strb	r2, [r3, #8]
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	781a      	ldrb	r2, [r3, #0]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	785a      	ldrb	r2, [r3, #1]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	789a      	ldrb	r2, [r3, #2]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	78da      	ldrb	r2, [r3, #3]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3304      	adds	r3, #4
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3305      	adds	r3, #5
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	021b      	lsls	r3, r3, #8
 80097bc:	b29b      	uxth	r3, r3
 80097be:	4313      	orrs	r3, r2
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	799a      	ldrb	r2, [r3, #6]
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	889b      	ldrh	r3, [r3, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80097da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097de:	d804      	bhi.n	80097ea <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80097e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097e8:	d901      	bls.n	80097ee <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80097ea:	2303      	movs	r3, #3
 80097ec:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d136      	bne.n	8009866 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	78db      	ldrb	r3, [r3, #3]
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d108      	bne.n	8009816 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	889b      	ldrh	r3, [r3, #4]
 8009808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800980c:	f240 8097 	bls.w	800993e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009810:	2303      	movs	r3, #3
 8009812:	75fb      	strb	r3, [r7, #23]
 8009814:	e093      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	78db      	ldrb	r3, [r3, #3]
 800981a:	f003 0303 	and.w	r3, r3, #3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d107      	bne.n	8009832 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	889b      	ldrh	r3, [r3, #4]
 8009826:	2b40      	cmp	r3, #64	@ 0x40
 8009828:	f240 8089 	bls.w	800993e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800982c:	2303      	movs	r3, #3
 800982e:	75fb      	strb	r3, [r7, #23]
 8009830:	e085      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	78db      	ldrb	r3, [r3, #3]
 8009836:	f003 0303 	and.w	r3, r3, #3
 800983a:	2b01      	cmp	r3, #1
 800983c:	d005      	beq.n	800984a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	78db      	ldrb	r3, [r3, #3]
 8009842:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009846:	2b03      	cmp	r3, #3
 8009848:	d10a      	bne.n	8009860 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	799b      	ldrb	r3, [r3, #6]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <USBH_ParseEPDesc+0xde>
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	799b      	ldrb	r3, [r3, #6]
 8009856:	2b10      	cmp	r3, #16
 8009858:	d970      	bls.n	800993c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800985a:	2303      	movs	r3, #3
 800985c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800985e:	e06d      	b.n	800993c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009860:	2303      	movs	r3, #3
 8009862:	75fb      	strb	r3, [r7, #23]
 8009864:	e06b      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800986c:	2b01      	cmp	r3, #1
 800986e:	d13c      	bne.n	80098ea <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	78db      	ldrb	r3, [r3, #3]
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	2b02      	cmp	r3, #2
 800987a:	d005      	beq.n	8009888 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	78db      	ldrb	r3, [r3, #3]
 8009880:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009884:	2b00      	cmp	r3, #0
 8009886:	d106      	bne.n	8009896 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	889b      	ldrh	r3, [r3, #4]
 800988c:	2b40      	cmp	r3, #64	@ 0x40
 800988e:	d956      	bls.n	800993e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009890:	2303      	movs	r3, #3
 8009892:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009894:	e053      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	78db      	ldrb	r3, [r3, #3]
 800989a:	f003 0303 	and.w	r3, r3, #3
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d10e      	bne.n	80098c0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	799b      	ldrb	r3, [r3, #6]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d007      	beq.n	80098ba <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80098ae:	2b10      	cmp	r3, #16
 80098b0:	d803      	bhi.n	80098ba <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80098b6:	2b40      	cmp	r3, #64	@ 0x40
 80098b8:	d941      	bls.n	800993e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80098ba:	2303      	movs	r3, #3
 80098bc:	75fb      	strb	r3, [r7, #23]
 80098be:	e03e      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	78db      	ldrb	r3, [r3, #3]
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d10b      	bne.n	80098e4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	799b      	ldrb	r3, [r3, #6]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d004      	beq.n	80098de <USBH_ParseEPDesc+0x162>
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	889b      	ldrh	r3, [r3, #4]
 80098d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098dc:	d32f      	bcc.n	800993e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80098de:	2303      	movs	r3, #3
 80098e0:	75fb      	strb	r3, [r7, #23]
 80098e2:	e02c      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80098e4:	2303      	movs	r3, #3
 80098e6:	75fb      	strb	r3, [r7, #23]
 80098e8:	e029      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d120      	bne.n	8009936 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	78db      	ldrb	r3, [r3, #3]
 80098f8:	f003 0303 	and.w	r3, r3, #3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d106      	bne.n	800990e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	889b      	ldrh	r3, [r3, #4]
 8009904:	2b08      	cmp	r3, #8
 8009906:	d01a      	beq.n	800993e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009908:	2303      	movs	r3, #3
 800990a:	75fb      	strb	r3, [r7, #23]
 800990c:	e017      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	78db      	ldrb	r3, [r3, #3]
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	2b03      	cmp	r3, #3
 8009918:	d10a      	bne.n	8009930 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	799b      	ldrb	r3, [r3, #6]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <USBH_ParseEPDesc+0x1ae>
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	889b      	ldrh	r3, [r3, #4]
 8009926:	2b08      	cmp	r3, #8
 8009928:	d909      	bls.n	800993e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800992a:	2303      	movs	r3, #3
 800992c:	75fb      	strb	r3, [r7, #23]
 800992e:	e006      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009930:	2303      	movs	r3, #3
 8009932:	75fb      	strb	r3, [r7, #23]
 8009934:	e003      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009936:	2303      	movs	r3, #3
 8009938:	75fb      	strb	r3, [r7, #23]
 800993a:	e000      	b.n	800993e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800993c:	bf00      	nop
  }

  return status;
 800993e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009940:	4618      	mov	r0, r3
 8009942:	371c      	adds	r7, #28
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800994c:	b480      	push	{r7}
 800994e:	b087      	sub	sp, #28
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	4613      	mov	r3, r2
 8009958:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3301      	adds	r3, #1
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b03      	cmp	r3, #3
 8009962:	d120      	bne.n	80099a6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	1e9a      	subs	r2, r3, #2
 800996a:	88fb      	ldrh	r3, [r7, #6]
 800996c:	4293      	cmp	r3, r2
 800996e:	bf28      	it	cs
 8009970:	4613      	movcs	r3, r2
 8009972:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3302      	adds	r3, #2
 8009978:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800997a:	2300      	movs	r3, #0
 800997c:	82fb      	strh	r3, [r7, #22]
 800997e:	e00b      	b.n	8009998 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009980:	8afb      	ldrh	r3, [r7, #22]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	4413      	add	r3, r2
 8009986:	781a      	ldrb	r2, [r3, #0]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	3301      	adds	r3, #1
 8009990:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009992:	8afb      	ldrh	r3, [r7, #22]
 8009994:	3302      	adds	r3, #2
 8009996:	82fb      	strh	r3, [r7, #22]
 8009998:	8afa      	ldrh	r2, [r7, #22]
 800999a:	8abb      	ldrh	r3, [r7, #20]
 800999c:	429a      	cmp	r2, r3
 800999e:	d3ef      	bcc.n	8009980 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2200      	movs	r2, #0
 80099a4:	701a      	strb	r2, [r3, #0]
  }
}
 80099a6:	bf00      	nop
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	7812      	ldrb	r2, [r2, #0]
 80099c4:	4413      	add	r3, r2
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4413      	add	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099d8:	68fb      	ldr	r3, [r7, #12]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	4613      	mov	r3, r2
 80099f2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80099f4:	2301      	movs	r3, #1
 80099f6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	789b      	ldrb	r3, [r3, #2]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d002      	beq.n	8009a06 <USBH_CtlReq+0x20>
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d00f      	beq.n	8009a24 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009a04:	e027      	b.n	8009a56 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	88fa      	ldrh	r2, [r7, #6]
 8009a10:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	75fb      	strb	r3, [r7, #23]
      break;
 8009a22:	e018      	b.n	8009a56 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f000 f81b 	bl	8009a60 <USBH_HandleControl>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <USBH_CtlReq+0x54>
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d106      	bne.n	8009a48 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	761a      	strb	r2, [r3, #24]
      break;
 8009a46:	e005      	b.n	8009a54 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009a48:	7dfb      	ldrb	r3, [r7, #23]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d102      	bne.n	8009a54 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2201      	movs	r2, #1
 8009a52:	709a      	strb	r2, [r3, #2]
      break;
 8009a54:	bf00      	nop
  }
  return status;
 8009a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af02      	add	r7, sp, #8
 8009a66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	7e1b      	ldrb	r3, [r3, #24]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	2b0a      	cmp	r3, #10
 8009a78:	f200 8156 	bhi.w	8009d28 <USBH_HandleControl+0x2c8>
 8009a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a84 <USBH_HandleControl+0x24>)
 8009a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a82:	bf00      	nop
 8009a84:	08009ab1 	.word	0x08009ab1
 8009a88:	08009acb 	.word	0x08009acb
 8009a8c:	08009b35 	.word	0x08009b35
 8009a90:	08009b5b 	.word	0x08009b5b
 8009a94:	08009b93 	.word	0x08009b93
 8009a98:	08009bbd 	.word	0x08009bbd
 8009a9c:	08009c0f 	.word	0x08009c0f
 8009aa0:	08009c31 	.word	0x08009c31
 8009aa4:	08009c6d 	.word	0x08009c6d
 8009aa8:	08009c93 	.word	0x08009c93
 8009aac:	08009cd1 	.word	0x08009cd1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f103 0110 	add.w	r1, r3, #16
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	795b      	ldrb	r3, [r3, #5]
 8009aba:	461a      	mov	r2, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f943 	bl	8009d48 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	761a      	strb	r2, [r3, #24]
      break;
 8009ac8:	e139      	b.n	8009d3e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	795b      	ldrb	r3, [r3, #5]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f005 fb41 	bl	800f158 <USBH_LL_GetURBState>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d11e      	bne.n	8009b1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	7c1b      	ldrb	r3, [r3, #16]
 8009ae4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009ae8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	8adb      	ldrh	r3, [r3, #22]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00a      	beq.n	8009b08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009af2:	7b7b      	ldrb	r3, [r7, #13]
 8009af4:	2b80      	cmp	r3, #128	@ 0x80
 8009af6:	d103      	bne.n	8009b00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2203      	movs	r2, #3
 8009afc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009afe:	e115      	b.n	8009d2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2205      	movs	r2, #5
 8009b04:	761a      	strb	r2, [r3, #24]
      break;
 8009b06:	e111      	b.n	8009d2c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009b08:	7b7b      	ldrb	r3, [r7, #13]
 8009b0a:	2b80      	cmp	r3, #128	@ 0x80
 8009b0c:	d103      	bne.n	8009b16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2209      	movs	r2, #9
 8009b12:	761a      	strb	r2, [r3, #24]
      break;
 8009b14:	e10a      	b.n	8009d2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2207      	movs	r2, #7
 8009b1a:	761a      	strb	r2, [r3, #24]
      break;
 8009b1c:	e106      	b.n	8009d2c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d003      	beq.n	8009b2c <USBH_HandleControl+0xcc>
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	f040 8100 	bne.w	8009d2c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	220b      	movs	r2, #11
 8009b30:	761a      	strb	r2, [r3, #24]
      break;
 8009b32:	e0fb      	b.n	8009d2c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6899      	ldr	r1, [r3, #8]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	899a      	ldrh	r2, [r3, #12]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	791b      	ldrb	r3, [r3, #4]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f93a 	bl	8009dc6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2204      	movs	r2, #4
 8009b56:	761a      	strb	r2, [r3, #24]
      break;
 8009b58:	e0f1      	b.n	8009d3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	791b      	ldrb	r3, [r3, #4]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f005 faf9 	bl	800f158 <USBH_LL_GetURBState>
 8009b66:	4603      	mov	r3, r0
 8009b68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b6a:	7bbb      	ldrb	r3, [r7, #14]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d102      	bne.n	8009b76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2209      	movs	r2, #9
 8009b74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b05      	cmp	r3, #5
 8009b7a:	d102      	bne.n	8009b82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b80:	e0d6      	b.n	8009d30 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	f040 80d3 	bne.w	8009d30 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	220b      	movs	r2, #11
 8009b8e:	761a      	strb	r2, [r3, #24]
      break;
 8009b90:	e0ce      	b.n	8009d30 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6899      	ldr	r1, [r3, #8]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	899a      	ldrh	r2, [r3, #12]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	795b      	ldrb	r3, [r3, #5]
 8009b9e:	2001      	movs	r0, #1
 8009ba0:	9000      	str	r0, [sp, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f8ea 	bl	8009d7c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2206      	movs	r2, #6
 8009bb8:	761a      	strb	r2, [r3, #24]
      break;
 8009bba:	e0c0      	b.n	8009d3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	795b      	ldrb	r3, [r3, #5]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f005 fac8 	bl	800f158 <USBH_LL_GetURBState>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bcc:	7bbb      	ldrb	r3, [r7, #14]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d103      	bne.n	8009bda <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2207      	movs	r2, #7
 8009bd6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009bd8:	e0ac      	b.n	8009d34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b05      	cmp	r3, #5
 8009bde:	d105      	bne.n	8009bec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	220c      	movs	r2, #12
 8009be4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009be6:	2303      	movs	r3, #3
 8009be8:	73fb      	strb	r3, [r7, #15]
      break;
 8009bea:	e0a3      	b.n	8009d34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d103      	bne.n	8009bfa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2205      	movs	r2, #5
 8009bf6:	761a      	strb	r2, [r3, #24]
      break;
 8009bf8:	e09c      	b.n	8009d34 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	f040 8099 	bne.w	8009d34 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	220b      	movs	r2, #11
 8009c06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c0c:	e092      	b.n	8009d34 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	791b      	ldrb	r3, [r3, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	2100      	movs	r1, #0
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f8d5 	bl	8009dc6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2208      	movs	r2, #8
 8009c2c:	761a      	strb	r2, [r3, #24]

      break;
 8009c2e:	e086      	b.n	8009d3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	791b      	ldrb	r3, [r3, #4]
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f005 fa8e 	bl	800f158 <USBH_LL_GetURBState>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d105      	bne.n	8009c52 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	220d      	movs	r2, #13
 8009c4a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c50:	e072      	b.n	8009d38 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	d103      	bne.n	8009c60 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	220b      	movs	r2, #11
 8009c5c:	761a      	strb	r2, [r3, #24]
      break;
 8009c5e:	e06b      	b.n	8009d38 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	2b05      	cmp	r3, #5
 8009c64:	d168      	bne.n	8009d38 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009c66:	2303      	movs	r3, #3
 8009c68:	73fb      	strb	r3, [r7, #15]
      break;
 8009c6a:	e065      	b.n	8009d38 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	795b      	ldrb	r3, [r3, #5]
 8009c70:	2201      	movs	r2, #1
 8009c72:	9200      	str	r2, [sp, #0]
 8009c74:	2200      	movs	r2, #0
 8009c76:	2100      	movs	r1, #0
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f87f 	bl	8009d7c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	220a      	movs	r2, #10
 8009c8e:	761a      	strb	r2, [r3, #24]
      break;
 8009c90:	e055      	b.n	8009d3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	795b      	ldrb	r3, [r3, #5]
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f005 fa5d 	bl	800f158 <USBH_LL_GetURBState>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d105      	bne.n	8009cb4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	220d      	movs	r2, #13
 8009cb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009cb2:	e043      	b.n	8009d3c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d103      	bne.n	8009cc2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2209      	movs	r2, #9
 8009cbe:	761a      	strb	r2, [r3, #24]
      break;
 8009cc0:	e03c      	b.n	8009d3c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	d139      	bne.n	8009d3c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	220b      	movs	r2, #11
 8009ccc:	761a      	strb	r2, [r3, #24]
      break;
 8009cce:	e035      	b.n	8009d3c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	7e5b      	ldrb	r3, [r3, #25]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	765a      	strb	r2, [r3, #25]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	7e5b      	ldrb	r3, [r3, #25]
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d806      	bhi.n	8009cf2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009cf0:	e025      	b.n	8009d3e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009cf8:	2106      	movs	r1, #6
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	795b      	ldrb	r3, [r3, #5]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f90c 	bl	8009f28 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	791b      	ldrb	r3, [r3, #4]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f906 	bl	8009f28 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009d22:	2302      	movs	r3, #2
 8009d24:	73fb      	strb	r3, [r7, #15]
      break;
 8009d26:	e00a      	b.n	8009d3e <USBH_HandleControl+0x2de>

    default:
      break;
 8009d28:	bf00      	nop
 8009d2a:	e008      	b.n	8009d3e <USBH_HandleControl+0x2de>
      break;
 8009d2c:	bf00      	nop
 8009d2e:	e006      	b.n	8009d3e <USBH_HandleControl+0x2de>
      break;
 8009d30:	bf00      	nop
 8009d32:	e004      	b.n	8009d3e <USBH_HandleControl+0x2de>
      break;
 8009d34:	bf00      	nop
 8009d36:	e002      	b.n	8009d3e <USBH_HandleControl+0x2de>
      break;
 8009d38:	bf00      	nop
 8009d3a:	e000      	b.n	8009d3e <USBH_HandleControl+0x2de>
      break;
 8009d3c:	bf00      	nop
  }

  return status;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af04      	add	r7, sp, #16
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	4613      	mov	r3, r2
 8009d54:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d56:	79f9      	ldrb	r1, [r7, #7]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	9303      	str	r3, [sp, #12]
 8009d5c:	2308      	movs	r3, #8
 8009d5e:	9302      	str	r3, [sp, #8]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	2300      	movs	r3, #0
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f005 f9c2 	bl	800f0f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af04      	add	r7, sp, #16
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	4611      	mov	r1, r2
 8009d88:	461a      	mov	r2, r3
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	80fb      	strh	r3, [r7, #6]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009da0:	7979      	ldrb	r1, [r7, #5]
 8009da2:	7e3b      	ldrb	r3, [r7, #24]
 8009da4:	9303      	str	r3, [sp, #12]
 8009da6:	88fb      	ldrh	r3, [r7, #6]
 8009da8:	9302      	str	r3, [sp, #8]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	2301      	movs	r3, #1
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	2300      	movs	r3, #0
 8009db4:	2200      	movs	r2, #0
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f005 f99d 	bl	800f0f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b088      	sub	sp, #32
 8009dca:	af04      	add	r7, sp, #16
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	80fb      	strh	r3, [r7, #6]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ddc:	7979      	ldrb	r1, [r7, #5]
 8009dde:	2300      	movs	r3, #0
 8009de0:	9303      	str	r3, [sp, #12]
 8009de2:	88fb      	ldrh	r3, [r7, #6]
 8009de4:	9302      	str	r3, [sp, #8]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	2301      	movs	r3, #1
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	2300      	movs	r3, #0
 8009df0:	2201      	movs	r2, #1
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f005 f97f 	bl	800f0f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009df8:	2300      	movs	r3, #0

}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b088      	sub	sp, #32
 8009e06:	af04      	add	r7, sp, #16
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	461a      	mov	r2, r3
 8009e10:	460b      	mov	r3, r1
 8009e12:	80fb      	strh	r3, [r7, #6]
 8009e14:	4613      	mov	r3, r2
 8009e16:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e26:	7979      	ldrb	r1, [r7, #5]
 8009e28:	7e3b      	ldrb	r3, [r7, #24]
 8009e2a:	9303      	str	r3, [sp, #12]
 8009e2c:	88fb      	ldrh	r3, [r7, #6]
 8009e2e:	9302      	str	r3, [sp, #8]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	9301      	str	r3, [sp, #4]
 8009e34:	2301      	movs	r3, #1
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	2302      	movs	r3, #2
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f005 f95a 	bl	800f0f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af04      	add	r7, sp, #16
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	4611      	mov	r1, r2
 8009e58:	461a      	mov	r2, r3
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	80fb      	strh	r3, [r7, #6]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e62:	7979      	ldrb	r1, [r7, #5]
 8009e64:	2300      	movs	r3, #0
 8009e66:	9303      	str	r3, [sp, #12]
 8009e68:	88fb      	ldrh	r3, [r7, #6]
 8009e6a:	9302      	str	r3, [sp, #8]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	2301      	movs	r3, #1
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	2302      	movs	r3, #2
 8009e76:	2201      	movs	r2, #1
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f005 f93c 	bl	800f0f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af04      	add	r7, sp, #16
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	4608      	mov	r0, r1
 8009e92:	4611      	mov	r1, r2
 8009e94:	461a      	mov	r2, r3
 8009e96:	4603      	mov	r3, r0
 8009e98:	70fb      	strb	r3, [r7, #3]
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	70bb      	strb	r3, [r7, #2]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009ea2:	7878      	ldrb	r0, [r7, #1]
 8009ea4:	78ba      	ldrb	r2, [r7, #2]
 8009ea6:	78f9      	ldrb	r1, [r7, #3]
 8009ea8:	8b3b      	ldrh	r3, [r7, #24]
 8009eaa:	9302      	str	r3, [sp, #8]
 8009eac:	7d3b      	ldrb	r3, [r7, #20]
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	7c3b      	ldrb	r3, [r7, #16]
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f005 f8cf 	bl	800f05a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009ed2:	78fb      	ldrb	r3, [r7, #3]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f005 f8ee 	bl	800f0b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f836 	bl	8009f64 <USBH_GetFreePipe>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009efc:	89fb      	ldrh	r3, [r7, #14]
 8009efe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00a      	beq.n	8009f1c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009f06:	78fa      	ldrb	r2, [r7, #3]
 8009f08:	89fb      	ldrh	r3, [r7, #14]
 8009f0a:	f003 030f 	and.w	r3, r3, #15
 8009f0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	33e0      	adds	r3, #224	@ 0xe0
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	440b      	add	r3, r1
 8009f1a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009f1c:	89fb      	ldrh	r3, [r7, #14]
 8009f1e:	b2db      	uxtb	r3, r3
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009f34:	78fb      	ldrb	r3, [r7, #3]
 8009f36:	2b0f      	cmp	r3, #15
 8009f38:	d80d      	bhi.n	8009f56 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009f3a:	78fb      	ldrb	r3, [r7, #3]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	33e0      	adds	r3, #224	@ 0xe0
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	78fb      	ldrb	r3, [r7, #3]
 8009f48:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	33e0      	adds	r3, #224	@ 0xe0
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	440b      	add	r3, r1
 8009f54:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
 8009f74:	e00f      	b.n	8009f96 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	33e0      	adds	r3, #224	@ 0xe0
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d102      	bne.n	8009f90 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	e007      	b.n	8009fa0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
 8009f92:	3301      	adds	r3, #1
 8009f94:	73fb      	strb	r3, [r7, #15]
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	2b0f      	cmp	r3, #15
 8009f9a:	d9ec      	bls.n	8009f76 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009f9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	4a08      	ldr	r2, [pc, #32]	@ (8009fdc <disk_status+0x30>)
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	79fa      	ldrb	r2, [r7, #7]
 8009fc4:	4905      	ldr	r1, [pc, #20]	@ (8009fdc <disk_status+0x30>)
 8009fc6:	440a      	add	r2, r1
 8009fc8:	7a12      	ldrb	r2, [r2, #8]
 8009fca:	4610      	mov	r0, r2
 8009fcc:	4798      	blx	r3
 8009fce:	4603      	mov	r3, r0
 8009fd0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20001a50 	.word	0x20001a50

08009fe0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009fee:	79fb      	ldrb	r3, [r7, #7]
 8009ff0:	4a0e      	ldr	r2, [pc, #56]	@ (800a02c <disk_initialize+0x4c>)
 8009ff2:	5cd3      	ldrb	r3, [r2, r3]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d114      	bne.n	800a022 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ff8:	79fb      	ldrb	r3, [r7, #7]
 8009ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800a02c <disk_initialize+0x4c>)
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	79fa      	ldrb	r2, [r7, #7]
 800a006:	4909      	ldr	r1, [pc, #36]	@ (800a02c <disk_initialize+0x4c>)
 800a008:	440a      	add	r2, r1
 800a00a:	7a12      	ldrb	r2, [r2, #8]
 800a00c:	4610      	mov	r0, r2
 800a00e:	4798      	blx	r3
 800a010:	4603      	mov	r3, r0
 800a012:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a014:	7bfb      	ldrb	r3, [r7, #15]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d103      	bne.n	800a022 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	4a03      	ldr	r2, [pc, #12]	@ (800a02c <disk_initialize+0x4c>)
 800a01e:	2101      	movs	r1, #1
 800a020:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20001a50 	.word	0x20001a50

0800a030 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a030:	b590      	push	{r4, r7, lr}
 800a032:	b087      	sub	sp, #28
 800a034:	af00      	add	r7, sp, #0
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	607a      	str	r2, [r7, #4]
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	4603      	mov	r3, r0
 800a03e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	4a0a      	ldr	r2, [pc, #40]	@ (800a06c <disk_read+0x3c>)
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	689c      	ldr	r4, [r3, #8]
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	4a07      	ldr	r2, [pc, #28]	@ (800a06c <disk_read+0x3c>)
 800a050:	4413      	add	r3, r2
 800a052:	7a18      	ldrb	r0, [r3, #8]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	68b9      	ldr	r1, [r7, #8]
 800a05a:	47a0      	blx	r4
 800a05c:	4603      	mov	r3, r0
 800a05e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a060:	7dfb      	ldrb	r3, [r7, #23]
}
 800a062:	4618      	mov	r0, r3
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20001a50 	.word	0x20001a50

0800a070 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	603b      	str	r3, [r7, #0]
 800a07c:	4603      	mov	r3, r0
 800a07e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	4a0a      	ldr	r2, [pc, #40]	@ (800a0ac <disk_write+0x3c>)
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	68dc      	ldr	r4, [r3, #12]
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	4a07      	ldr	r2, [pc, #28]	@ (800a0ac <disk_write+0x3c>)
 800a090:	4413      	add	r3, r2
 800a092:	7a18      	ldrb	r0, [r3, #8]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	47a0      	blx	r4
 800a09c:	4603      	mov	r3, r0
 800a09e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd90      	pop	{r4, r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20001a50 	.word	0x20001a50

0800a0b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	603a      	str	r2, [r7, #0]
 800a0ba:	71fb      	strb	r3, [r7, #7]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	4a09      	ldr	r2, [pc, #36]	@ (800a0e8 <disk_ioctl+0x38>)
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	79fa      	ldrb	r2, [r7, #7]
 800a0ce:	4906      	ldr	r1, [pc, #24]	@ (800a0e8 <disk_ioctl+0x38>)
 800a0d0:	440a      	add	r2, r1
 800a0d2:	7a10      	ldrb	r0, [r2, #8]
 800a0d4:	79b9      	ldrb	r1, [r7, #6]
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	4798      	blx	r3
 800a0da:	4603      	mov	r3, r0
 800a0dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20001a50 	.word	0x20001a50

0800a0ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a0fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a100:	021b      	lsls	r3, r3, #8
 800a102:	b21a      	sxth	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	b21b      	sxth	r3, r3
 800a10a:	4313      	orrs	r3, r2
 800a10c:	b21b      	sxth	r3, r3
 800a10e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a110:	89fb      	ldrh	r3, [r7, #14]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a11e:	b480      	push	{r7}
 800a120:	b085      	sub	sp, #20
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3303      	adds	r3, #3
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	3202      	adds	r2, #2
 800a136:	7812      	ldrb	r2, [r2, #0]
 800a138:	4313      	orrs	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	021b      	lsls	r3, r3, #8
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	3201      	adds	r2, #1
 800a144:	7812      	ldrb	r2, [r2, #0]
 800a146:	4313      	orrs	r3, r2
 800a148:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	021b      	lsls	r3, r3, #8
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	7812      	ldrb	r2, [r2, #0]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]
	return rv;
 800a156:	68fb      	ldr	r3, [r7, #12]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800a164:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a168:	b09d      	sub	sp, #116	@ 0x74
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800a16e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a170:	3307      	adds	r3, #7
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2200      	movs	r2, #0
 800a178:	469a      	mov	sl, r3
 800a17a:	4693      	mov	fp, r2
 800a17c:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800a180:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a184:	f04f 0000 	mov.w	r0, #0
 800a188:	f04f 0100 	mov.w	r1, #0
 800a18c:	0219      	lsls	r1, r3, #8
 800a18e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a192:	0210      	lsls	r0, r2, #8
 800a194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a196:	3306      	adds	r3, #6
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2200      	movs	r2, #0
 800a19e:	461c      	mov	r4, r3
 800a1a0:	4615      	mov	r5, r2
 800a1a2:	ea40 0804 	orr.w	r8, r0, r4
 800a1a6:	ea41 0905 	orr.w	r9, r1, r5
 800a1aa:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800a1ae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a1b2:	f04f 0000 	mov.w	r0, #0
 800a1b6:	f04f 0100 	mov.w	r1, #0
 800a1ba:	0219      	lsls	r1, r3, #8
 800a1bc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a1c0:	0210      	lsls	r0, r2, #8
 800a1c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1c4:	3305      	adds	r3, #5
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800a1d0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800a1d4:	4623      	mov	r3, r4
 800a1d6:	4303      	orrs	r3, r0
 800a1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1da:	462b      	mov	r3, r5
 800a1dc:	430b      	orrs	r3, r1
 800a1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800a1e4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800a1e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a1ec:	f04f 0000 	mov.w	r0, #0
 800a1f0:	f04f 0100 	mov.w	r1, #0
 800a1f4:	0219      	lsls	r1, r3, #8
 800a1f6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a1fa:	0210      	lsls	r0, r2, #8
 800a1fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1fe:	3304      	adds	r3, #4
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2200      	movs	r2, #0
 800a206:	653b      	str	r3, [r7, #80]	@ 0x50
 800a208:	657a      	str	r2, [r7, #84]	@ 0x54
 800a20a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800a20e:	4623      	mov	r3, r4
 800a210:	4303      	orrs	r3, r0
 800a212:	623b      	str	r3, [r7, #32]
 800a214:	462b      	mov	r3, r5
 800a216:	430b      	orrs	r3, r1
 800a218:	627b      	str	r3, [r7, #36]	@ 0x24
 800a21a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a21e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800a222:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a226:	f04f 0000 	mov.w	r0, #0
 800a22a:	f04f 0100 	mov.w	r1, #0
 800a22e:	0219      	lsls	r1, r3, #8
 800a230:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a234:	0210      	lsls	r0, r2, #8
 800a236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a238:	3303      	adds	r3, #3
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2200      	movs	r2, #0
 800a240:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a242:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a244:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800a248:	4623      	mov	r3, r4
 800a24a:	4303      	orrs	r3, r0
 800a24c:	61bb      	str	r3, [r7, #24]
 800a24e:	462b      	mov	r3, r5
 800a250:	430b      	orrs	r3, r1
 800a252:	61fb      	str	r3, [r7, #28]
 800a254:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a258:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800a25c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a260:	f04f 0000 	mov.w	r0, #0
 800a264:	f04f 0100 	mov.w	r1, #0
 800a268:	0219      	lsls	r1, r3, #8
 800a26a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a26e:	0210      	lsls	r0, r2, #8
 800a270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a272:	3302      	adds	r3, #2
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2200      	movs	r2, #0
 800a27a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a27c:	647a      	str	r2, [r7, #68]	@ 0x44
 800a27e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800a282:	4623      	mov	r3, r4
 800a284:	4303      	orrs	r3, r0
 800a286:	613b      	str	r3, [r7, #16]
 800a288:	462b      	mov	r3, r5
 800a28a:	430b      	orrs	r3, r1
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a292:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800a296:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a29a:	f04f 0200 	mov.w	r2, #0
 800a29e:	f04f 0300 	mov.w	r3, #0
 800a2a2:	020b      	lsls	r3, r1, #8
 800a2a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2a8:	0202      	lsls	r2, r0, #8
 800a2aa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a2ac:	3101      	adds	r1, #1
 800a2ae:	7809      	ldrb	r1, [r1, #0]
 800a2b0:	b2c9      	uxtb	r1, r1
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a2b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800a2b8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4311      	orrs	r1, r2
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	4319      	orrs	r1, r3
 800a2c6:	60f9      	str	r1, [r7, #12]
 800a2c8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a2cc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800a2d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	f04f 0300 	mov.w	r3, #0
 800a2dc:	020b      	lsls	r3, r1, #8
 800a2de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2e2:	0202      	lsls	r2, r0, #8
 800a2e4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a2e6:	7809      	ldrb	r1, [r1, #0]
 800a2e8:	b2c9      	uxtb	r1, r1
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	6339      	str	r1, [r7, #48]	@ 0x30
 800a2ee:	6378      	str	r0, [r7, #52]	@ 0x34
 800a2f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4311      	orrs	r1, r2
 800a2f8:	6039      	str	r1, [r7, #0]
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	4319      	orrs	r1, r3
 800a2fe:	6079      	str	r1, [r7, #4]
 800a300:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a304:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800a308:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800a30c:	4610      	mov	r0, r2
 800a30e:	4619      	mov	r1, r3
 800a310:	3774      	adds	r7, #116	@ 0x74
 800a312:	46bd      	mov	sp, r7
 800a314:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a318:	4770      	bx	lr

0800a31a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	887a      	ldrh	r2, [r7, #2]
 800a32e:	b2d2      	uxtb	r2, r2
 800a330:	701a      	strb	r2, [r3, #0]
 800a332:	887b      	ldrh	r3, [r7, #2]
 800a334:	0a1b      	lsrs	r3, r3, #8
 800a336:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	1c5a      	adds	r2, r3, #1
 800a33c:	607a      	str	r2, [r7, #4]
 800a33e:	887a      	ldrh	r2, [r7, #2]
 800a340:	b2d2      	uxtb	r2, r2
 800a342:	701a      	strb	r2, [r3, #0]
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	b2d2      	uxtb	r2, r2
 800a364:	701a      	strb	r2, [r3, #0]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	0a1b      	lsrs	r3, r3, #8
 800a36a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	607a      	str	r2, [r7, #4]
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	b2d2      	uxtb	r2, r2
 800a376:	701a      	strb	r2, [r3, #0]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	1c5a      	adds	r2, r3, #1
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	b2d2      	uxtb	r2, r2
 800a388:	701a      	strb	r2, [r3, #0]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	0a1b      	lsrs	r3, r3, #8
 800a38e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	607a      	str	r2, [r7, #4]
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	b2d2      	uxtb	r2, r2
 800a39a:	701a      	strb	r2, [r3, #0]
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	60fa      	str	r2, [r7, #12]
 800a3ba:	783a      	ldrb	r2, [r7, #0]
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3c2:	f04f 0200 	mov.w	r2, #0
 800a3c6:	f04f 0300 	mov.w	r3, #0
 800a3ca:	0a02      	lsrs	r2, r0, #8
 800a3cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a3d0:	0a0b      	lsrs	r3, r1, #8
 800a3d2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	60fa      	str	r2, [r7, #12]
 800a3dc:	783a      	ldrb	r2, [r7, #0]
 800a3de:	701a      	strb	r2, [r3, #0]
 800a3e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3e4:	f04f 0200 	mov.w	r2, #0
 800a3e8:	f04f 0300 	mov.w	r3, #0
 800a3ec:	0a02      	lsrs	r2, r0, #8
 800a3ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a3f2:	0a0b      	lsrs	r3, r1, #8
 800a3f4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	60fa      	str	r2, [r7, #12]
 800a3fe:	783a      	ldrb	r2, [r7, #0]
 800a400:	701a      	strb	r2, [r3, #0]
 800a402:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a406:	f04f 0200 	mov.w	r2, #0
 800a40a:	f04f 0300 	mov.w	r3, #0
 800a40e:	0a02      	lsrs	r2, r0, #8
 800a410:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a414:	0a0b      	lsrs	r3, r1, #8
 800a416:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	60fa      	str	r2, [r7, #12]
 800a420:	783a      	ldrb	r2, [r7, #0]
 800a422:	701a      	strb	r2, [r3, #0]
 800a424:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a428:	f04f 0200 	mov.w	r2, #0
 800a42c:	f04f 0300 	mov.w	r3, #0
 800a430:	0a02      	lsrs	r2, r0, #8
 800a432:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a436:	0a0b      	lsrs	r3, r1, #8
 800a438:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	60fa      	str	r2, [r7, #12]
 800a442:	783a      	ldrb	r2, [r7, #0]
 800a444:	701a      	strb	r2, [r3, #0]
 800a446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a44a:	f04f 0200 	mov.w	r2, #0
 800a44e:	f04f 0300 	mov.w	r3, #0
 800a452:	0a02      	lsrs	r2, r0, #8
 800a454:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a458:	0a0b      	lsrs	r3, r1, #8
 800a45a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	60fa      	str	r2, [r7, #12]
 800a464:	783a      	ldrb	r2, [r7, #0]
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a46c:	f04f 0200 	mov.w	r2, #0
 800a470:	f04f 0300 	mov.w	r3, #0
 800a474:	0a02      	lsrs	r2, r0, #8
 800a476:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a47a:	0a0b      	lsrs	r3, r1, #8
 800a47c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	60fa      	str	r2, [r7, #12]
 800a486:	783a      	ldrb	r2, [r7, #0]
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a48e:	f04f 0200 	mov.w	r2, #0
 800a492:	f04f 0300 	mov.w	r3, #0
 800a496:	0a02      	lsrs	r2, r0, #8
 800a498:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a49c:	0a0b      	lsrs	r3, r1, #8
 800a49e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	60fa      	str	r2, [r7, #12]
 800a4a8:	783a      	ldrb	r2, [r7, #0]
 800a4aa:	701a      	strb	r2, [r3, #0]
}
 800a4ac:	bf00      	nop
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00d      	beq.n	800a4ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	1c53      	adds	r3, r2, #1
 800a4d6:	613b      	str	r3, [r7, #16]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	1c59      	adds	r1, r3, #1
 800a4dc:	6179      	str	r1, [r7, #20]
 800a4de:	7812      	ldrb	r2, [r2, #0]
 800a4e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	607b      	str	r3, [r7, #4]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1f1      	bne.n	800a4d2 <mem_cpy+0x1a>
	}
}
 800a4ee:	bf00      	nop
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a4fa:	b480      	push	{r7}
 800a4fc:	b087      	sub	sp, #28
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	617a      	str	r2, [r7, #20]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	b2d2      	uxtb	r2, r2
 800a514:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	3b01      	subs	r3, #1
 800a51a:	607b      	str	r3, [r7, #4]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1f3      	bne.n	800a50a <mem_set+0x10>
}
 800a522:	bf00      	nop
 800a524:	bf00      	nop
 800a526:	371c      	adds	r7, #28
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a530:	b480      	push	{r7}
 800a532:	b089      	sub	sp, #36	@ 0x24
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	61fb      	str	r3, [r7, #28]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	61fa      	str	r2, [r7, #28]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	4619      	mov	r1, r3
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	1c5a      	adds	r2, r3, #1
 800a556:	61ba      	str	r2, [r7, #24]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	1acb      	subs	r3, r1, r3
 800a55c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3b01      	subs	r3, #1
 800a562:	607b      	str	r3, [r7, #4]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d002      	beq.n	800a570 <mem_cmp+0x40>
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0eb      	beq.n	800a548 <mem_cmp+0x18>

	return r;
 800a570:	697b      	ldr	r3, [r7, #20]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3724      	adds	r7, #36	@ 0x24
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a588:	e002      	b.n	800a590 <chk_chr+0x12>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	3301      	adds	r3, #1
 800a58e:	607b      	str	r3, [r7, #4]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <chk_chr+0x26>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	461a      	mov	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d1f2      	bne.n	800a58a <chk_chr+0xc>
	return *str;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60bb      	str	r3, [r7, #8]
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	e029      	b.n	800a61c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a5c8:	4a27      	ldr	r2, [pc, #156]	@ (800a668 <chk_lock+0xb4>)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	011b      	lsls	r3, r3, #4
 800a5ce:	4413      	add	r3, r2
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d01d      	beq.n	800a612 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a5d6:	4a24      	ldr	r2, [pc, #144]	@ (800a668 <chk_lock+0xb4>)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	011b      	lsls	r3, r3, #4
 800a5dc:	4413      	add	r3, r2
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d116      	bne.n	800a616 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a5e8:	4a1f      	ldr	r2, [pc, #124]	@ (800a668 <chk_lock+0xb4>)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	4413      	add	r3, r2
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d10c      	bne.n	800a616 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a5fc:	4a1a      	ldr	r2, [pc, #104]	@ (800a668 <chk_lock+0xb4>)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	011b      	lsls	r3, r3, #4
 800a602:	4413      	add	r3, r2
 800a604:	3308      	adds	r3, #8
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d102      	bne.n	800a616 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a610:	e007      	b.n	800a622 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a612:	2301      	movs	r3, #1
 800a614:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3301      	adds	r3, #1
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d9d2      	bls.n	800a5c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2b02      	cmp	r3, #2
 800a626:	d109      	bne.n	800a63c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d102      	bne.n	800a634 <chk_lock+0x80>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2b02      	cmp	r3, #2
 800a632:	d101      	bne.n	800a638 <chk_lock+0x84>
 800a634:	2300      	movs	r3, #0
 800a636:	e010      	b.n	800a65a <chk_lock+0xa6>
 800a638:	2312      	movs	r3, #18
 800a63a:	e00e      	b.n	800a65a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d108      	bne.n	800a654 <chk_lock+0xa0>
 800a642:	4a09      	ldr	r2, [pc, #36]	@ (800a668 <chk_lock+0xb4>)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	011b      	lsls	r3, r3, #4
 800a648:	4413      	add	r3, r2
 800a64a:	330c      	adds	r3, #12
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a652:	d101      	bne.n	800a658 <chk_lock+0xa4>
 800a654:	2310      	movs	r3, #16
 800a656:	e000      	b.n	800a65a <chk_lock+0xa6>
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	200015d0 	.word	0x200015d0

0800a66c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a672:	2300      	movs	r3, #0
 800a674:	607b      	str	r3, [r7, #4]
 800a676:	e002      	b.n	800a67e <enq_lock+0x12>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	3301      	adds	r3, #1
 800a67c:	607b      	str	r3, [r7, #4]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d806      	bhi.n	800a692 <enq_lock+0x26>
 800a684:	4a09      	ldr	r2, [pc, #36]	@ (800a6ac <enq_lock+0x40>)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	011b      	lsls	r3, r3, #4
 800a68a:	4413      	add	r3, r2
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1f2      	bne.n	800a678 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b02      	cmp	r3, #2
 800a696:	bf14      	ite	ne
 800a698:	2301      	movne	r3, #1
 800a69a:	2300      	moveq	r3, #0
 800a69c:	b2db      	uxtb	r3, r3
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	200015d0 	.word	0x200015d0

0800a6b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
 800a6be:	e01f      	b.n	800a700 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a6c0:	4a41      	ldr	r2, [pc, #260]	@ (800a7c8 <inc_lock+0x118>)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	011b      	lsls	r3, r3, #4
 800a6c6:	4413      	add	r3, r2
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d113      	bne.n	800a6fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a6d2:	4a3d      	ldr	r2, [pc, #244]	@ (800a7c8 <inc_lock+0x118>)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	011b      	lsls	r3, r3, #4
 800a6d8:	4413      	add	r3, r2
 800a6da:	3304      	adds	r3, #4
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d109      	bne.n	800a6fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a6e6:	4a38      	ldr	r2, [pc, #224]	@ (800a7c8 <inc_lock+0x118>)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	011b      	lsls	r3, r3, #4
 800a6ec:	4413      	add	r3, r2
 800a6ee:	3308      	adds	r3, #8
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d006      	beq.n	800a708 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	60fb      	str	r3, [r7, #12]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d9dc      	bls.n	800a6c0 <inc_lock+0x10>
 800a706:	e000      	b.n	800a70a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a708:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d132      	bne.n	800a776 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a710:	2300      	movs	r3, #0
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	e002      	b.n	800a71c <inc_lock+0x6c>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	3301      	adds	r3, #1
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d806      	bhi.n	800a730 <inc_lock+0x80>
 800a722:	4a29      	ldr	r2, [pc, #164]	@ (800a7c8 <inc_lock+0x118>)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	011b      	lsls	r3, r3, #4
 800a728:	4413      	add	r3, r2
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1f2      	bne.n	800a716 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b02      	cmp	r3, #2
 800a734:	d101      	bne.n	800a73a <inc_lock+0x8a>
 800a736:	2300      	movs	r3, #0
 800a738:	e040      	b.n	800a7bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	4922      	ldr	r1, [pc, #136]	@ (800a7c8 <inc_lock+0x118>)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	011b      	lsls	r3, r3, #4
 800a744:	440b      	add	r3, r1
 800a746:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689a      	ldr	r2, [r3, #8]
 800a74c:	491e      	ldr	r1, [pc, #120]	@ (800a7c8 <inc_lock+0x118>)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	011b      	lsls	r3, r3, #4
 800a752:	440b      	add	r3, r1
 800a754:	3304      	adds	r3, #4
 800a756:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a75c:	491a      	ldr	r1, [pc, #104]	@ (800a7c8 <inc_lock+0x118>)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	011b      	lsls	r3, r3, #4
 800a762:	440b      	add	r3, r1
 800a764:	3308      	adds	r3, #8
 800a766:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a768:	4a17      	ldr	r2, [pc, #92]	@ (800a7c8 <inc_lock+0x118>)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	011b      	lsls	r3, r3, #4
 800a76e:	4413      	add	r3, r2
 800a770:	330c      	adds	r3, #12
 800a772:	2200      	movs	r2, #0
 800a774:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d009      	beq.n	800a790 <inc_lock+0xe0>
 800a77c:	4a12      	ldr	r2, [pc, #72]	@ (800a7c8 <inc_lock+0x118>)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	4413      	add	r3, r2
 800a784:	330c      	adds	r3, #12
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <inc_lock+0xe0>
 800a78c:	2300      	movs	r3, #0
 800a78e:	e015      	b.n	800a7bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d108      	bne.n	800a7a8 <inc_lock+0xf8>
 800a796:	4a0c      	ldr	r2, [pc, #48]	@ (800a7c8 <inc_lock+0x118>)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	4413      	add	r3, r2
 800a79e:	330c      	adds	r3, #12
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	e001      	b.n	800a7ac <inc_lock+0xfc>
 800a7a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a7ac:	4906      	ldr	r1, [pc, #24]	@ (800a7c8 <inc_lock+0x118>)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	011b      	lsls	r3, r3, #4
 800a7b2:	440b      	add	r3, r1
 800a7b4:	330c      	adds	r3, #12
 800a7b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3301      	adds	r3, #1
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	200015d0 	.word	0x200015d0

0800a7cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	607b      	str	r3, [r7, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d825      	bhi.n	800a82c <dec_lock+0x60>
		n = Files[i].ctr;
 800a7e0:	4a17      	ldr	r2, [pc, #92]	@ (800a840 <dec_lock+0x74>)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	011b      	lsls	r3, r3, #4
 800a7e6:	4413      	add	r3, r2
 800a7e8:	330c      	adds	r3, #12
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a7ee:	89fb      	ldrh	r3, [r7, #14]
 800a7f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7f4:	d101      	bne.n	800a7fa <dec_lock+0x2e>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a7fa:	89fb      	ldrh	r3, [r7, #14]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <dec_lock+0x3a>
 800a800:	89fb      	ldrh	r3, [r7, #14]
 800a802:	3b01      	subs	r3, #1
 800a804:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a806:	4a0e      	ldr	r2, [pc, #56]	@ (800a840 <dec_lock+0x74>)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	011b      	lsls	r3, r3, #4
 800a80c:	4413      	add	r3, r2
 800a80e:	330c      	adds	r3, #12
 800a810:	89fa      	ldrh	r2, [r7, #14]
 800a812:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a814:	89fb      	ldrh	r3, [r7, #14]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d105      	bne.n	800a826 <dec_lock+0x5a>
 800a81a:	4a09      	ldr	r2, [pc, #36]	@ (800a840 <dec_lock+0x74>)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	4413      	add	r3, r2
 800a822:	2200      	movs	r2, #0
 800a824:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	737b      	strb	r3, [r7, #13]
 800a82a:	e001      	b.n	800a830 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a82c:	2302      	movs	r3, #2
 800a82e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a830:	7b7b      	ldrb	r3, [r7, #13]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	200015d0 	.word	0x200015d0

0800a844 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a84c:	2300      	movs	r3, #0
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	e010      	b.n	800a874 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a852:	4a0d      	ldr	r2, [pc, #52]	@ (800a888 <clear_lock+0x44>)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	011b      	lsls	r3, r3, #4
 800a858:	4413      	add	r3, r2
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d105      	bne.n	800a86e <clear_lock+0x2a>
 800a862:	4a09      	ldr	r2, [pc, #36]	@ (800a888 <clear_lock+0x44>)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	011b      	lsls	r3, r3, #4
 800a868:	4413      	add	r3, r2
 800a86a:	2200      	movs	r2, #0
 800a86c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3301      	adds	r3, #1
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d9eb      	bls.n	800a852 <clear_lock+0xe>
	}
}
 800a87a:	bf00      	nop
 800a87c:	bf00      	nop
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	200015d0 	.word	0x200015d0

0800a88c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	78db      	ldrb	r3, [r3, #3]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d034      	beq.n	800a90a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7858      	ldrb	r0, [r3, #1]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	f7ff fbdc 	bl	800a070 <disk_write>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d002      	beq.n	800a8c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	73fb      	strb	r3, [r7, #15]
 800a8c2:	e022      	b.n	800a90a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	1ad2      	subs	r2, r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d217      	bcs.n	800a90a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	789b      	ldrb	r3, [r3, #2]
 800a8de:	613b      	str	r3, [r7, #16]
 800a8e0:	e010      	b.n	800a904 <sync_window+0x78>
					wsect += fs->fsize;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	7858      	ldrb	r0, [r3, #1]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	f7ff fbb9 	bl	800a070 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	3b01      	subs	r3, #1
 800a902:	613b      	str	r3, [r7, #16]
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d8eb      	bhi.n	800a8e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d01b      	beq.n	800a964 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff ffad 	bl	800a88c <sync_window>
 800a932:	4603      	mov	r3, r0
 800a934:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a936:	7bfb      	ldrb	r3, [r7, #15]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d113      	bne.n	800a964 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	7858      	ldrb	r0, [r3, #1]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a946:	2301      	movs	r3, #1
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	f7ff fb71 	bl	800a030 <disk_read>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d004      	beq.n	800a95e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a954:	f04f 33ff 	mov.w	r3, #4294967295
 800a958:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800a964:	7bfb      	ldrb	r3, [r7, #15]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff ff87 	bl	800a88c <sync_window>
 800a97e:	4603      	mov	r3, r0
 800a980:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a982:	7bfb      	ldrb	r3, [r7, #15]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d158      	bne.n	800aa3a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d148      	bne.n	800aa22 <sync_fs+0xb2>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	791b      	ldrb	r3, [r3, #4]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d144      	bne.n	800aa22 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3338      	adds	r3, #56	@ 0x38
 800a99c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff fda9 	bl	800a4fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3338      	adds	r3, #56	@ 0x38
 800a9ac:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a9b0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7ff fcb0 	bl	800a31a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	3338      	adds	r3, #56	@ 0x38
 800a9be:	4921      	ldr	r1, [pc, #132]	@ (800aa44 <sync_fs+0xd4>)
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7ff fcc5 	bl	800a350 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3338      	adds	r3, #56	@ 0x38
 800a9ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a9ce:	491e      	ldr	r1, [pc, #120]	@ (800aa48 <sync_fs+0xd8>)
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff fcbd 	bl	800a350 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	3338      	adds	r3, #56	@ 0x38
 800a9da:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	f7ff fcb3 	bl	800a350 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	3338      	adds	r3, #56	@ 0x38
 800a9ee:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	f7ff fca9 	bl	800a350 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	7858      	ldrb	r0, [r3, #1]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa16:	2301      	movs	r3, #1
 800aa18:	f7ff fb2a 	bl	800a070 <disk_write>
			fs->fsi_flag = 0;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	785b      	ldrb	r3, [r3, #1]
 800aa26:	2200      	movs	r2, #0
 800aa28:	2100      	movs	r1, #0
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7ff fb40 	bl	800a0b0 <disk_ioctl>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <sync_fs+0xca>
 800aa36:	2301      	movs	r3, #1
 800aa38:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	41615252 	.word	0x41615252
 800aa48:	61417272 	.word	0x61417272

0800aa4c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	3b02      	subs	r3, #2
 800aa5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	3b02      	subs	r3, #2
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d301      	bcc.n	800aa6c <clust2sect+0x20>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	e008      	b.n	800aa7e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	895b      	ldrh	r3, [r3, #10]
 800aa70:	461a      	mov	r2, r3
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	fb03 f202 	mul.w	r2, r3, r2
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa7c:	4413      	add	r3, r2
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
	...

0800aa8c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b088      	sub	sp, #32
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	6809      	ldr	r1, [r1, #0]
 800aa9a:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	2901      	cmp	r1, #1
 800aaa0:	d904      	bls.n	800aaac <get_fat+0x20>
 800aaa2:	69b9      	ldr	r1, [r7, #24]
 800aaa4:	69c9      	ldr	r1, [r1, #28]
 800aaa6:	6838      	ldr	r0, [r7, #0]
 800aaa8:	4288      	cmp	r0, r1
 800aaaa:	d302      	bcc.n	800aab2 <get_fat+0x26>
		val = 1;	/* Internal error */
 800aaac:	2301      	movs	r3, #1
 800aaae:	61fb      	str	r3, [r7, #28]
 800aab0:	e100      	b.n	800acb4 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aab2:	f04f 31ff 	mov.w	r1, #4294967295
 800aab6:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800aab8:	69b9      	ldr	r1, [r7, #24]
 800aaba:	7809      	ldrb	r1, [r1, #0]
 800aabc:	3901      	subs	r1, #1
 800aabe:	2903      	cmp	r1, #3
 800aac0:	f200 80ec 	bhi.w	800ac9c <get_fat+0x210>
 800aac4:	a001      	add	r0, pc, #4	@ (adr r0, 800aacc <get_fat+0x40>)
 800aac6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aaca:	bf00      	nop
 800aacc:	0800aadd 	.word	0x0800aadd
 800aad0:	0800ab63 	.word	0x0800ab63
 800aad4:	0800ab99 	.word	0x0800ab99
 800aad8:	0800abd1 	.word	0x0800abd1
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	085b      	lsrs	r3, r3, #1
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	4413      	add	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	0a5b      	lsrs	r3, r3, #9
 800aaf2:	4413      	add	r3, r2
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	69b8      	ldr	r0, [r7, #24]
 800aaf8:	f7ff ff0c 	bl	800a914 <move_window>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f040 80cf 	bne.w	800aca2 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	60fa      	str	r2, [r7, #12]
 800ab0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab0e:	69ba      	ldr	r2, [r7, #24]
 800ab10:	4413      	add	r3, r2
 800ab12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ab16:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	0a5b      	lsrs	r3, r3, #9
 800ab20:	4413      	add	r3, r2
 800ab22:	4619      	mov	r1, r3
 800ab24:	69b8      	ldr	r0, [r7, #24]
 800ab26:	f7ff fef5 	bl	800a914 <move_window>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f040 80ba 	bne.w	800aca6 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ab40:	021b      	lsls	r3, r3, #8
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f003 0301 	and.w	r3, r3, #1
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <get_fat+0xcc>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	091b      	lsrs	r3, r3, #4
 800ab56:	e002      	b.n	800ab5e <get_fat+0xd2>
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab5e:	61fb      	str	r3, [r7, #28]
			break;
 800ab60:	e0a8      	b.n	800acb4 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	0a1b      	lsrs	r3, r3, #8
 800ab6a:	4413      	add	r3, r2
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	69b8      	ldr	r0, [r7, #24]
 800ab70:	f7ff fed0 	bl	800a914 <move_window>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f040 8097 	bne.w	800acaa <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ab8a:	4413      	add	r3, r2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff faad 	bl	800a0ec <ld_word>
 800ab92:	4603      	mov	r3, r0
 800ab94:	61fb      	str	r3, [r7, #28]
			break;
 800ab96:	e08d      	b.n	800acb4 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	09db      	lsrs	r3, r3, #7
 800aba0:	4413      	add	r3, r2
 800aba2:	4619      	mov	r1, r3
 800aba4:	69b8      	ldr	r0, [r7, #24]
 800aba6:	f7ff feb5 	bl	800a914 <move_window>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d17e      	bne.n	800acae <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800abbe:	4413      	add	r3, r2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff faac 	bl	800a11e <ld_dword>
 800abc6:	4603      	mov	r3, r0
 800abc8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800abcc:	61fb      	str	r3, [r7, #28]
			break;
 800abce:	e071      	b.n	800acb4 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800abd0:	6879      	ldr	r1, [r7, #4]
 800abd2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800abd6:	4301      	orrs	r1, r0
 800abd8:	d060      	beq.n	800ac9c <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800abda:	6879      	ldr	r1, [r7, #4]
 800abdc:	6889      	ldr	r1, [r1, #8]
 800abde:	6838      	ldr	r0, [r7, #0]
 800abe0:	1a41      	subs	r1, r0, r1
 800abe2:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800abe4:	6879      	ldr	r1, [r7, #4]
 800abe6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800abea:	1e42      	subs	r2, r0, #1
 800abec:	f141 33ff 	adc.w	r3, r1, #4294967295
 800abf0:	f04f 0000 	mov.w	r0, #0
 800abf4:	f04f 0100 	mov.w	r1, #0
 800abf8:	0a50      	lsrs	r0, r2, #9
 800abfa:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800abfe:	0a59      	lsrs	r1, r3, #9
 800ac00:	4602      	mov	r2, r0
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	895b      	ldrh	r3, [r3, #10]
 800ac06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0a:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	79db      	ldrb	r3, [r3, #7]
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d10e      	bne.n	800ac32 <get_fat+0x1a6>
					if (cofs <= clen) {
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d80a      	bhi.n	800ac32 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d002      	beq.n	800ac2a <get_fat+0x19e>
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	3301      	adds	r3, #1
 800ac28:	e001      	b.n	800ac2e <get_fat+0x1a2>
 800ac2a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ac2e:	61fb      	str	r3, [r7, #28]
						break;
 800ac30:	e040      	b.n	800acb4 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	79db      	ldrb	r3, [r3, #7]
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	d108      	bne.n	800ac4c <get_fat+0x1c0>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d203      	bcs.n	800ac4c <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	61fb      	str	r3, [r7, #28]
					break;
 800ac4a:	e033      	b.n	800acb4 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	79db      	ldrb	r3, [r3, #7]
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d023      	beq.n	800ac9c <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d003      	beq.n	800ac64 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800ac5c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ac60:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800ac62:	e027      	b.n	800acb4 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	09db      	lsrs	r3, r3, #7
 800ac6c:	4413      	add	r3, r2
 800ac6e:	4619      	mov	r1, r3
 800ac70:	69b8      	ldr	r0, [r7, #24]
 800ac72:	f7ff fe4f 	bl	800a914 <move_window>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d11a      	bne.n	800acb2 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ac8a:	4413      	add	r3, r2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7ff fa46 	bl	800a11e <ld_dword>
 800ac92:	4603      	mov	r3, r0
 800ac94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac98:	61fb      	str	r3, [r7, #28]
					break;
 800ac9a:	e00b      	b.n	800acb4 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	61fb      	str	r3, [r7, #28]
 800aca0:	e008      	b.n	800acb4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aca2:	bf00      	nop
 800aca4:	e006      	b.n	800acb4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aca6:	bf00      	nop
 800aca8:	e004      	b.n	800acb4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800acaa:	bf00      	nop
 800acac:	e002      	b.n	800acb4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800acae:	bf00      	nop
 800acb0:	e000      	b.n	800acb4 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800acb2:	bf00      	nop
		}
	}

	return val;
 800acb4:	69fb      	ldr	r3, [r7, #28]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3720      	adds	r7, #32
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop

0800acc0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800acc0:	b590      	push	{r4, r7, lr}
 800acc2:	b089      	sub	sp, #36	@ 0x24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800accc:	2302      	movs	r3, #2
 800acce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	f240 80dd 	bls.w	800ae92 <put_fat+0x1d2>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	69db      	ldr	r3, [r3, #28]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	429a      	cmp	r2, r3
 800ace0:	f080 80d7 	bcs.w	800ae92 <put_fat+0x1d2>
		switch (fs->fs_type) {
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2b04      	cmp	r3, #4
 800acea:	f300 80d2 	bgt.w	800ae92 <put_fat+0x1d2>
 800acee:	2b03      	cmp	r3, #3
 800acf0:	f280 8093 	bge.w	800ae1a <put_fat+0x15a>
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d002      	beq.n	800acfe <put_fat+0x3e>
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d06e      	beq.n	800adda <put_fat+0x11a>
 800acfc:	e0c9      	b.n	800ae92 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	61bb      	str	r3, [r7, #24]
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	085b      	lsrs	r3, r3, #1
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	4413      	add	r3, r2
 800ad0a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	0a5b      	lsrs	r3, r3, #9
 800ad14:	4413      	add	r3, r2
 800ad16:	4619      	mov	r1, r3
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff fdfb 	bl	800a914 <move_window>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad22:	7ffb      	ldrb	r3, [r7, #31]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f040 80ad 	bne.w	800ae84 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	1c59      	adds	r1, r3, #1
 800ad34:	61b9      	str	r1, [r7, #24]
 800ad36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad3a:	4413      	add	r3, r2
 800ad3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	f003 0301 	and.w	r3, r3, #1
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00d      	beq.n	800ad64 <put_fat+0xa4>
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	b25b      	sxtb	r3, r3
 800ad4e:	f003 030f 	and.w	r3, r3, #15
 800ad52:	b25a      	sxtb	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	b25b      	sxtb	r3, r3
 800ad58:	011b      	lsls	r3, r3, #4
 800ad5a:	b25b      	sxtb	r3, r3
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	b25b      	sxtb	r3, r3
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	e001      	b.n	800ad68 <put_fat+0xa8>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	0a5b      	lsrs	r3, r3, #9
 800ad7a:	4413      	add	r3, r2
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f7ff fdc8 	bl	800a914 <move_window>
 800ad84:	4603      	mov	r3, r0
 800ad86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad88:	7ffb      	ldrb	r3, [r7, #31]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d17c      	bne.n	800ae88 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9a:	4413      	add	r3, r2
 800ad9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	f003 0301 	and.w	r3, r3, #1
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <put_fat+0xf0>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	091b      	lsrs	r3, r3, #4
 800adac:	b2db      	uxtb	r3, r3
 800adae:	e00e      	b.n	800adce <put_fat+0x10e>
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	b25b      	sxtb	r3, r3
 800adb6:	f023 030f 	bic.w	r3, r3, #15
 800adba:	b25a      	sxtb	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	0a1b      	lsrs	r3, r3, #8
 800adc0:	b25b      	sxtb	r3, r3
 800adc2:	f003 030f 	and.w	r3, r3, #15
 800adc6:	b25b      	sxtb	r3, r3
 800adc8:	4313      	orrs	r3, r2
 800adca:	b25b      	sxtb	r3, r3
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2201      	movs	r2, #1
 800add6:	70da      	strb	r2, [r3, #3]
			break;
 800add8:	e05b      	b.n	800ae92 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	0a1b      	lsrs	r3, r3, #8
 800ade2:	4413      	add	r3, r2
 800ade4:	4619      	mov	r1, r3
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f7ff fd94 	bl	800a914 <move_window>
 800adec:	4603      	mov	r3, r0
 800adee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800adf0:	7ffb      	ldrb	r3, [r7, #31]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d14a      	bne.n	800ae8c <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ae04:	4413      	add	r3, r2
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	b292      	uxth	r2, r2
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7ff fa84 	bl	800a31a <st_word>
			fs->wflag = 1;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2201      	movs	r2, #1
 800ae16:	70da      	strb	r2, [r3, #3]
			break;
 800ae18:	e03b      	b.n	800ae92 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	09db      	lsrs	r3, r3, #7
 800ae22:	4413      	add	r3, r2
 800ae24:	4619      	mov	r1, r3
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f7ff fd74 	bl	800a914 <move_window>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae30:	7ffb      	ldrb	r3, [r7, #31]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d12c      	bne.n	800ae90 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	2b04      	cmp	r3, #4
 800ae3c:	d012      	beq.n	800ae64 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ae52:	4413      	add	r3, r2
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff f962 	bl	800a11e <ld_dword>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ae60:	4323      	orrs	r3, r4
 800ae62:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ae72:	4413      	add	r3, r2
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7ff fa6a 	bl	800a350 <st_dword>
			fs->wflag = 1;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	70da      	strb	r2, [r3, #3]
			break;
 800ae82:	e006      	b.n	800ae92 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800ae84:	bf00      	nop
 800ae86:	e004      	b.n	800ae92 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800ae88:	bf00      	nop
 800ae8a:	e002      	b.n	800ae92 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800ae8c:	bf00      	nop
 800ae8e:	e000      	b.n	800ae92 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800ae90:	bf00      	nop
		}
	}
	return res;
 800ae92:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3724      	adds	r7, #36	@ 0x24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd90      	pop	{r4, r7, pc}

0800ae9c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08a      	sub	sp, #40	@ 0x28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	3b02      	subs	r3, #2
 800aeac:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	69db      	ldr	r3, [r3, #28]
 800aeb2:	3b02      	subs	r3, #2
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d301      	bcc.n	800aebe <find_bitmap+0x22>
 800aeba:	2300      	movs	r3, #0
 800aebc:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	61fb      	str	r3, [r7, #28]
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	61bb      	str	r3, [r7, #24]
 800aec6:	2300      	movs	r3, #0
 800aec8:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	0b1b      	lsrs	r3, r3, #12
 800aed2:	4413      	add	r3, r2
 800aed4:	4619      	mov	r1, r3
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f7ff fd1c 	bl	800a914 <move_window>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d002      	beq.n	800aee8 <find_bitmap+0x4c>
 800aee2:	f04f 33ff 	mov.w	r3, #4294967295
 800aee6:	e051      	b.n	800af8c <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	08db      	lsrs	r3, r3, #3
 800aeec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef0:	623b      	str	r3, [r7, #32]
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	f003 0307 	and.w	r3, r3, #7
 800aef8:	2201      	movs	r2, #1
 800aefa:	fa02 f303 	lsl.w	r3, r2, r3
 800aefe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	6a3b      	ldr	r3, [r7, #32]
 800af06:	4413      	add	r3, r2
 800af08:	3338      	adds	r3, #56	@ 0x38
 800af0a:	781a      	ldrb	r2, [r3, #0]
 800af0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af10:	4013      	ands	r3, r2
 800af12:	74fb      	strb	r3, [r7, #19]
 800af14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	3301      	adds	r3, #1
 800af22:	61fb      	str	r3, [r7, #28]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	3b02      	subs	r3, #2
 800af2a:	69fa      	ldr	r2, [r7, #28]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d307      	bcc.n	800af40 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800af30:	2300      	movs	r3, #0
 800af32:	61fb      	str	r3, [r7, #28]
 800af34:	2300      	movs	r3, #0
 800af36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af3e:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800af40:	7cfb      	ldrb	r3, [r7, #19]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d109      	bne.n	800af5a <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	3301      	adds	r3, #1
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	d106      	bne.n	800af62 <find_bitmap+0xc6>
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	3302      	adds	r3, #2
 800af58:	e018      	b.n	800af8c <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	61bb      	str	r3, [r7, #24]
 800af5e:	2300      	movs	r3, #0
 800af60:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800af62:	69fa      	ldr	r2, [r7, #28]
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	429a      	cmp	r2, r3
 800af68:	d101      	bne.n	800af6e <find_bitmap+0xd2>
 800af6a:	2300      	movs	r3, #0
 800af6c:	e00e      	b.n	800af8c <find_bitmap+0xf0>
			} while (bm);
 800af6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1c5      	bne.n	800af02 <find_bitmap+0x66>
			bm = 1;
 800af76:	2301      	movs	r3, #1
 800af78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	3301      	adds	r3, #1
 800af80:	623b      	str	r3, [r7, #32]
 800af82:	6a3b      	ldr	r3, [r7, #32]
 800af84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af88:	d3bb      	bcc.n	800af02 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800af8a:	e79e      	b.n	800aeca <find_bitmap+0x2e>
	}
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3728      	adds	r7, #40	@ 0x28
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
 800afa0:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	3b02      	subs	r3, #2
 800afa6:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	0b1b      	lsrs	r3, r3, #12
 800afb0:	4413      	add	r3, r2
 800afb2:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	08db      	lsrs	r3, r3, #3
 800afb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbc:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	f003 0307 	and.w	r3, r3, #7
 800afc4:	2201      	movs	r2, #1
 800afc6:	fa02 f303 	lsl.w	r3, r2, r3
 800afca:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	1c5a      	adds	r2, r3, #1
 800afd0:	617a      	str	r2, [r7, #20]
 800afd2:	4619      	mov	r1, r3
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff fc9d 	bl	800a914 <move_window>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <change_bitmap+0x50>
 800afe0:	2301      	movs	r3, #1
 800afe2:	e03d      	b.n	800b060 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	4413      	add	r3, r2
 800afea:	3338      	adds	r3, #56	@ 0x38
 800afec:	781a      	ldrb	r2, [r3, #0]
 800afee:	7ffb      	ldrb	r3, [r7, #31]
 800aff0:	4013      	ands	r3, r2
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	bf14      	ite	ne
 800aff8:	2301      	movne	r3, #1
 800affa:	2300      	moveq	r3, #0
 800affc:	b2db      	uxtb	r3, r3
 800affe:	461a      	mov	r2, r3
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	4293      	cmp	r3, r2
 800b004:	d101      	bne.n	800b00a <change_bitmap+0x76>
 800b006:	2302      	movs	r3, #2
 800b008:	e02a      	b.n	800b060 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	4413      	add	r3, r2
 800b010:	3338      	adds	r3, #56	@ 0x38
 800b012:	781a      	ldrb	r2, [r3, #0]
 800b014:	7ffb      	ldrb	r3, [r7, #31]
 800b016:	4053      	eors	r3, r2
 800b018:	b2d9      	uxtb	r1, r3
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	4413      	add	r3, r2
 800b020:	3338      	adds	r3, #56	@ 0x38
 800b022:	460a      	mov	r2, r1
 800b024:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2201      	movs	r2, #1
 800b02a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3b01      	subs	r3, #1
 800b030:	607b      	str	r3, [r7, #4]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <change_bitmap+0xa8>
 800b038:	2300      	movs	r3, #0
 800b03a:	e011      	b.n	800b060 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800b03c:	7ffb      	ldrb	r3, [r7, #31]
 800b03e:	005b      	lsls	r3, r3, #1
 800b040:	77fb      	strb	r3, [r7, #31]
 800b042:	7ffb      	ldrb	r3, [r7, #31]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1cd      	bne.n	800afe4 <change_bitmap+0x50>
			bm = 1;
 800b048:	2301      	movs	r3, #1
 800b04a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	3301      	adds	r3, #1
 800b050:	61bb      	str	r3, [r7, #24]
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b058:	d3c4      	bcc.n	800afe4 <change_bitmap+0x50>
		i = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b05e:	e7b5      	b.n	800afcc <change_bitmap+0x38>
	}
}
 800b060:	4618      	mov	r0, r3
 800b062:	3720      	adds	r7, #32
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	79db      	ldrb	r3, [r3, #7]
 800b074:	2b03      	cmp	r3, #3
 800b076:	d121      	bne.n	800b0bc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	617b      	str	r3, [r7, #20]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	613b      	str	r3, [r7, #16]
 800b084:	e014      	b.n	800b0b0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6818      	ldr	r0, [r3, #0]
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	3301      	adds	r3, #1
 800b08e:	461a      	mov	r2, r3
 800b090:	6979      	ldr	r1, [r7, #20]
 800b092:	f7ff fe15 	bl	800acc0 <put_fat>
 800b096:	4603      	mov	r3, r0
 800b098:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <fill_first_frag+0x3c>
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	e00c      	b.n	800b0be <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	617b      	str	r3, [r7, #20]
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	613b      	str	r3, [r7, #16]
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1e7      	bne.n	800b086 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3718      	adds	r7, #24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b086      	sub	sp, #24
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	60f8      	str	r0, [r7, #12]
 800b0ce:	60b9      	str	r1, [r7, #8]
 800b0d0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b0d2:	e020      	b.n	800b116 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6818      	ldr	r0, [r3, #0]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	1c59      	adds	r1, r3, #1
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d905      	bls.n	800b0f6 <fill_last_frag+0x30>
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	69db      	ldr	r3, [r3, #28]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	3302      	adds	r3, #2
 800b0f4:	e000      	b.n	800b0f8 <fill_last_frag+0x32>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	f7ff fde1 	bl	800acc0 <put_fat>
 800b0fe:	4603      	mov	r3, r0
 800b100:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800b102:	7dfb      	ldrb	r3, [r7, #23]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <fill_last_frag+0x46>
 800b108:	7dfb      	ldrb	r3, [r7, #23]
 800b10a:	e009      	b.n	800b120 <fill_last_frag+0x5a>
		obj->n_frag--;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	1e5a      	subs	r2, r3, #1
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1da      	bne.n	800b0d4 <fill_last_frag+0xe>
	}
	return FR_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08a      	sub	sp, #40	@ 0x28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	627b      	str	r3, [r7, #36]	@ 0x24
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d904      	bls.n	800b156 <remove_chain+0x2e>
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	69db      	ldr	r3, [r3, #28]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	429a      	cmp	r2, r3
 800b154:	d301      	bcc.n	800b15a <remove_chain+0x32>
 800b156:	2302      	movs	r3, #2
 800b158:	e096      	b.n	800b288 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d014      	beq.n	800b18a <remove_chain+0x62>
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b04      	cmp	r3, #4
 800b166:	d103      	bne.n	800b170 <remove_chain+0x48>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	79db      	ldrb	r3, [r3, #7]
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d00c      	beq.n	800b18a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b170:	f04f 32ff 	mov.w	r2, #4294967295
 800b174:	6879      	ldr	r1, [r7, #4]
 800b176:	69b8      	ldr	r0, [r7, #24]
 800b178:	f7ff fda2 	bl	800acc0 <put_fat>
 800b17c:	4603      	mov	r3, r0
 800b17e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b180:	7ffb      	ldrb	r3, [r7, #31]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <remove_chain+0x62>
 800b186:	7ffb      	ldrb	r3, [r7, #31]
 800b188:	e07e      	b.n	800b288 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b18a:	68b9      	ldr	r1, [r7, #8]
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f7ff fc7d 	bl	800aa8c <get_fat>
 800b192:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d055      	beq.n	800b246 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <remove_chain+0x7c>
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	e071      	b.n	800b288 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1aa:	d101      	bne.n	800b1b0 <remove_chain+0x88>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e06b      	b.n	800b288 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2b04      	cmp	r3, #4
 800b1b6:	d00b      	beq.n	800b1d0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	68b9      	ldr	r1, [r7, #8]
 800b1bc:	69b8      	ldr	r0, [r7, #24]
 800b1be:	f7ff fd7f 	bl	800acc0 <put_fat>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b1c6:	7ffb      	ldrb	r3, [r7, #31]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <remove_chain+0xa8>
 800b1cc:	7ffb      	ldrb	r3, [r7, #31]
 800b1ce:	e05b      	b.n	800b288 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	699a      	ldr	r2, [r3, #24]
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	3b02      	subs	r3, #2
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d20b      	bcs.n	800b1f6 <remove_chain+0xce>
			fs->free_clst++;
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	791b      	ldrb	r3, [r3, #4]
 800b1ec:	f043 0301 	orr.w	r3, r3, #1
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d102      	bne.n	800b206 <remove_chain+0xde>
			ecl = nxt;
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	623b      	str	r3, [r7, #32]
 800b204:	e017      	b.n	800b236 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d10f      	bne.n	800b22e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800b20e:	6a3a      	ldr	r2, [r7, #32]
 800b210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	1c5a      	adds	r2, r3, #1
 800b216:	2300      	movs	r3, #0
 800b218:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b21a:	69b8      	ldr	r0, [r7, #24]
 800b21c:	f7ff feba 	bl	800af94 <change_bitmap>
 800b220:	4603      	mov	r3, r0
 800b222:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800b224:	7ffb      	ldrb	r3, [r7, #31]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <remove_chain+0x106>
 800b22a:	7ffb      	ldrb	r3, [r7, #31]
 800b22c:	e02c      	b.n	800b288 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	623b      	str	r3, [r7, #32]
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	429a      	cmp	r2, r3
 800b242:	d3a2      	bcc.n	800b18a <remove_chain+0x62>
 800b244:	e000      	b.n	800b248 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800b246:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b04      	cmp	r3, #4
 800b24e:	d11a      	bne.n	800b286 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d103      	bne.n	800b25e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	71da      	strb	r2, [r3, #7]
 800b25c:	e013      	b.n	800b286 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	79db      	ldrb	r3, [r3, #7]
 800b262:	2b03      	cmp	r3, #3
 800b264:	d10f      	bne.n	800b286 <remove_chain+0x15e>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d30a      	bcc.n	800b286 <remove_chain+0x15e>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	689a      	ldr	r2, [r3, #8]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	4413      	add	r3, r2
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d802      	bhi.n	800b286 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2202      	movs	r2, #2
 800b284:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3728      	adds	r7, #40	@ 0x28
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b088      	sub	sp, #32
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10d      	bne.n	800b2c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d004      	beq.n	800b2bc <create_chain+0x2c>
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	69ba      	ldr	r2, [r7, #24]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d31b      	bcc.n	800b2f4 <create_chain+0x64>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	61bb      	str	r3, [r7, #24]
 800b2c0:	e018      	b.n	800b2f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff fbe1 	bl	800aa8c <get_fat>
 800b2ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d801      	bhi.n	800b2d6 <create_chain+0x46>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e0d9      	b.n	800b48a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2dc:	d101      	bne.n	800b2e2 <create_chain+0x52>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	e0d3      	b.n	800b48a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d201      	bcs.n	800b2f0 <create_chain+0x60>
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	e0cc      	b.n	800b48a <create_chain+0x1fa>
		scl = clst;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	2b04      	cmp	r3, #4
 800b2fa:	d164      	bne.n	800b3c6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	69b9      	ldr	r1, [r7, #24]
 800b300:	6938      	ldr	r0, [r7, #16]
 800b302:	f7ff fdcb 	bl	800ae9c <find_bitmap>
 800b306:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d003      	beq.n	800b316 <create_chain+0x86>
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b314:	d101      	bne.n	800b31a <create_chain+0x8a>
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	e0b7      	b.n	800b48a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800b31a:	2301      	movs	r3, #1
 800b31c:	2201      	movs	r2, #1
 800b31e:	69f9      	ldr	r1, [r7, #28]
 800b320:	6938      	ldr	r0, [r7, #16]
 800b322:	f7ff fe37 	bl	800af94 <change_bitmap>
 800b326:	4603      	mov	r3, r0
 800b328:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800b32a:	7dfb      	ldrb	r3, [r7, #23]
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d101      	bne.n	800b334 <create_chain+0xa4>
 800b330:	2301      	movs	r3, #1
 800b332:	e0aa      	b.n	800b48a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800b334:	7dfb      	ldrb	r3, [r7, #23]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d102      	bne.n	800b340 <create_chain+0xb0>
 800b33a:	f04f 33ff 	mov.w	r3, #4294967295
 800b33e:	e0a4      	b.n	800b48a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d103      	bne.n	800b34e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2202      	movs	r2, #2
 800b34a:	71da      	strb	r2, [r3, #7]
 800b34c:	e011      	b.n	800b372 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	79db      	ldrb	r3, [r3, #7]
 800b352:	2b02      	cmp	r3, #2
 800b354:	d10d      	bne.n	800b372 <create_chain+0xe2>
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	3301      	adds	r3, #1
 800b35a:	69fa      	ldr	r2, [r7, #28]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d008      	beq.n	800b372 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	1ad2      	subs	r2, r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2203      	movs	r2, #3
 800b370:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	79db      	ldrb	r3, [r3, #7]
 800b376:	2b02      	cmp	r3, #2
 800b378:	d064      	beq.n	800b444 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	3301      	adds	r3, #1
 800b37e:	69fa      	ldr	r2, [r7, #28]
 800b380:	429a      	cmp	r2, r3
 800b382:	d10b      	bne.n	800b39c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	69db      	ldr	r3, [r3, #28]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <create_chain+0x104>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	69db      	ldr	r3, [r3, #28]
 800b390:	3301      	adds	r3, #1
 800b392:	e000      	b.n	800b396 <create_chain+0x106>
 800b394:	2302      	movs	r3, #2
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	61d3      	str	r3, [r2, #28]
 800b39a:	e053      	b.n	800b444 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <create_chain+0x11a>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800b3aa:	69fa      	ldr	r2, [r7, #28]
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff fe89 	bl	800b0c6 <fill_last_frag>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d142      	bne.n	800b444 <create_chain+0x1b4>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	61da      	str	r2, [r3, #28]
 800b3c4:	e03e      	b.n	800b444 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	69db      	ldr	r3, [r3, #28]
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d307      	bcc.n	800b3ea <create_chain+0x15a>
				ncl = 2;
 800b3da:	2302      	movs	r3, #2
 800b3dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b3de:	69fa      	ldr	r2, [r7, #28]
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d901      	bls.n	800b3ea <create_chain+0x15a>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e04f      	b.n	800b48a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b3ea:	69f9      	ldr	r1, [r7, #28]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7ff fb4d 	bl	800aa8c <get_fat>
 800b3f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00e      	beq.n	800b418 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d003      	beq.n	800b408 <create_chain+0x178>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b406:	d101      	bne.n	800b40c <create_chain+0x17c>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	e03e      	b.n	800b48a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800b40c:	69fa      	ldr	r2, [r7, #28]
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	429a      	cmp	r2, r3
 800b412:	d1da      	bne.n	800b3ca <create_chain+0x13a>
 800b414:	2300      	movs	r3, #0
 800b416:	e038      	b.n	800b48a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800b418:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b41a:	f04f 32ff 	mov.w	r2, #4294967295
 800b41e:	69f9      	ldr	r1, [r7, #28]
 800b420:	6938      	ldr	r0, [r7, #16]
 800b422:	f7ff fc4d 	bl	800acc0 <put_fat>
 800b426:	4603      	mov	r3, r0
 800b428:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d109      	bne.n	800b444 <create_chain+0x1b4>
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d006      	beq.n	800b444 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b436:	69fa      	ldr	r2, [r7, #28]
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6938      	ldr	r0, [r7, #16]
 800b43c:	f7ff fc40 	bl	800acc0 <put_fat>
 800b440:	4603      	mov	r3, r0
 800b442:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b444:	7dfb      	ldrb	r3, [r7, #23]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d116      	bne.n	800b478 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	69fa      	ldr	r2, [r7, #28]
 800b44e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	699a      	ldr	r2, [r3, #24]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	3b02      	subs	r3, #2
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d804      	bhi.n	800b468 <create_chain+0x1d8>
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	1e5a      	subs	r2, r3, #1
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	791b      	ldrb	r3, [r3, #4]
 800b46c:	f043 0301 	orr.w	r3, r3, #1
 800b470:	b2da      	uxtb	r2, r3
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	711a      	strb	r2, [r3, #4]
 800b476:	e007      	b.n	800b488 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d102      	bne.n	800b484 <create_chain+0x1f4>
 800b47e:	f04f 33ff 	mov.w	r3, #4294967295
 800b482:	e000      	b.n	800b486 <create_chain+0x1f6>
 800b484:	2301      	movs	r3, #1
 800b486:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b488:	69fb      	ldr	r3, [r7, #28]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3720      	adds	r7, #32
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b086      	sub	sp, #24
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	d102      	bne.n	800b4b0 <dir_sdi+0x1e>
 800b4aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ae:	e001      	b.n	800b4b4 <dir_sdi+0x22>
 800b4b0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d904      	bls.n	800b4c4 <dir_sdi+0x32>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	f003 031f 	and.w	r3, r3, #31
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	e066      	b.n	800b596 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	683a      	ldr	r2, [r7, #0]
 800b4cc:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d109      	bne.n	800b4ee <dir_sdi+0x5c>
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d905      	bls.n	800b4ee <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10c      	bne.n	800b50e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	095b      	lsrs	r3, r3, #5
 800b4f8:	693a      	ldr	r2, [r7, #16]
 800b4fa:	8912      	ldrh	r2, [r2, #8]
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d301      	bcc.n	800b504 <dir_sdi+0x72>
 800b500:	2302      	movs	r3, #2
 800b502:	e048      	b.n	800b596 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b50c:	e029      	b.n	800b562 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	895b      	ldrh	r3, [r3, #10]
 800b512:	025b      	lsls	r3, r3, #9
 800b514:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b516:	e019      	b.n	800b54c <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6979      	ldr	r1, [r7, #20]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7ff fab5 	bl	800aa8c <get_fat>
 800b522:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52a:	d101      	bne.n	800b530 <dir_sdi+0x9e>
 800b52c:	2301      	movs	r3, #1
 800b52e:	e032      	b.n	800b596 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d904      	bls.n	800b540 <dir_sdi+0xae>
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	69db      	ldr	r3, [r3, #28]
 800b53a:	697a      	ldr	r2, [r7, #20]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d301      	bcc.n	800b544 <dir_sdi+0xb2>
 800b540:	2302      	movs	r3, #2
 800b542:	e028      	b.n	800b596 <dir_sdi+0x104>
			ofs -= csz;
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	1ad3      	subs	r3, r2, r3
 800b54a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	429a      	cmp	r2, r3
 800b552:	d2e1      	bcs.n	800b518 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800b554:	6979      	ldr	r1, [r7, #20]
 800b556:	6938      	ldr	r0, [r7, #16]
 800b558:	f7ff fa78 	bl	800aa4c <clust2sect>
 800b55c:	4602      	mov	r2, r0
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <dir_sdi+0xe2>
 800b570:	2302      	movs	r3, #2
 800b572:	e010      	b.n	800b596 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	0a5b      	lsrs	r3, r3, #9
 800b57c:	441a      	add	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b58e:	441a      	add	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3718      	adds	r7, #24
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b086      	sub	sp, #24
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5b2:	3320      	adds	r3, #32
 800b5b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00b      	beq.n	800b5d6 <dir_next+0x38>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b04      	cmp	r3, #4
 800b5c4:	d102      	bne.n	800b5cc <dir_next+0x2e>
 800b5c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5ca:	e001      	b.n	800b5d0 <dir_next+0x32>
 800b5cc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d801      	bhi.n	800b5da <dir_next+0x3c>
 800b5d6:	2304      	movs	r3, #4
 800b5d8:	e0b2      	b.n	800b740 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f040 80a0 	bne.w	800b726 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ea:	1c5a      	adds	r2, r3, #1
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10b      	bne.n	800b610 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	095b      	lsrs	r3, r3, #5
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	8912      	ldrh	r2, [r2, #8]
 800b600:	4293      	cmp	r3, r2
 800b602:	f0c0 8090 	bcc.w	800b726 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b60c:	2304      	movs	r3, #4
 800b60e:	e097      	b.n	800b740 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	0a5b      	lsrs	r3, r3, #9
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	8952      	ldrh	r2, [r2, #10]
 800b618:	3a01      	subs	r2, #1
 800b61a:	4013      	ands	r3, r2
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f040 8082 	bne.w	800b726 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f7ff fa2e 	bl	800aa8c <get_fat>
 800b630:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d801      	bhi.n	800b63c <dir_next+0x9e>
 800b638:	2302      	movs	r3, #2
 800b63a:	e081      	b.n	800b740 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b642:	d101      	bne.n	800b648 <dir_next+0xaa>
 800b644:	2301      	movs	r3, #1
 800b646:	e07b      	b.n	800b740 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d35f      	bcc.n	800b712 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d104      	bne.n	800b662 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	639a      	str	r2, [r3, #56]	@ 0x38
 800b65e:	2304      	movs	r3, #4
 800b660:	e06e      	b.n	800b740 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b668:	4619      	mov	r1, r3
 800b66a:	4610      	mov	r0, r2
 800b66c:	f7ff fe10 	bl	800b290 <create_chain>
 800b670:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d101      	bne.n	800b67c <dir_next+0xde>
 800b678:	2307      	movs	r3, #7
 800b67a:	e061      	b.n	800b740 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d101      	bne.n	800b686 <dir_next+0xe8>
 800b682:	2302      	movs	r3, #2
 800b684:	e05c      	b.n	800b740 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68c:	d101      	bne.n	800b692 <dir_next+0xf4>
 800b68e:	2301      	movs	r3, #1
 800b690:	e056      	b.n	800b740 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	79db      	ldrb	r3, [r3, #7]
 800b696:	f043 0304 	orr.w	r3, r3, #4
 800b69a:	b2da      	uxtb	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f7ff f8f3 	bl	800a88c <sync_window>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <dir_next+0x112>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e047      	b.n	800b740 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	3338      	adds	r3, #56	@ 0x38
 800b6b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fe ff1d 	bl	800a4fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	613b      	str	r3, [r7, #16]
 800b6c4:	6979      	ldr	r1, [r7, #20]
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f7ff f9c0 	bl	800aa4c <clust2sect>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	635a      	str	r2, [r3, #52]	@ 0x34
 800b6d2:	e012      	b.n	800b6fa <dir_next+0x15c>
						fs->wflag = 1;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f7ff f8d6 	bl	800a88c <sync_window>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d001      	beq.n	800b6ea <dir_next+0x14c>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e02a      	b.n	800b740 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	613b      	str	r3, [r7, #16]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6f4:	1c5a      	adds	r2, r3, #1
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	635a      	str	r2, [r3, #52]	@ 0x34
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	895b      	ldrh	r3, [r3, #10]
 800b6fe:	461a      	mov	r2, r3
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	4293      	cmp	r3, r2
 800b704:	d3e6      	bcc.n	800b6d4 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	1ad2      	subs	r2, r2, r3
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800b718:	6979      	ldr	r1, [r7, #20]
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f7ff f996 	bl	800aa4c <clust2sect>
 800b720:	4602      	mov	r2, r0
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b738:	441a      	add	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b758:	2100      	movs	r1, #0
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff fe99 	bl	800b492 <dir_sdi>
 800b760:	4603      	mov	r3, r0
 800b762:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d140      	bne.n	800b7ec <dir_alloc+0xa4>
		n = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b772:	4619      	mov	r1, r3
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f7ff f8cd 	bl	800a914 <move_window>
 800b77a:	4603      	mov	r3, r0
 800b77c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d132      	bne.n	800b7ea <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2b04      	cmp	r3, #4
 800b78a:	d108      	bne.n	800b79e <dir_alloc+0x56>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	b25b      	sxtb	r3, r3
 800b794:	43db      	mvns	r3, r3
 800b796:	b2db      	uxtb	r3, r3
 800b798:	09db      	lsrs	r3, r3, #7
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	e00f      	b.n	800b7be <dir_alloc+0x76>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2be5      	cmp	r3, #229	@ 0xe5
 800b7a6:	d004      	beq.n	800b7b2 <dir_alloc+0x6a>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <dir_alloc+0x6e>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e000      	b.n	800b7b8 <dir_alloc+0x70>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f003 0301 	and.w	r3, r3, #1
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d007      	beq.n	800b7d2 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	613b      	str	r3, [r7, #16]
 800b7c8:	693a      	ldr	r2, [r7, #16]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d102      	bne.n	800b7d6 <dir_alloc+0x8e>
 800b7d0:	e00c      	b.n	800b7ec <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f7ff fee0 	bl	800b59e <dir_next>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b7e2:	7dfb      	ldrb	r3, [r7, #23]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d0c2      	beq.n	800b76e <dir_alloc+0x26>
 800b7e8:	e000      	b.n	800b7ec <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b7ea:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d101      	bne.n	800b7f6 <dir_alloc+0xae>
 800b7f2:	2307      	movs	r3, #7
 800b7f4:	75fb      	strb	r3, [r7, #23]
	return res;
 800b7f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	331a      	adds	r3, #26
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe fc6c 	bl	800a0ec <ld_word>
 800b814:	4603      	mov	r3, r0
 800b816:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	d109      	bne.n	800b834 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	3314      	adds	r3, #20
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe fc61 	bl	800a0ec <ld_word>
 800b82a:	4603      	mov	r3, r0
 800b82c:	041b      	lsls	r3, r3, #16
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	4313      	orrs	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b834:	68fb      	ldr	r3, [r7, #12]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	60f8      	str	r0, [r7, #12]
 800b846:	60b9      	str	r1, [r7, #8]
 800b848:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	331a      	adds	r3, #26
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	b292      	uxth	r2, r2
 800b852:	4611      	mov	r1, r2
 800b854:	4618      	mov	r0, r3
 800b856:	f7fe fd60 	bl	800a31a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d109      	bne.n	800b876 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f103 0214 	add.w	r2, r3, #20
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	0c1b      	lsrs	r3, r3, #16
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	4619      	mov	r1, r3
 800b870:	4610      	mov	r0, r2
 800b872:	f7fe fd52 	bl	800a31a <st_word>
	}
}
 800b876:	bf00      	nop
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b880:	b590      	push	{r4, r7, lr}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	331a      	adds	r3, #26
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe fc2c 	bl	800a0ec <ld_word>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <cmp_lfn+0x1e>
 800b89a:	2300      	movs	r3, #0
 800b89c:	e059      	b.n	800b952 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8a6:	1e5a      	subs	r2, r3, #1
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	005b      	lsls	r3, r3, #1
 800b8ac:	4413      	add	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	81fb      	strh	r3, [r7, #14]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	613b      	str	r3, [r7, #16]
 800b8bc:	e033      	b.n	800b926 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b8be:	4a27      	ldr	r2, [pc, #156]	@ (800b95c <cmp_lfn+0xdc>)
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fe fc0d 	bl	800a0ec <ld_word>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b8d6:	89fb      	ldrh	r3, [r7, #14]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d01a      	beq.n	800b912 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	2bfe      	cmp	r3, #254	@ 0xfe
 800b8e0:	d812      	bhi.n	800b908 <cmp_lfn+0x88>
 800b8e2:	89bb      	ldrh	r3, [r7, #12]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f003 f95b 	bl	800eba0 <ff_wtoupper>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	461c      	mov	r4, r3
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	617a      	str	r2, [r7, #20]
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f003 f94f 	bl	800eba0 <ff_wtoupper>
 800b902:	4603      	mov	r3, r0
 800b904:	429c      	cmp	r4, r3
 800b906:	d001      	beq.n	800b90c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b908:	2300      	movs	r3, #0
 800b90a:	e022      	b.n	800b952 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b90c:	89bb      	ldrh	r3, [r7, #12]
 800b90e:	81fb      	strh	r3, [r7, #14]
 800b910:	e006      	b.n	800b920 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b912:	89bb      	ldrh	r3, [r7, #12]
 800b914:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b918:	4293      	cmp	r3, r2
 800b91a:	d001      	beq.n	800b920 <cmp_lfn+0xa0>
 800b91c:	2300      	movs	r3, #0
 800b91e:	e018      	b.n	800b952 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	3301      	adds	r3, #1
 800b924:	613b      	str	r3, [r7, #16]
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	2b0c      	cmp	r3, #12
 800b92a:	d9c8      	bls.n	800b8be <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <cmp_lfn+0xd0>
 800b938:	89fb      	ldrh	r3, [r7, #14]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d008      	beq.n	800b950 <cmp_lfn+0xd0>
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	4413      	add	r3, r2
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <cmp_lfn+0xd0>
 800b94c:	2300      	movs	r3, #0
 800b94e:	e000      	b.n	800b952 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b950:	2301      	movs	r3, #1
}
 800b952:	4618      	mov	r0, r3
 800b954:	371c      	adds	r7, #28
 800b956:	46bd      	mov	sp, r7
 800b958:	bd90      	pop	{r4, r7, pc}
 800b95a:	bf00      	nop
 800b95c:	0800fa0c 	.word	0x0800fa0c

0800b960 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	331a      	adds	r3, #26
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe fbbc 	bl	800a0ec <ld_word>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <pick_lfn+0x1e>
 800b97a:	2300      	movs	r3, #0
 800b97c:	e04d      	b.n	800ba1a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b986:	1e5a      	subs	r2, r3, #1
 800b988:	4613      	mov	r3, r2
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	4413      	add	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b994:	2301      	movs	r3, #1
 800b996:	81fb      	strh	r3, [r7, #14]
 800b998:	2300      	movs	r3, #0
 800b99a:	613b      	str	r3, [r7, #16]
 800b99c:	e028      	b.n	800b9f0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b99e:	4a21      	ldr	r2, [pc, #132]	@ (800ba24 <pick_lfn+0xc4>)
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fe fb9d 	bl	800a0ec <ld_word>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b9b6:	89fb      	ldrh	r3, [r7, #14]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00f      	beq.n	800b9dc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	2bfe      	cmp	r3, #254	@ 0xfe
 800b9c0:	d901      	bls.n	800b9c6 <pick_lfn+0x66>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	e029      	b.n	800ba1a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b9c6:	89bb      	ldrh	r3, [r7, #12]
 800b9c8:	81fb      	strh	r3, [r7, #14]
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	617a      	str	r2, [r7, #20]
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	89fa      	ldrh	r2, [r7, #14]
 800b9d8:	801a      	strh	r2, [r3, #0]
 800b9da:	e006      	b.n	800b9ea <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b9dc:	89bb      	ldrh	r3, [r7, #12]
 800b9de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d001      	beq.n	800b9ea <pick_lfn+0x8a>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	e017      	b.n	800ba1a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	613b      	str	r3, [r7, #16]
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	2b0c      	cmp	r3, #12
 800b9f4:	d9d3      	bls.n	800b99e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00a      	beq.n	800ba18 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	2bfe      	cmp	r3, #254	@ 0xfe
 800ba06:	d901      	bls.n	800ba0c <pick_lfn+0xac>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	e006      	b.n	800ba1a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	4413      	add	r3, r2
 800ba14:	2200      	movs	r2, #0
 800ba16:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ba18:	2301      	movs	r3, #1
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	0800fa0c 	.word	0x0800fa0c

0800ba28 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	4611      	mov	r1, r2
 800ba34:	461a      	mov	r2, r3
 800ba36:	460b      	mov	r3, r1
 800ba38:	71fb      	strb	r3, [r7, #7]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	330d      	adds	r3, #13
 800ba42:	79ba      	ldrb	r2, [r7, #6]
 800ba44:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	330b      	adds	r3, #11
 800ba4a:	220f      	movs	r2, #15
 800ba4c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	330c      	adds	r3, #12
 800ba52:	2200      	movs	r2, #0
 800ba54:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	331a      	adds	r3, #26
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe fc5c 	bl	800a31a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ba62:	79fb      	ldrb	r3, [r7, #7]
 800ba64:	1e5a      	subs	r2, r3, #1
 800ba66:	4613      	mov	r3, r2
 800ba68:	005b      	lsls	r3, r3, #1
 800ba6a:	4413      	add	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4413      	add	r3, r2
 800ba70:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ba72:	2300      	movs	r3, #0
 800ba74:	82fb      	strh	r3, [r7, #22]
 800ba76:	2300      	movs	r3, #0
 800ba78:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ba7a:	8afb      	ldrh	r3, [r7, #22]
 800ba7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d007      	beq.n	800ba94 <put_lfn+0x6c>
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	1c5a      	adds	r2, r3, #1
 800ba88:	61fa      	str	r2, [r7, #28]
 800ba8a:	005b      	lsls	r3, r3, #1
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	881b      	ldrh	r3, [r3, #0]
 800ba92:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ba94:	4a17      	ldr	r2, [pc, #92]	@ (800baf4 <put_lfn+0xcc>)
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	4413      	add	r3, r2
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	4413      	add	r3, r2
 800baa2:	8afa      	ldrh	r2, [r7, #22]
 800baa4:	4611      	mov	r1, r2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fe fc37 	bl	800a31a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800baac:	8afb      	ldrh	r3, [r7, #22]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d102      	bne.n	800bab8 <put_lfn+0x90>
 800bab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bab6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	3301      	adds	r3, #1
 800babc:	61bb      	str	r3, [r7, #24]
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	2b0c      	cmp	r3, #12
 800bac2:	d9da      	bls.n	800ba7a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bac4:	8afb      	ldrh	r3, [r7, #22]
 800bac6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800baca:	4293      	cmp	r3, r2
 800bacc:	d006      	beq.n	800badc <put_lfn+0xb4>
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	4413      	add	r3, r2
 800bad6:	881b      	ldrh	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d103      	bne.n	800bae4 <put_lfn+0xbc>
 800badc:	79fb      	ldrb	r3, [r7, #7]
 800bade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bae2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	79fa      	ldrb	r2, [r7, #7]
 800bae8:	701a      	strb	r2, [r3, #0]
}
 800baea:	bf00      	nop
 800baec:	3720      	adds	r7, #32
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	0800fa0c 	.word	0x0800fa0c

0800baf8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b08c      	sub	sp, #48	@ 0x30
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
 800bb04:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bb06:	220b      	movs	r2, #11
 800bb08:	68b9      	ldr	r1, [r7, #8]
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f7fe fcd4 	bl	800a4b8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2b05      	cmp	r3, #5
 800bb14:	d92b      	bls.n	800bb6e <gen_numname+0x76>
		sr = seq;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bb1a:	e022      	b.n	800bb62 <gen_numname+0x6a>
			wc = *lfn++;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	1c9a      	adds	r2, r3, #2
 800bb20:	607a      	str	r2, [r7, #4]
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800bb26:	2300      	movs	r3, #0
 800bb28:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb2a:	e017      	b.n	800bb5c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	005a      	lsls	r2, r3, #1
 800bb30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	4413      	add	r3, r2
 800bb38:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bb3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb3c:	085b      	lsrs	r3, r3, #1
 800bb3e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d005      	beq.n	800bb56 <gen_numname+0x5e>
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800bb50:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800bb54:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb58:	3301      	adds	r3, #1
 800bb5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb5e:	2b0f      	cmp	r3, #15
 800bb60:	d9e4      	bls.n	800bb2c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	881b      	ldrh	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1d8      	bne.n	800bb1c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bb6e:	2307      	movs	r3, #7
 800bb70:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	f003 030f 	and.w	r3, r3, #15
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	3330      	adds	r3, #48	@ 0x30
 800bb7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800bb82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb86:	2b39      	cmp	r3, #57	@ 0x39
 800bb88:	d904      	bls.n	800bb94 <gen_numname+0x9c>
 800bb8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb8e:	3307      	adds	r3, #7
 800bb90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800bb94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb96:	1e5a      	subs	r2, r3, #1
 800bb98:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bb9a:	3330      	adds	r3, #48	@ 0x30
 800bb9c:	443b      	add	r3, r7
 800bb9e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bba2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	091b      	lsrs	r3, r3, #4
 800bbaa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1df      	bne.n	800bb72 <gen_numname+0x7a>
	ns[i] = '~';
 800bbb2:	f107 0214 	add.w	r2, r7, #20
 800bbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb8:	4413      	add	r3, r2
 800bbba:	227e      	movs	r2, #126	@ 0x7e
 800bbbc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc2:	e002      	b.n	800bbca <gen_numname+0xd2>
 800bbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d205      	bcs.n	800bbde <gen_numname+0xe6>
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd6:	4413      	add	r3, r2
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	2b20      	cmp	r3, #32
 800bbdc:	d1f2      	bne.n	800bbc4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe0:	2b07      	cmp	r3, #7
 800bbe2:	d807      	bhi.n	800bbf4 <gen_numname+0xfc>
 800bbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bbea:	3330      	adds	r3, #48	@ 0x30
 800bbec:	443b      	add	r3, r7
 800bbee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bbf2:	e000      	b.n	800bbf6 <gen_numname+0xfe>
 800bbf4:	2120      	movs	r1, #32
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	460a      	mov	r2, r1
 800bc02:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc06:	2b07      	cmp	r3, #7
 800bc08:	d9e9      	bls.n	800bbde <gen_numname+0xe6>
}
 800bc0a:	bf00      	nop
 800bc0c:	bf00      	nop
 800bc0e:	3730      	adds	r7, #48	@ 0x30
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bc20:	230b      	movs	r3, #11
 800bc22:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	0852      	lsrs	r2, r2, #1
 800bc2a:	01db      	lsls	r3, r3, #7
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	1c59      	adds	r1, r3, #1
 800bc34:	6079      	str	r1, [r7, #4]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	4413      	add	r3, r2
 800bc3a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	60bb      	str	r3, [r7, #8]
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1ed      	bne.n	800bc24 <sum_sfn+0x10>
	return sum;
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b087      	sub	sp, #28
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	3301      	adds	r3, #1
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	3301      	adds	r3, #1
 800bc66:	015b      	lsls	r3, r3, #5
 800bc68:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	827b      	strh	r3, [r7, #18]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	617b      	str	r3, [r7, #20]
 800bc72:	e015      	b.n	800bca0 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d103      	bne.n	800bc82 <xdir_sum+0x2c>
			i++;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	617b      	str	r3, [r7, #20]
 800bc80:	e00b      	b.n	800bc9a <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800bc82:	8a7b      	ldrh	r3, [r7, #18]
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	0852      	lsrs	r2, r2, #1
 800bc88:	03db      	lsls	r3, r3, #15
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	440a      	add	r2, r1
 800bc94:	7812      	ldrb	r2, [r2, #0]
 800bc96:	4413      	add	r3, r2
 800bc98:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	617b      	str	r3, [r7, #20]
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d3e5      	bcc.n	800bc74 <xdir_sum+0x1e>
		}
	}
	return sum;
 800bca8:	8a7b      	ldrh	r3, [r7, #18]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	371c      	adds	r7, #28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr

0800bcb6 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b084      	sub	sp, #16
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800bcc2:	e01b      	b.n	800bcfc <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800bcc4:	89bb      	ldrh	r3, [r7, #12]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f002 ff6a 	bl	800eba0 <ff_wtoupper>
 800bccc:	4603      	mov	r3, r0
 800bcce:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800bcd0:	89fb      	ldrh	r3, [r7, #14]
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	0852      	lsrs	r2, r2, #1
 800bcd6:	03db      	lsls	r3, r3, #15
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	b29a      	uxth	r2, r3
 800bcdc:	89bb      	ldrh	r3, [r7, #12]
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	4413      	add	r3, r2
 800bce4:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800bce6:	89fb      	ldrh	r3, [r7, #14]
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	0852      	lsrs	r2, r2, #1
 800bcec:	03db      	lsls	r3, r3, #15
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	89bb      	ldrh	r3, [r7, #12]
 800bcf4:	0a1b      	lsrs	r3, r3, #8
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	4413      	add	r3, r2
 800bcfa:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	1c9a      	adds	r2, r3, #2
 800bd00:	607a      	str	r2, [r7, #4]
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	81bb      	strh	r3, [r7, #12]
 800bd06:	89bb      	ldrh	r3, [r7, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1db      	bne.n	800bcc4 <xname_sum+0xe>
	}
	return sum;
 800bd0c:	89fb      	ldrh	r3, [r7, #14]
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
	...

0800bd18 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800bd18:	b590      	push	{r4, r7, lr}
 800bd1a:	b087      	sub	sp, #28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd30:	4619      	mov	r1, r3
 800bd32:	4610      	mov	r0, r2
 800bd34:	f7fe fdee 	bl	800a914 <move_window>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <load_xdir+0x2e>
 800bd42:	7bfb      	ldrb	r3, [r7, #15]
 800bd44:	e09f      	b.n	800be86 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	2b85      	cmp	r3, #133	@ 0x85
 800bd4e:	d001      	beq.n	800bd54 <load_xdir+0x3c>
 800bd50:	2302      	movs	r3, #2
 800bd52:	e098      	b.n	800be86 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd58:	2220      	movs	r2, #32
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	6938      	ldr	r0, [r7, #16]
 800bd5e:	f7fe fbab 	bl	800a4b8 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	3301      	adds	r3, #1
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	015b      	lsls	r3, r3, #5
 800bd6c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2b5f      	cmp	r3, #95	@ 0x5f
 800bd72:	d903      	bls.n	800bd7c <load_xdir+0x64>
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800bd7a:	d901      	bls.n	800bd80 <load_xdir+0x68>
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	e082      	b.n	800be86 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800bd80:	2100      	movs	r1, #0
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7ff fc0b 	bl	800b59e <dir_next>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <load_xdir+0x7e>
 800bd92:	7bfb      	ldrb	r3, [r7, #15]
 800bd94:	e077      	b.n	800be86 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9e:	4619      	mov	r1, r3
 800bda0:	4610      	mov	r0, r2
 800bda2:	f7fe fdb7 	bl	800a914 <move_window>
 800bda6:	4603      	mov	r3, r0
 800bda8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <load_xdir+0x9c>
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	e068      	b.n	800be86 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	2bc0      	cmp	r3, #192	@ 0xc0
 800bdbc:	d001      	beq.n	800bdc2 <load_xdir+0xaa>
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	e061      	b.n	800be86 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	f103 0020 	add.w	r0, r3, #32
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdcc:	2220      	movs	r2, #32
 800bdce:	4619      	mov	r1, r3
 800bdd0:	f7fe fb72 	bl	800a4b8 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	3323      	adds	r3, #35	@ 0x23
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	332c      	adds	r3, #44	@ 0x2c
 800bddc:	4a2c      	ldr	r2, [pc, #176]	@ (800be90 <load_xdir+0x178>)
 800bdde:	fba2 2303 	umull	r2, r3, r2, r3
 800bde2:	08db      	lsrs	r3, r3, #3
 800bde4:	015b      	lsls	r3, r3, #5
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d201      	bcs.n	800bdf0 <load_xdir+0xd8>
 800bdec:	2302      	movs	r3, #2
 800bdee:	e04a      	b.n	800be86 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800bdf0:	2340      	movs	r3, #64	@ 0x40
 800bdf2:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7ff fbd1 	bl	800b59e <dir_next>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800be00:	7bfb      	ldrb	r3, [r7, #15]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <load_xdir+0xf2>
 800be06:	7bfb      	ldrb	r3, [r7, #15]
 800be08:	e03d      	b.n	800be86 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be12:	4619      	mov	r1, r3
 800be14:	4610      	mov	r0, r2
 800be16:	f7fe fd7d 	bl	800a914 <move_window>
 800be1a:	4603      	mov	r3, r0
 800be1c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d001      	beq.n	800be28 <load_xdir+0x110>
 800be24:	7bfb      	ldrb	r3, [r7, #15]
 800be26:	e02e      	b.n	800be86 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	2bc1      	cmp	r3, #193	@ 0xc1
 800be30:	d001      	beq.n	800be36 <load_xdir+0x11e>
 800be32:	2302      	movs	r3, #2
 800be34:	e027      	b.n	800be86 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800be3c:	d208      	bcs.n	800be50 <load_xdir+0x138>
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	18d0      	adds	r0, r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be48:	2220      	movs	r2, #32
 800be4a:	4619      	mov	r1, r3
 800be4c:	f7fe fb34 	bl	800a4b8 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	3320      	adds	r3, #32
 800be54:	617b      	str	r3, [r7, #20]
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d3ca      	bcc.n	800bdf4 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800be64:	d80e      	bhi.n	800be84 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800be66:	6938      	ldr	r0, [r7, #16]
 800be68:	f7ff fef5 	bl	800bc56 <xdir_sum>
 800be6c:	4603      	mov	r3, r0
 800be6e:	461c      	mov	r4, r3
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	3302      	adds	r3, #2
 800be74:	4618      	mov	r0, r3
 800be76:	f7fe f939 	bl	800a0ec <ld_word>
 800be7a:	4603      	mov	r3, r0
 800be7c:	429c      	cmp	r4, r3
 800be7e:	d001      	beq.n	800be84 <load_xdir+0x16c>
 800be80:	2302      	movs	r3, #2
 800be82:	e000      	b.n	800be86 <load_xdir+0x16e>
	}
	return FR_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	371c      	adds	r7, #28
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd90      	pop	{r4, r7, pc}
 800be8e:	bf00      	nop
 800be90:	88888889 	.word	0x88888889

0800be94 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800be94:	b5b0      	push	{r4, r5, r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6808      	ldr	r0, [r1, #0]
 800bea2:	6879      	ldr	r1, [r7, #4]
 800bea4:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6a08      	ldr	r0, [r1, #32]
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800beb2:	b2c8      	uxtb	r0, r1
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800beb8:	6839      	ldr	r1, [r7, #0]
 800beba:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800bebc:	2000      	movs	r0, #0
 800bebe:	460c      	mov	r4, r1
 800bec0:	4605      	mov	r5, r0
 800bec2:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800bec6:	2300      	movs	r3, #0
 800bec8:	6879      	ldr	r1, [r7, #4]
 800beca:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beda:	4619      	mov	r1, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f7ff fad8 	bl	800b492 <dir_sdi>
 800bee2:	4603      	mov	r3, r0
 800bee4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d104      	bne.n	800bef6 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff ff13 	bl	800bd18 <load_xdir>
 800bef2:	4603      	mov	r3, r0
 800bef4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bdb0      	pop	{r4, r5, r7, pc}

0800bf00 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800bf00:	b590      	push	{r4, r7, lr}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	1c9c      	adds	r4, r3, #2
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f7ff fe9e 	bl	800bc56 <xdir_sum>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7fe f9fb 	bl	800a31a <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	3301      	adds	r3, #1
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff faac 	bl	800b492 <dir_sdi>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bf3e:	e026      	b.n	800bf8e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf48:	4619      	mov	r1, r3
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	f7fe fce2 	bl	800a914 <move_window>
 800bf50:	4603      	mov	r3, r0
 800bf52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf54:	7dfb      	ldrb	r3, [r7, #23]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d11d      	bne.n	800bf96 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf5e:	2220      	movs	r2, #32
 800bf60:	68f9      	ldr	r1, [r7, #12]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fe faa8 	bl	800a4b8 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	3b01      	subs	r3, #1
 800bf74:	613b      	str	r3, [r7, #16]
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00e      	beq.n	800bf9a <store_xdir+0x9a>
		dirb += SZDIRE;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	3320      	adds	r3, #32
 800bf80:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800bf82:	2100      	movs	r1, #0
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff fb0a 	bl	800b59e <dir_next>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d0d5      	beq.n	800bf40 <store_xdir+0x40>
 800bf94:	e002      	b.n	800bf9c <store_xdir+0x9c>
		if (res != FR_OK) break;
 800bf96:	bf00      	nop
 800bf98:	e000      	b.n	800bf9c <store_xdir+0x9c>
		if (--nent == 0) break;
 800bf9a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800bf9c:	7dfb      	ldrb	r3, [r7, #23]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d002      	beq.n	800bfa8 <store_xdir+0xa8>
 800bfa2:	7dfb      	ldrb	r3, [r7, #23]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d101      	bne.n	800bfac <store_xdir+0xac>
 800bfa8:	7dfb      	ldrb	r3, [r7, #23]
 800bfaa:	e000      	b.n	800bfae <store_xdir+0xae>
 800bfac:	2302      	movs	r3, #2
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	371c      	adds	r7, #28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd90      	pop	{r4, r7, pc}

0800bfb6 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800bfb6:	b590      	push	{r4, r7, lr}
 800bfb8:	b085      	sub	sp, #20
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800bfc0:	2240      	movs	r2, #64	@ 0x40
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7fe fa98 	bl	800a4fa <mem_set>
	dirb[XDIR_Type] = 0x85;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2285      	movs	r2, #133	@ 0x85
 800bfce:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3320      	adds	r3, #32
 800bfd4:	22c0      	movs	r2, #192	@ 0xc0
 800bfd6:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	72bb      	strb	r3, [r7, #10]
 800bfdc:	2301      	movs	r3, #1
 800bfde:	72fb      	strb	r3, [r7, #11]
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	813b      	strh	r3, [r7, #8]
 800bfe4:	2340      	movs	r3, #64	@ 0x40
 800bfe6:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	60fa      	str	r2, [r7, #12]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	4413      	add	r3, r2
 800bff2:	22c1      	movs	r2, #193	@ 0xc1
 800bff4:	701a      	strb	r2, [r3, #0]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	1c5a      	adds	r2, r3, #1
 800bffa:	60fa      	str	r2, [r7, #12]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	4413      	add	r3, r2
 800c000:	2200      	movs	r2, #0
 800c002:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c004:	893b      	ldrh	r3, [r7, #8]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00b      	beq.n	800c022 <create_xdir+0x6c>
 800c00a:	7abb      	ldrb	r3, [r7, #10]
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	4413      	add	r3, r2
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	813b      	strh	r3, [r7, #8]
 800c016:	893b      	ldrh	r3, [r7, #8]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <create_xdir+0x6c>
 800c01c:	7abb      	ldrb	r3, [r7, #10]
 800c01e:	3301      	adds	r3, #1
 800c020:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	4413      	add	r3, r2
 800c028:	893a      	ldrh	r2, [r7, #8]
 800c02a:	4611      	mov	r1, r2
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe f974 	bl	800a31a <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	3302      	adds	r3, #2
 800c036:	60fb      	str	r3, [r7, #12]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f003 031f 	and.w	r3, r3, #31
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1e0      	bne.n	800c004 <create_xdir+0x4e>
		nb++;
 800c042:	7afb      	ldrb	r3, [r7, #11]
 800c044:	3301      	adds	r3, #1
 800c046:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c048:	7abb      	ldrb	r3, [r7, #10]
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	683a      	ldr	r2, [r7, #0]
 800c04e:	4413      	add	r3, r2
 800c050:	881b      	ldrh	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1c8      	bne.n	800bfe8 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	3323      	adds	r3, #35	@ 0x23
 800c05a:	7aba      	ldrb	r2, [r7, #10]
 800c05c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3301      	adds	r3, #1
 800c062:	7afa      	ldrb	r2, [r7, #11]
 800c064:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800c06c:	6838      	ldr	r0, [r7, #0]
 800c06e:	f7ff fe22 	bl	800bcb6 <xname_sum>
 800c072:	4603      	mov	r3, r0
 800c074:	4619      	mov	r1, r3
 800c076:	4620      	mov	r0, r4
 800c078:	f7fe f94f 	bl	800a31a <st_word>
}
 800c07c:	bf00      	nop
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	bd90      	pop	{r4, r7, pc}

0800c084 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c08e:	2304      	movs	r3, #4
 800c090:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c098:	23ff      	movs	r3, #255	@ 0xff
 800c09a:	757b      	strb	r3, [r7, #21]
 800c09c:	23ff      	movs	r3, #255	@ 0xff
 800c09e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c0a0:	e09f      	b.n	800c1e2 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	6938      	ldr	r0, [r7, #16]
 800c0aa:	f7fe fc33 	bl	800a914 <move_window>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f040 809a 	bne.w	800c1ee <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c0c2:	7dbb      	ldrb	r3, [r7, #22]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d102      	bne.n	800c0ce <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c0c8:	2304      	movs	r3, #4
 800c0ca:	75fb      	strb	r3, [r7, #23]
 800c0cc:	e096      	b.n	800c1fc <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	2b04      	cmp	r3, #4
 800c0d4:	d118      	bne.n	800c108 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800c0d6:	7dbb      	ldrb	r3, [r7, #22]
 800c0d8:	2b85      	cmp	r3, #133	@ 0x85
 800c0da:	d179      	bne.n	800c1d0 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f7ff fe17 	bl	800bd18 <load_xdir>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800c0ee:	7dfb      	ldrb	r3, [r7, #23]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d17e      	bne.n	800c1f2 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c100:	b2da      	uxtb	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	719a      	strb	r2, [r3, #6]
					}
					break;
 800c106:	e074      	b.n	800c1f2 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c10c:	330b      	adds	r3, #11
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c114:	73fb      	strb	r3, [r7, #15]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	7bfa      	ldrb	r2, [r7, #15]
 800c11a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c11c:	7dbb      	ldrb	r3, [r7, #22]
 800c11e:	2be5      	cmp	r3, #229	@ 0xe5
 800c120:	d00e      	beq.n	800c140 <dir_read+0xbc>
 800c122:	7dbb      	ldrb	r3, [r7, #22]
 800c124:	2b2e      	cmp	r3, #46	@ 0x2e
 800c126:	d00b      	beq.n	800c140 <dir_read+0xbc>
 800c128:	7bfb      	ldrb	r3, [r7, #15]
 800c12a:	f023 0320 	bic.w	r3, r3, #32
 800c12e:	2b08      	cmp	r3, #8
 800c130:	bf0c      	ite	eq
 800c132:	2301      	moveq	r3, #1
 800c134:	2300      	movne	r3, #0
 800c136:	b2db      	uxtb	r3, r3
 800c138:	461a      	mov	r2, r3
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d002      	beq.n	800c146 <dir_read+0xc2>
				ord = 0xFF;
 800c140:	23ff      	movs	r3, #255	@ 0xff
 800c142:	757b      	strb	r3, [r7, #21]
 800c144:	e044      	b.n	800c1d0 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c146:	7bfb      	ldrb	r3, [r7, #15]
 800c148:	2b0f      	cmp	r3, #15
 800c14a:	d12f      	bne.n	800c1ac <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c14c:	7dbb      	ldrb	r3, [r7, #22]
 800c14e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00d      	beq.n	800c172 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c15a:	7b5b      	ldrb	r3, [r3, #13]
 800c15c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c15e:	7dbb      	ldrb	r3, [r7, #22]
 800c160:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c164:	75bb      	strb	r3, [r7, #22]
 800c166:	7dbb      	ldrb	r3, [r7, #22]
 800c168:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c172:	7dba      	ldrb	r2, [r7, #22]
 800c174:	7d7b      	ldrb	r3, [r7, #21]
 800c176:	429a      	cmp	r2, r3
 800c178:	d115      	bne.n	800c1a6 <dir_read+0x122>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c17e:	330d      	adds	r3, #13
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	7d3a      	ldrb	r2, [r7, #20]
 800c184:	429a      	cmp	r2, r3
 800c186:	d10e      	bne.n	800c1a6 <dir_read+0x122>
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	68da      	ldr	r2, [r3, #12]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c190:	4619      	mov	r1, r3
 800c192:	4610      	mov	r0, r2
 800c194:	f7ff fbe4 	bl	800b960 <pick_lfn>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <dir_read+0x122>
 800c19e:	7d7b      	ldrb	r3, [r7, #21]
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	e000      	b.n	800c1a8 <dir_read+0x124>
 800c1a6:	23ff      	movs	r3, #255	@ 0xff
 800c1a8:	757b      	strb	r3, [r7, #21]
 800c1aa:	e011      	b.n	800c1d0 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c1ac:	7d7b      	ldrb	r3, [r7, #21]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d109      	bne.n	800c1c6 <dir_read+0x142>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7ff fd2c 	bl	800bc14 <sum_sfn>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	461a      	mov	r2, r3
 800c1c0:	7d3b      	ldrb	r3, [r7, #20]
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d017      	beq.n	800c1f6 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1cc:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800c1ce:	e012      	b.n	800c1f6 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7ff f9e3 	bl	800b59e <dir_next>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c1dc:	7dfb      	ldrb	r3, [r7, #23]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10b      	bne.n	800c1fa <dir_read+0x176>
	while (dp->sect) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f47f af5b 	bne.w	800c0a2 <dir_read+0x1e>
 800c1ec:	e006      	b.n	800c1fc <dir_read+0x178>
		if (res != FR_OK) break;
 800c1ee:	bf00      	nop
 800c1f0:	e004      	b.n	800c1fc <dir_read+0x178>
					break;
 800c1f2:	bf00      	nop
 800c1f4:	e002      	b.n	800c1fc <dir_read+0x178>
					break;
 800c1f6:	bf00      	nop
 800c1f8:	e000      	b.n	800c1fc <dir_read+0x178>
		if (res != FR_OK) break;
 800c1fa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <dir_read+0x184>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800c208:	7dfb      	ldrb	r3, [r7, #23]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c212:	b590      	push	{r4, r7, lr}
 800c214:	b089      	sub	sp, #36	@ 0x24
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c220:	2100      	movs	r1, #0
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7ff f935 	bl	800b492 <dir_sdi>
 800c228:	4603      	mov	r3, r0
 800c22a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800c22c:	7ffb      	ldrb	r3, [r7, #31]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <dir_find+0x24>
 800c232:	7ffb      	ldrb	r3, [r7, #31]
 800c234:	e113      	b.n	800c45e <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b04      	cmp	r3, #4
 800c23c:	d165      	bne.n	800c30a <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff fd37 	bl	800bcb6 <xname_sum>
 800c248:	4603      	mov	r3, r0
 800c24a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c24c:	e050      	b.n	800c2f0 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	3324      	adds	r3, #36	@ 0x24
 800c254:	4618      	mov	r0, r3
 800c256:	f7fd ff49 	bl	800a0ec <ld_word>
 800c25a:	4603      	mov	r3, r0
 800c25c:	461a      	mov	r2, r3
 800c25e:	893b      	ldrh	r3, [r7, #8]
 800c260:	4293      	cmp	r3, r2
 800c262:	d144      	bne.n	800c2ee <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c26c:	76fb      	strb	r3, [r7, #27]
 800c26e:	2340      	movs	r3, #64	@ 0x40
 800c270:	617b      	str	r3, [r7, #20]
 800c272:	2300      	movs	r3, #0
 800c274:	613b      	str	r3, [r7, #16]
 800c276:	e029      	b.n	800c2cc <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	f003 031f 	and.w	r3, r3, #31
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d102      	bne.n	800c288 <dir_find+0x76>
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	3302      	adds	r3, #2
 800c286:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	691a      	ldr	r2, [r3, #16]
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	4413      	add	r3, r2
 800c290:	4618      	mov	r0, r3
 800c292:	f7fd ff2b 	bl	800a0ec <ld_word>
 800c296:	4603      	mov	r3, r0
 800c298:	4618      	mov	r0, r3
 800c29a:	f002 fc81 	bl	800eba0 <ff_wtoupper>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	461c      	mov	r4, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	68da      	ldr	r2, [r3, #12]
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	005b      	lsls	r3, r3, #1
 800c2aa:	4413      	add	r3, r2
 800c2ac:	881b      	ldrh	r3, [r3, #0]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f002 fc76 	bl	800eba0 <ff_wtoupper>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	429c      	cmp	r4, r3
 800c2b8:	d10c      	bne.n	800c2d4 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c2ba:	7efb      	ldrb	r3, [r7, #27]
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	76fb      	strb	r3, [r7, #27]
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	3302      	adds	r3, #2
 800c2c4:	617b      	str	r3, [r7, #20]
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	613b      	str	r3, [r7, #16]
 800c2cc:	7efb      	ldrb	r3, [r7, #27]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1d2      	bne.n	800c278 <dir_find+0x66>
 800c2d2:	e000      	b.n	800c2d6 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c2d4:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c2d6:	7efb      	ldrb	r3, [r7, #27]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d109      	bne.n	800c2f0 <dir_find+0xde>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	68da      	ldr	r2, [r3, #12]
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	4413      	add	r3, r2
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <dir_find+0xf2>
 800c2ec:	e000      	b.n	800c2f0 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c2ee:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff fec6 	bl	800c084 <dir_read>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	77fb      	strb	r3, [r7, #31]
 800c2fc:	7ffb      	ldrb	r3, [r7, #31]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d0a5      	beq.n	800c24e <dir_find+0x3c>
 800c302:	e000      	b.n	800c306 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c304:	bf00      	nop
		}
		return res;
 800c306:	7ffb      	ldrb	r3, [r7, #31]
 800c308:	e0a9      	b.n	800c45e <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c30a:	23ff      	movs	r3, #255	@ 0xff
 800c30c:	773b      	strb	r3, [r7, #28]
 800c30e:	7f3b      	ldrb	r3, [r7, #28]
 800c310:	777b      	strb	r3, [r7, #29]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f04f 32ff 	mov.w	r2, #4294967295
 800c318:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c31e:	4619      	mov	r1, r3
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f7fe faf7 	bl	800a914 <move_window>
 800c326:	4603      	mov	r3, r0
 800c328:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c32a:	7ffb      	ldrb	r3, [r7, #31]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f040 8090 	bne.w	800c452 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c33a:	7fbb      	ldrb	r3, [r7, #30]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d102      	bne.n	800c346 <dir_find+0x134>
 800c340:	2304      	movs	r3, #4
 800c342:	77fb      	strb	r3, [r7, #31]
 800c344:	e08a      	b.n	800c45c <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c34a:	330b      	adds	r3, #11
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c352:	72fb      	strb	r3, [r7, #11]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	7afa      	ldrb	r2, [r7, #11]
 800c358:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c35a:	7fbb      	ldrb	r3, [r7, #30]
 800c35c:	2be5      	cmp	r3, #229	@ 0xe5
 800c35e:	d007      	beq.n	800c370 <dir_find+0x15e>
 800c360:	7afb      	ldrb	r3, [r7, #11]
 800c362:	f003 0308 	and.w	r3, r3, #8
 800c366:	2b00      	cmp	r3, #0
 800c368:	d009      	beq.n	800c37e <dir_find+0x16c>
 800c36a:	7afb      	ldrb	r3, [r7, #11]
 800c36c:	2b0f      	cmp	r3, #15
 800c36e:	d006      	beq.n	800c37e <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c370:	23ff      	movs	r3, #255	@ 0xff
 800c372:	777b      	strb	r3, [r7, #29]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f04f 32ff 	mov.w	r2, #4294967295
 800c37a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c37c:	e05e      	b.n	800c43c <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c37e:	7afb      	ldrb	r3, [r7, #11]
 800c380:	2b0f      	cmp	r3, #15
 800c382:	d136      	bne.n	800c3f2 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c38a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d154      	bne.n	800c43c <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c392:	7fbb      	ldrb	r3, [r7, #30]
 800c394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00d      	beq.n	800c3b8 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3a0:	7b5b      	ldrb	r3, [r3, #13]
 800c3a2:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c3a4:	7fbb      	ldrb	r3, [r7, #30]
 800c3a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3aa:	77bb      	strb	r3, [r7, #30]
 800c3ac:	7fbb      	ldrb	r3, [r7, #30]
 800c3ae:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c3b8:	7fba      	ldrb	r2, [r7, #30]
 800c3ba:	7f7b      	ldrb	r3, [r7, #29]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d115      	bne.n	800c3ec <dir_find+0x1da>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3c4:	330d      	adds	r3, #13
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	7f3a      	ldrb	r2, [r7, #28]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d10e      	bne.n	800c3ec <dir_find+0x1da>
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	68da      	ldr	r2, [r3, #12]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	4610      	mov	r0, r2
 800c3da:	f7ff fa51 	bl	800b880 <cmp_lfn>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d003      	beq.n	800c3ec <dir_find+0x1da>
 800c3e4:	7f7b      	ldrb	r3, [r7, #29]
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	e000      	b.n	800c3ee <dir_find+0x1dc>
 800c3ec:	23ff      	movs	r3, #255	@ 0xff
 800c3ee:	777b      	strb	r3, [r7, #29]
 800c3f0:	e024      	b.n	800c43c <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c3f2:	7f7b      	ldrb	r3, [r7, #29]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d109      	bne.n	800c40c <dir_find+0x1fa>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7ff fc09 	bl	800bc14 <sum_sfn>
 800c402:	4603      	mov	r3, r0
 800c404:	461a      	mov	r2, r3
 800c406:	7f3b      	ldrb	r3, [r7, #28]
 800c408:	4293      	cmp	r3, r2
 800c40a:	d024      	beq.n	800c456 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c412:	f003 0301 	and.w	r3, r3, #1
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10a      	bne.n	800c430 <dir_find+0x21e>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3340      	adds	r3, #64	@ 0x40
 800c422:	220b      	movs	r2, #11
 800c424:	4619      	mov	r1, r3
 800c426:	f7fe f883 	bl	800a530 <mem_cmp>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d014      	beq.n	800c45a <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c430:	23ff      	movs	r3, #255	@ 0xff
 800c432:	777b      	strb	r3, [r7, #29]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f04f 32ff 	mov.w	r2, #4294967295
 800c43a:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c43c:	2100      	movs	r1, #0
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff f8ad 	bl	800b59e <dir_next>
 800c444:	4603      	mov	r3, r0
 800c446:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c448:	7ffb      	ldrb	r3, [r7, #31]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f43f af65 	beq.w	800c31a <dir_find+0x108>
 800c450:	e004      	b.n	800c45c <dir_find+0x24a>
		if (res != FR_OK) break;
 800c452:	bf00      	nop
 800c454:	e002      	b.n	800c45c <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c456:	bf00      	nop
 800c458:	e000      	b.n	800c45c <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c45a:	bf00      	nop

	return res;
 800c45c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3724      	adds	r7, #36	@ 0x24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd90      	pop	{r4, r7, pc}
	...

0800c468 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c468:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c46c:	b0a0      	sub	sp, #128	@ 0x80
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c47e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d001      	beq.n	800c48a <dir_register+0x22>
 800c486:	2306      	movs	r3, #6
 800c488:	e18e      	b.n	800c7a8 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c48a:	2300      	movs	r3, #0
 800c48c:	677b      	str	r3, [r7, #116]	@ 0x74
 800c48e:	e002      	b.n	800c496 <dir_register+0x2e>
 800c490:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c492:	3301      	adds	r3, #1
 800c494:	677b      	str	r3, [r7, #116]	@ 0x74
 800c496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c498:	68da      	ldr	r2, [r3, #12]
 800c49a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	4413      	add	r3, r2
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1f4      	bne.n	800c490 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c4a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	2b04      	cmp	r3, #4
 800c4ac:	f040 809f 	bne.w	800c5ee <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c4b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4b2:	330e      	adds	r3, #14
 800c4b4:	4aa2      	ldr	r2, [pc, #648]	@ (800c740 <dir_register+0x2d8>)
 800c4b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4ba:	08db      	lsrs	r3, r3, #3
 800c4bc:	3302      	adds	r3, #2
 800c4be:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c4c0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7ff f940 	bl	800b748 <dir_alloc>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800c4ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d002      	beq.n	800c4dc <dir_register+0x74>
 800c4d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c4da:	e165      	b.n	800c7a8 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	015b      	lsls	r3, r3, #5
 800c4e6:	1ad2      	subs	r2, r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d072      	beq.n	800c5da <dir_register+0x172>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	79db      	ldrb	r3, [r3, #7]
 800c4f8:	f003 0304 	and.w	r3, r3, #4
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d06c      	beq.n	800c5da <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c506:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c508:	8949      	ldrh	r1, [r1, #10]
 800c50a:	0249      	lsls	r1, r1, #9
 800c50c:	2000      	movs	r0, #0
 800c50e:	460c      	mov	r4, r1
 800c510:	4605      	mov	r5, r0
 800c512:	eb12 0804 	adds.w	r8, r2, r4
 800c516:	eb43 0905 	adc.w	r9, r3, r5
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe fda0 	bl	800b068 <fill_first_frag>
 800c528:	4603      	mov	r3, r0
 800c52a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c52e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c532:	2b00      	cmp	r3, #0
 800c534:	d002      	beq.n	800c53c <dir_register+0xd4>
 800c536:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c53a:	e135      	b.n	800c7a8 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c542:	f04f 32ff 	mov.w	r2, #4294967295
 800c546:	4619      	mov	r1, r3
 800c548:	f7fe fdbd 	bl	800b0c6 <fill_last_frag>
 800c54c:	4603      	mov	r3, r0
 800c54e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c552:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c556:	2b00      	cmp	r3, #0
 800c558:	d002      	beq.n	800c560 <dir_register+0xf8>
 800c55a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c55e:	e123      	b.n	800c7a8 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	f107 0308 	add.w	r3, r7, #8
 800c566:	4611      	mov	r1, r2
 800c568:	4618      	mov	r0, r3
 800c56a:	f7ff fc93 	bl	800be94 <load_obj_dir>
 800c56e:	4603      	mov	r3, r0
 800c570:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c574:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <dir_register+0x11a>
 800c57c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c580:	e112      	b.n	800c7a8 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c590:	4608      	mov	r0, r1
 800c592:	f7fd ff09 	bl	800a3a8 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	f7fd feff 	bl	800a3a8 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	79da      	ldrb	r2, [r3, #7]
 800c5ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	3321      	adds	r3, #33	@ 0x21
 800c5b4:	f042 0201 	orr.w	r2, r2, #1
 800c5b8:	b2d2      	uxtb	r2, r2
 800c5ba:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c5bc:	f107 0308 	add.w	r3, r7, #8
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7ff fc9d 	bl	800bf00 <store_xdir>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c5cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <dir_register+0x172>
 800c5d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5d8:	e0e6      	b.n	800c7a8 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c5da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5dc:	691a      	ldr	r2, [r3, #16]
 800c5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	f7ff fce6 	bl	800bfb6 <create_xdir>
		return FR_OK;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e0dc      	b.n	800c7a8 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800c5f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c5f8:	220c      	movs	r2, #12
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fd ff5c 	bl	800a4b8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c600:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c604:	f003 0301 	and.w	r3, r3, #1
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d033      	beq.n	800c674 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2240      	movs	r2, #64	@ 0x40
 800c610:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800c614:	2301      	movs	r3, #1
 800c616:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c618:	e016      	b.n	800c648 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800c620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c622:	68da      	ldr	r2, [r3, #12]
 800c624:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800c628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c62a:	f7ff fa65 	bl	800baf8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7ff fdef 	bl	800c212 <dir_find>
 800c634:	4603      	mov	r3, r0
 800c636:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800c63a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d106      	bne.n	800c650 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800c642:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c644:	3301      	adds	r3, #1
 800c646:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c64a:	2b63      	cmp	r3, #99	@ 0x63
 800c64c:	d9e5      	bls.n	800c61a <dir_register+0x1b2>
 800c64e:	e000      	b.n	800c652 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800c650:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c652:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c654:	2b64      	cmp	r3, #100	@ 0x64
 800c656:	d101      	bne.n	800c65c <dir_register+0x1f4>
 800c658:	2307      	movs	r3, #7
 800c65a:	e0a5      	b.n	800c7a8 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c65c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c660:	2b04      	cmp	r3, #4
 800c662:	d002      	beq.n	800c66a <dir_register+0x202>
 800c664:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c668:	e09e      	b.n	800c7a8 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c66a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c674:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c678:	f003 0302 	and.w	r3, r3, #2
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d007      	beq.n	800c690 <dir_register+0x228>
 800c680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c682:	330c      	adds	r3, #12
 800c684:	4a2f      	ldr	r2, [pc, #188]	@ (800c744 <dir_register+0x2dc>)
 800c686:	fba2 2303 	umull	r2, r3, r2, r3
 800c68a:	089b      	lsrs	r3, r3, #2
 800c68c:	3301      	adds	r3, #1
 800c68e:	e000      	b.n	800c692 <dir_register+0x22a>
 800c690:	2301      	movs	r3, #1
 800c692:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c694:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff f856 	bl	800b748 <dir_alloc>
 800c69c:	4603      	mov	r3, r0
 800c69e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c6a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d14f      	bne.n	800c74a <dir_register+0x2e2>
 800c6aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	673b      	str	r3, [r7, #112]	@ 0x70
 800c6b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d049      	beq.n	800c74a <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6bc:	015b      	lsls	r3, r3, #5
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7fe fee5 	bl	800b492 <dir_sdi>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c6ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d139      	bne.n	800c74a <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3340      	adds	r3, #64	@ 0x40
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7ff fa9a 	bl	800bc14 <sum_sfn>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c6ee:	f7fe f911 	bl	800a914 <move_window>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800c6f8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d123      	bne.n	800c748 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c702:	68d8      	ldr	r0, [r3, #12]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c708:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c710:	f7ff f98a 	bl	800ba28 <put_lfn>
				fs->wflag = 1;
 800c714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c716:	2201      	movs	r2, #1
 800c718:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c71a:	2100      	movs	r1, #0
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7fe ff3e 	bl	800b59e <dir_next>
 800c722:	4603      	mov	r3, r0
 800c724:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800c728:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10c      	bne.n	800c74a <dir_register+0x2e2>
 800c730:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c732:	3b01      	subs	r3, #1
 800c734:	673b      	str	r3, [r7, #112]	@ 0x70
 800c736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1d4      	bne.n	800c6e6 <dir_register+0x27e>
 800c73c:	e005      	b.n	800c74a <dir_register+0x2e2>
 800c73e:	bf00      	nop
 800c740:	88888889 	.word	0x88888889
 800c744:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800c748:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c74a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d128      	bne.n	800c7a4 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c756:	4619      	mov	r1, r3
 800c758:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c75a:	f7fe f8db 	bl	800a914 <move_window>
 800c75e:	4603      	mov	r3, r0
 800c760:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c764:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d11b      	bne.n	800c7a4 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c770:	2220      	movs	r2, #32
 800c772:	2100      	movs	r1, #0
 800c774:	4618      	mov	r0, r3
 800c776:	f7fd fec0 	bl	800a4fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	3340      	adds	r3, #64	@ 0x40
 800c782:	220b      	movs	r2, #11
 800c784:	4619      	mov	r1, r3
 800c786:	f7fd fe97 	bl	800a4b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c794:	330c      	adds	r3, #12
 800c796:	f002 0218 	and.w	r2, r2, #24
 800c79a:	b2d2      	uxtb	r2, r2
 800c79c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c79e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c7a4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3780      	adds	r7, #128	@ 0x80
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c7b2:	bf00      	nop

0800c7b4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b086      	sub	sp, #24
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d0:	d007      	beq.n	800c7e2 <dir_remove+0x2e>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f7fe fe5a 	bl	800b492 <dir_sdi>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	e000      	b.n	800c7e4 <dir_remove+0x30>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c7e6:	7dfb      	ldrb	r3, [r7, #23]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d136      	bne.n	800c85a <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6938      	ldr	r0, [r7, #16]
 800c7f4:	f7fe f88e 	bl	800a914 <move_window>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c7fc:	7dfb      	ldrb	r3, [r7, #23]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d123      	bne.n	800c84a <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	2b04      	cmp	r3, #4
 800c808:	d109      	bne.n	800c81e <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c80e:	781a      	ldrb	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c814:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c818:	b2d2      	uxtb	r2, r2
 800c81a:	701a      	strb	r2, [r3, #0]
 800c81c:	e003      	b.n	800c826 <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c822:	22e5      	movs	r2, #229	@ 0xe5
 800c824:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	2201      	movs	r2, #1
 800c82a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	429a      	cmp	r2, r3
 800c834:	d90b      	bls.n	800c84e <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 800c836:	2100      	movs	r1, #0
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f7fe feb0 	bl	800b59e <dir_next>
 800c83e:	4603      	mov	r3, r0
 800c840:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d0d1      	beq.n	800c7ec <dir_remove+0x38>
 800c848:	e002      	b.n	800c850 <dir_remove+0x9c>
			if (res != FR_OK) break;
 800c84a:	bf00      	nop
 800c84c:	e000      	b.n	800c850 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c84e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	2b04      	cmp	r3, #4
 800c854:	d101      	bne.n	800c85a <dir_remove+0xa6>
 800c856:	2302      	movs	r3, #2
 800c858:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800c85a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3718      	adds	r7, #24
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b08a      	sub	sp, #40	@ 0x28
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	613b      	str	r3, [r7, #16]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	2300      	movs	r3, #0
 800c87e:	617b      	str	r3, [r7, #20]
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	1c5a      	adds	r2, r3, #1
 800c888:	61ba      	str	r2, [r7, #24]
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	4413      	add	r3, r2
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c894:	2b1f      	cmp	r3, #31
 800c896:	d940      	bls.n	800c91a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c89a:	2b2f      	cmp	r3, #47	@ 0x2f
 800c89c:	d006      	beq.n	800c8ac <create_name+0x48>
 800c89e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8a0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c8a2:	d110      	bne.n	800c8c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c8a4:	e002      	b.n	800c8ac <create_name+0x48>
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	61bb      	str	r3, [r7, #24]
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c8b6:	d0f6      	beq.n	800c8a6 <create_name+0x42>
 800c8b8:	693a      	ldr	r2, [r7, #16]
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	4413      	add	r3, r2
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c8c2:	d0f0      	beq.n	800c8a6 <create_name+0x42>
			break;
 800c8c4:	e02a      	b.n	800c91c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	2bfe      	cmp	r3, #254	@ 0xfe
 800c8ca:	d901      	bls.n	800c8d0 <create_name+0x6c>
 800c8cc:	2306      	movs	r3, #6
 800c8ce:	e17d      	b.n	800cbcc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c8d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c8d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8d8:	2101      	movs	r1, #1
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f002 f924 	bl	800eb28 <ff_convert>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c8e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d101      	bne.n	800c8ee <create_name+0x8a>
 800c8ea:	2306      	movs	r3, #6
 800c8ec:	e16e      	b.n	800cbcc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c8ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8f0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8f2:	d809      	bhi.n	800c908 <create_name+0xa4>
 800c8f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	488d      	ldr	r0, [pc, #564]	@ (800cb30 <create_name+0x2cc>)
 800c8fa:	f7fd fe40 	bl	800a57e <chk_chr>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d001      	beq.n	800c908 <create_name+0xa4>
 800c904:	2306      	movs	r3, #6
 800c906:	e161      	b.n	800cbcc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	1c5a      	adds	r2, r3, #1
 800c90c:	617a      	str	r2, [r7, #20]
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	4413      	add	r3, r2
 800c914:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c916:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c918:	e7b4      	b.n	800c884 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c91a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	441a      	add	r2, r3
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c928:	2b1f      	cmp	r3, #31
 800c92a:	d801      	bhi.n	800c930 <create_name+0xcc>
 800c92c:	2304      	movs	r3, #4
 800c92e:	e000      	b.n	800c932 <create_name+0xce>
 800c930:	2300      	movs	r3, #0
 800c932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c936:	e011      	b.n	800c95c <create_name+0xf8>
		w = lfn[di - 1];
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c93e:	3b01      	subs	r3, #1
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	4413      	add	r3, r2
 800c946:	881b      	ldrh	r3, [r3, #0]
 800c948:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800c94a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c94c:	2b20      	cmp	r3, #32
 800c94e:	d002      	beq.n	800c956 <create_name+0xf2>
 800c950:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c952:	2b2e      	cmp	r3, #46	@ 0x2e
 800c954:	d106      	bne.n	800c964 <create_name+0x100>
		di--;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	3b01      	subs	r3, #1
 800c95a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1ea      	bne.n	800c938 <create_name+0xd4>
 800c962:	e000      	b.n	800c966 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c964:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	4413      	add	r3, r2
 800c96e:	2200      	movs	r2, #0
 800c970:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <create_name+0x118>
 800c978:	2306      	movs	r3, #6
 800c97a:	e127      	b.n	800cbcc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	3340      	adds	r3, #64	@ 0x40
 800c980:	220b      	movs	r2, #11
 800c982:	2120      	movs	r1, #32
 800c984:	4618      	mov	r0, r3
 800c986:	f7fd fdb8 	bl	800a4fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c98a:	2300      	movs	r3, #0
 800c98c:	61bb      	str	r3, [r7, #24]
 800c98e:	e002      	b.n	800c996 <create_name+0x132>
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	3301      	adds	r3, #1
 800c994:	61bb      	str	r3, [r7, #24]
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4413      	add	r3, r2
 800c99e:	881b      	ldrh	r3, [r3, #0]
 800c9a0:	2b20      	cmp	r3, #32
 800c9a2:	d0f5      	beq.n	800c990 <create_name+0x12c>
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	005b      	lsls	r3, r3, #1
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9b0:	d0ee      	beq.n	800c990 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d009      	beq.n	800c9cc <create_name+0x168>
 800c9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9bc:	f043 0303 	orr.w	r3, r3, #3
 800c9c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c9c4:	e002      	b.n	800c9cc <create_name+0x168>
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	617b      	str	r3, [r7, #20]
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d009      	beq.n	800c9e6 <create_name+0x182>
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	005b      	lsls	r3, r3, #1
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	4413      	add	r3, r2
 800c9e0:	881b      	ldrh	r3, [r3, #0]
 800c9e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9e4:	d1ef      	bne.n	800c9c6 <create_name+0x162>

	i = b = 0; ni = 8;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	623b      	str	r3, [r7, #32]
 800c9f0:	2308      	movs	r3, #8
 800c9f2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	1c5a      	adds	r2, r3, #1
 800c9f8:	61ba      	str	r2, [r7, #24]
 800c9fa:	005b      	lsls	r3, r3, #1
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	4413      	add	r3, r2
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ca04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 8090 	beq.w	800cb2c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ca0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca0e:	2b20      	cmp	r3, #32
 800ca10:	d006      	beq.n	800ca20 <create_name+0x1bc>
 800ca12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca14:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca16:	d10a      	bne.n	800ca2e <create_name+0x1ca>
 800ca18:	69ba      	ldr	r2, [r7, #24]
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d006      	beq.n	800ca2e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ca20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca24:	f043 0303 	orr.w	r3, r3, #3
 800ca28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca2c:	e07d      	b.n	800cb2a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ca2e:	6a3a      	ldr	r2, [r7, #32]
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d203      	bcs.n	800ca3e <create_name+0x1da>
 800ca36:	69ba      	ldr	r2, [r7, #24]
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d123      	bne.n	800ca86 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	2b0b      	cmp	r3, #11
 800ca42:	d106      	bne.n	800ca52 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ca44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca48:	f043 0303 	orr.w	r3, r3, #3
 800ca4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca50:	e075      	b.n	800cb3e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ca52:	69ba      	ldr	r2, [r7, #24]
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d005      	beq.n	800ca66 <create_name+0x202>
 800ca5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca5e:	f043 0303 	orr.w	r3, r3, #3
 800ca62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800ca66:	69ba      	ldr	r2, [r7, #24]
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d866      	bhi.n	800cb3c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	61bb      	str	r3, [r7, #24]
 800ca72:	2308      	movs	r3, #8
 800ca74:	623b      	str	r3, [r7, #32]
 800ca76:	230b      	movs	r3, #11
 800ca78:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ca7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ca84:	e051      	b.n	800cb2a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ca86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca88:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca8a:	d914      	bls.n	800cab6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ca8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca8e:	2100      	movs	r1, #0
 800ca90:	4618      	mov	r0, r3
 800ca92:	f002 f849 	bl	800eb28 <ff_convert>
 800ca96:	4603      	mov	r3, r0
 800ca98:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ca9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d004      	beq.n	800caaa <create_name+0x246>
 800caa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800caa2:	3b80      	subs	r3, #128	@ 0x80
 800caa4:	4a23      	ldr	r2, [pc, #140]	@ (800cb34 <create_name+0x2d0>)
 800caa6:	5cd3      	ldrb	r3, [r2, r3]
 800caa8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800caaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caae:	f043 0302 	orr.w	r3, r3, #2
 800cab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cab6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d007      	beq.n	800cacc <create_name+0x268>
 800cabc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cabe:	4619      	mov	r1, r3
 800cac0:	481d      	ldr	r0, [pc, #116]	@ (800cb38 <create_name+0x2d4>)
 800cac2:	f7fd fd5c 	bl	800a57e <chk_chr>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d008      	beq.n	800cade <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cacc:	235f      	movs	r3, #95	@ 0x5f
 800cace:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cad4:	f043 0303 	orr.w	r3, r3, #3
 800cad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cadc:	e01b      	b.n	800cb16 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cade:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cae0:	2b40      	cmp	r3, #64	@ 0x40
 800cae2:	d909      	bls.n	800caf8 <create_name+0x294>
 800cae4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cae6:	2b5a      	cmp	r3, #90	@ 0x5a
 800cae8:	d806      	bhi.n	800caf8 <create_name+0x294>
					b |= 2;
 800caea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800caee:	f043 0302 	orr.w	r3, r3, #2
 800caf2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800caf6:	e00e      	b.n	800cb16 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800caf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cafa:	2b60      	cmp	r3, #96	@ 0x60
 800cafc:	d90b      	bls.n	800cb16 <create_name+0x2b2>
 800cafe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb00:	2b7a      	cmp	r3, #122	@ 0x7a
 800cb02:	d808      	bhi.n	800cb16 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cb04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb08:	f043 0301 	orr.w	r3, r3, #1
 800cb0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb12:	3b20      	subs	r3, #32
 800cb14:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	1c5a      	adds	r2, r3, #1
 800cb1a:	623a      	str	r2, [r7, #32]
 800cb1c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cb1e:	b2d1      	uxtb	r1, r2
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	4413      	add	r3, r2
 800cb24:	460a      	mov	r2, r1
 800cb26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800cb2a:	e763      	b.n	800c9f4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cb2c:	bf00      	nop
 800cb2e:	e006      	b.n	800cb3e <create_name+0x2da>
 800cb30:	0800f940 	.word	0x0800f940
 800cb34:	0800f98c 	.word	0x0800f98c
 800cb38:	0800f94c 	.word	0x0800f94c
			if (si > di) break;			/* No extension */
 800cb3c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cb44:	2be5      	cmp	r3, #229	@ 0xe5
 800cb46:	d103      	bne.n	800cb50 <create_name+0x2ec>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2205      	movs	r2, #5
 800cb4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	2b08      	cmp	r3, #8
 800cb54:	d104      	bne.n	800cb60 <create_name+0x2fc>
 800cb56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cb60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb64:	f003 030c 	and.w	r3, r3, #12
 800cb68:	2b0c      	cmp	r3, #12
 800cb6a:	d005      	beq.n	800cb78 <create_name+0x314>
 800cb6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb70:	f003 0303 	and.w	r3, r3, #3
 800cb74:	2b03      	cmp	r3, #3
 800cb76:	d105      	bne.n	800cb84 <create_name+0x320>
 800cb78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb7c:	f043 0302 	orr.w	r3, r3, #2
 800cb80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cb84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb88:	f003 0302 	and.w	r3, r3, #2
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d117      	bne.n	800cbc0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cb90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb94:	f003 0303 	and.w	r3, r3, #3
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d105      	bne.n	800cba8 <create_name+0x344>
 800cb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cba0:	f043 0310 	orr.w	r3, r3, #16
 800cba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cba8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbac:	f003 030c 	and.w	r3, r3, #12
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	d105      	bne.n	800cbc0 <create_name+0x35c>
 800cbb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbb8:	f043 0308 	orr.w	r3, r3, #8
 800cbbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cbc6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800cbca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3728      	adds	r7, #40	@ 0x28
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b086      	sub	sp, #24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cbe8:	e002      	b.n	800cbf0 <follow_path+0x1c>
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	3301      	adds	r3, #1
 800cbee:	603b      	str	r3, [r7, #0]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	2b2f      	cmp	r3, #47	@ 0x2f
 800cbf6:	d0f8      	beq.n	800cbea <follow_path+0x16>
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	2b5c      	cmp	r3, #92	@ 0x5c
 800cbfe:	d0f4      	beq.n	800cbea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	2200      	movs	r2, #0
 800cc04:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	2b1f      	cmp	r3, #31
 800cc12:	d80a      	bhi.n	800cc2a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2280      	movs	r2, #128	@ 0x80
 800cc18:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7fe fc37 	bl	800b492 <dir_sdi>
 800cc24:	4603      	mov	r3, r0
 800cc26:	75fb      	strb	r3, [r7, #23]
 800cc28:	e078      	b.n	800cd1c <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc2a:	463b      	mov	r3, r7
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7ff fe18 	bl	800c864 <create_name>
 800cc34:	4603      	mov	r3, r0
 800cc36:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc38:	7dfb      	ldrb	r3, [r7, #23]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d169      	bne.n	800cd12 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7ff fae7 	bl	800c212 <dir_find>
 800cc44:	4603      	mov	r3, r0
 800cc46:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800cc4e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00a      	beq.n	800cc6c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	2b04      	cmp	r3, #4
 800cc5a:	d15c      	bne.n	800cd16 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cc5c:	7afb      	ldrb	r3, [r7, #11]
 800cc5e:	f003 0304 	and.w	r3, r3, #4
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d157      	bne.n	800cd16 <follow_path+0x142>
 800cc66:	2305      	movs	r3, #5
 800cc68:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cc6a:	e054      	b.n	800cd16 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc6c:	7afb      	ldrb	r3, [r7, #11]
 800cc6e:	f003 0304 	and.w	r3, r3, #4
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d151      	bne.n	800cd1a <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	799b      	ldrb	r3, [r3, #6]
 800cc7a:	f003 0310 	and.w	r3, r3, #16
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d102      	bne.n	800cc88 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800cc82:	2305      	movs	r3, #5
 800cc84:	75fb      	strb	r3, [r7, #23]
 800cc86:	e049      	b.n	800cd1c <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	d130      	bne.n	800ccf2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	689a      	ldr	r2, [r3, #8]
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	79d2      	ldrb	r2, [r2, #7]
 800cca8:	431a      	orrs	r2, r3
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	3334      	adds	r3, #52	@ 0x34
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fd fa2e 	bl	800a11e <ld_dword>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	3321      	adds	r3, #33	@ 0x21
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	f003 0302 	and.w	r3, r3, #2
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	3338      	adds	r3, #56	@ 0x38
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fd fa3f 	bl	800a164 <ld_qword>
 800cce6:	4602      	mov	r2, r0
 800cce8:	460b      	mov	r3, r1
 800ccea:	6939      	ldr	r1, [r7, #16]
 800ccec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ccf0:	e79b      	b.n	800cc2a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd00:	4413      	add	r3, r2
 800cd02:	4619      	mov	r1, r3
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f7fe fd7b 	bl	800b800 <ld_clust>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd10:	e78b      	b.n	800cc2a <follow_path+0x56>
			if (res != FR_OK) break;
 800cd12:	bf00      	nop
 800cd14:	e002      	b.n	800cd1c <follow_path+0x148>
				break;
 800cd16:	bf00      	nop
 800cd18:	e000      	b.n	800cd1c <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd1a:	bf00      	nop
			}
		}
	}

	return res;
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd26:	b480      	push	{r7}
 800cd28:	b087      	sub	sp, #28
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd32:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d031      	beq.n	800cda0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	617b      	str	r3, [r7, #20]
 800cd42:	e002      	b.n	800cd4a <get_ldnumber+0x24>
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	3301      	adds	r3, #1
 800cd48:	617b      	str	r3, [r7, #20]
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	2b1f      	cmp	r3, #31
 800cd50:	d903      	bls.n	800cd5a <get_ldnumber+0x34>
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd58:	d1f4      	bne.n	800cd44 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd60:	d11c      	bne.n	800cd9c <get_ldnumber+0x76>
			tp = *path;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	60fa      	str	r2, [r7, #12]
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	3b30      	subs	r3, #48	@ 0x30
 800cd72:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	2b09      	cmp	r3, #9
 800cd78:	d80e      	bhi.n	800cd98 <get_ldnumber+0x72>
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d10a      	bne.n	800cd98 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d107      	bne.n	800cd98 <get_ldnumber+0x72>
					vol = (int)i;
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	617b      	str	r3, [r7, #20]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	697a      	ldr	r2, [r7, #20]
 800cd96:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	e002      	b.n	800cda2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cda0:	693b      	ldr	r3, [r7, #16]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	371c      	adds	r7, #28
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
	...

0800cdb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	70da      	strb	r2, [r3, #3]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cdc8:	6839      	ldr	r1, [r7, #0]
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7fd fda2 	bl	800a914 <move_window>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d001      	beq.n	800cdda <check_fs+0x2a>
 800cdd6:	2304      	movs	r3, #4
 800cdd8:	e044      	b.n	800ce64 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	3338      	adds	r3, #56	@ 0x38
 800cdde:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fd f982 	bl	800a0ec <ld_word>
 800cde8:	4603      	mov	r3, r0
 800cdea:	461a      	mov	r2, r3
 800cdec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d001      	beq.n	800cdf8 <check_fs+0x48>
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e035      	b.n	800ce64 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cdfe:	2be9      	cmp	r3, #233	@ 0xe9
 800ce00:	d009      	beq.n	800ce16 <check_fs+0x66>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ce08:	2beb      	cmp	r3, #235	@ 0xeb
 800ce0a:	d11e      	bne.n	800ce4a <check_fs+0x9a>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ce12:	2b90      	cmp	r3, #144	@ 0x90
 800ce14:	d119      	bne.n	800ce4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	3338      	adds	r3, #56	@ 0x38
 800ce1a:	3336      	adds	r3, #54	@ 0x36
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fd f97e 	bl	800a11e <ld_dword>
 800ce22:	4603      	mov	r3, r0
 800ce24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ce28:	4a10      	ldr	r2, [pc, #64]	@ (800ce6c <check_fs+0xbc>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d101      	bne.n	800ce32 <check_fs+0x82>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e018      	b.n	800ce64 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	3338      	adds	r3, #56	@ 0x38
 800ce36:	3352      	adds	r3, #82	@ 0x52
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7fd f970 	bl	800a11e <ld_dword>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	4a0b      	ldr	r2, [pc, #44]	@ (800ce70 <check_fs+0xc0>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d101      	bne.n	800ce4a <check_fs+0x9a>
 800ce46:	2300      	movs	r3, #0
 800ce48:	e00c      	b.n	800ce64 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	3338      	adds	r3, #56	@ 0x38
 800ce4e:	220b      	movs	r2, #11
 800ce50:	4908      	ldr	r1, [pc, #32]	@ (800ce74 <check_fs+0xc4>)
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fd fb6c 	bl	800a530 <mem_cmp>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d101      	bne.n	800ce62 <check_fs+0xb2>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	e000      	b.n	800ce64 <check_fs+0xb4>
#endif
	return 2;
 800ce62:	2302      	movs	r3, #2
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	00544146 	.word	0x00544146
 800ce70:	33544146 	.word	0x33544146
 800ce74:	0800f954 	.word	0x0800f954

0800ce78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ce78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce7c:	b09c      	sub	sp, #112	@ 0x70
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	61f8      	str	r0, [r7, #28]
 800ce82:	61b9      	str	r1, [r7, #24]
 800ce84:	4613      	mov	r3, r2
 800ce86:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce8e:	69f8      	ldr	r0, [r7, #28]
 800ce90:	f7ff ff49 	bl	800cd26 <get_ldnumber>
 800ce94:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	da01      	bge.n	800cea0 <find_volume+0x28>
 800ce9c:	230b      	movs	r3, #11
 800ce9e:	e337      	b.n	800d510 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cea0:	4a99      	ldr	r2, [pc, #612]	@ (800d108 <find_volume+0x290>)
 800cea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cea8:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ceaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d101      	bne.n	800ceb4 <find_volume+0x3c>
 800ceb0:	230c      	movs	r3, #12
 800ceb2:	e32d      	b.n	800d510 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ceb8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	f023 0301 	bic.w	r3, r3, #1
 800cec0:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d01a      	beq.n	800cf00 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800ceca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cecc:	785b      	ldrb	r3, [r3, #1]
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fd f86c 	bl	8009fac <disk_status>
 800ced4:	4603      	mov	r3, r0
 800ced6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ceda:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10c      	bne.n	800cf00 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d007      	beq.n	800cefc <find_volume+0x84>
 800ceec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cef0:	f003 0304 	and.w	r3, r3, #4
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d001      	beq.n	800cefc <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800cef8:	230a      	movs	r3, #10
 800cefa:	e309      	b.n	800d510 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800cefc:	2300      	movs	r3, #0
 800cefe:	e307      	b.n	800d510 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cf00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf02:	2200      	movs	r2, #0
 800cf04:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cf06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf0c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cf0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf10:	785b      	ldrb	r3, [r3, #1]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7fd f864 	bl	8009fe0 <disk_initialize>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cf1e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cf22:	f003 0301 	and.w	r3, r3, #1
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e2f0      	b.n	800d510 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cf2e:	7dfb      	ldrb	r3, [r7, #23]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d007      	beq.n	800cf44 <find_volume+0xcc>
 800cf34:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cf38:	f003 0304 	and.w	r3, r3, #4
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800cf40:	230a      	movs	r3, #10
 800cf42:	e2e5      	b.n	800d510 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf4a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cf4c:	f7ff ff30 	bl	800cdb0 <check_fs>
 800cf50:	4603      	mov	r3, r0
 800cf52:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf56:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	d14d      	bne.n	800cffa <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf5e:	2300      	movs	r3, #0
 800cf60:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf62:	e020      	b.n	800cfa6 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf66:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800cf6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf6c:	011b      	lsls	r3, r3, #4
 800cf6e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cf72:	4413      	add	r3, r2
 800cf74:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf78:	3304      	adds	r3, #4
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d006      	beq.n	800cf8e <find_volume+0x116>
 800cf80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf82:	3308      	adds	r3, #8
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7fd f8ca 	bl	800a11e <ld_dword>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	e000      	b.n	800cf90 <find_volume+0x118>
 800cf8e:	2200      	movs	r2, #0
 800cf90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	3360      	adds	r3, #96	@ 0x60
 800cf96:	f107 0110 	add.w	r1, r7, #16
 800cf9a:	440b      	add	r3, r1
 800cf9c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cfa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cfa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfa8:	2b03      	cmp	r3, #3
 800cfaa:	d9db      	bls.n	800cf64 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cfac:	2300      	movs	r3, #0
 800cfae:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800cfb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d002      	beq.n	800cfbc <find_volume+0x144>
 800cfb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cfbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	3360      	adds	r3, #96	@ 0x60
 800cfc2:	f107 0210 	add.w	r2, r7, #16
 800cfc6:	4413      	add	r3, r2
 800cfc8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800cfcc:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cfce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d005      	beq.n	800cfe0 <find_volume+0x168>
 800cfd4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cfd6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cfd8:	f7ff feea 	bl	800cdb0 <check_fs>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	e000      	b.n	800cfe2 <find_volume+0x16a>
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cfe6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d905      	bls.n	800cffa <find_volume+0x182>
 800cfee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cff0:	3301      	adds	r3, #1
 800cff2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cff4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d9e0      	bls.n	800cfbc <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cffa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cffe:	2b04      	cmp	r3, #4
 800d000:	d101      	bne.n	800d006 <find_volume+0x18e>
 800d002:	2301      	movs	r3, #1
 800d004:	e284      	b.n	800d510 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d006:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d901      	bls.n	800d012 <find_volume+0x19a>
 800d00e:	230d      	movs	r3, #13
 800d010:	e27e      	b.n	800d510 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d012:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d016:	2b01      	cmp	r3, #1
 800d018:	f040 80fa 	bne.w	800d210 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d01c:	230b      	movs	r3, #11
 800d01e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d020:	e002      	b.n	800d028 <find_volume+0x1b0>
 800d022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d024:	3301      	adds	r3, #1
 800d026:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d02a:	2b3f      	cmp	r3, #63	@ 0x3f
 800d02c:	d806      	bhi.n	800d03c <find_volume+0x1c4>
 800d02e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d032:	4413      	add	r3, r2
 800d034:	3338      	adds	r3, #56	@ 0x38
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d0f2      	beq.n	800d022 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d03c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d03e:	2b3f      	cmp	r3, #63	@ 0x3f
 800d040:	d801      	bhi.n	800d046 <find_volume+0x1ce>
 800d042:	230d      	movs	r3, #13
 800d044:	e264      	b.n	800d510 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d048:	3338      	adds	r3, #56	@ 0x38
 800d04a:	3368      	adds	r3, #104	@ 0x68
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7fd f84d 	bl	800a0ec <ld_word>
 800d052:	4603      	mov	r3, r0
 800d054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d058:	d001      	beq.n	800d05e <find_volume+0x1e6>
 800d05a:	230d      	movs	r3, #13
 800d05c:	e258      	b.n	800d510 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d05e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d060:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d064:	2b09      	cmp	r3, #9
 800d066:	d001      	beq.n	800d06c <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800d068:	230d      	movs	r3, #13
 800d06a:	e251      	b.n	800d510 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d06c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d06e:	3338      	adds	r3, #56	@ 0x38
 800d070:	3348      	adds	r3, #72	@ 0x48
 800d072:	4618      	mov	r0, r3
 800d074:	f7fd f876 	bl	800a164 <ld_qword>
 800d078:	4602      	mov	r2, r0
 800d07a:	460b      	mov	r3, r1
 800d07c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d07e:	2000      	movs	r0, #0
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	68b9      	ldr	r1, [r7, #8]
 800d086:	1851      	adds	r1, r2, r1
 800d088:	6039      	str	r1, [r7, #0]
 800d08a:	68f9      	ldr	r1, [r7, #12]
 800d08c:	eb43 0101 	adc.w	r1, r3, r1
 800d090:	6079      	str	r1, [r7, #4]
 800d092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d096:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d09a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d301      	bcc.n	800d0a6 <find_volume+0x22e>
 800d0a2:	230d      	movs	r3, #13
 800d0a4:	e234      	b.n	800d510 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d0a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0a8:	3338      	adds	r3, #56	@ 0x38
 800d0aa:	3354      	adds	r3, #84	@ 0x54
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fd f836 	bl	800a11e <ld_dword>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0b6:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d0b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0ba:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800d0be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0c0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d0c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0c4:	789b      	ldrb	r3, [r3, #2]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d001      	beq.n	800d0ce <find_volume+0x256>
 800d0ca:	230d      	movs	r3, #13
 800d0cc:	e220      	b.n	800d510 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d0ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	4093      	lsls	r3, r2
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0de:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d0e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0e2:	895b      	ldrh	r3, [r3, #10]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d101      	bne.n	800d0ec <find_volume+0x274>
 800d0e8:	230d      	movs	r3, #13
 800d0ea:	e211      	b.n	800d510 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d0ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0ee:	3338      	adds	r3, #56	@ 0x38
 800d0f0:	335c      	adds	r3, #92	@ 0x5c
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fd f813 	bl	800a11e <ld_dword>
 800d0f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0fc:	4a03      	ldr	r2, [pc, #12]	@ (800d10c <find_volume+0x294>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d906      	bls.n	800d110 <find_volume+0x298>
 800d102:	230d      	movs	r3, #13
 800d104:	e204      	b.n	800d510 <find_volume+0x698>
 800d106:	bf00      	nop
 800d108:	200015c8 	.word	0x200015c8
 800d10c:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800d110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d112:	1c9a      	adds	r2, r3, #2
 800d114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d116:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d11a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d11c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d120:	3338      	adds	r3, #56	@ 0x38
 800d122:	3358      	adds	r3, #88	@ 0x58
 800d124:	4618      	mov	r0, r3
 800d126:	f7fc fffa 	bl	800a11e <ld_dword>
 800d12a:	4602      	mov	r2, r0
 800d12c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d12e:	441a      	add	r2, r3
 800d130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d132:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d136:	3338      	adds	r3, #56	@ 0x38
 800d138:	3350      	adds	r3, #80	@ 0x50
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fc ffef 	bl	800a11e <ld_dword>
 800d140:	4602      	mov	r2, r0
 800d142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d144:	441a      	add	r2, r3
 800d146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d148:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d14a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d14e:	2200      	movs	r2, #0
 800d150:	469a      	mov	sl, r3
 800d152:	4693      	mov	fp, r2
 800d154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d156:	895b      	ldrh	r3, [r3, #10]
 800d158:	461a      	mov	r2, r3
 800d15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d15c:	fb02 f303 	mul.w	r3, r2, r3
 800d160:	2200      	movs	r2, #0
 800d162:	4698      	mov	r8, r3
 800d164:	4691      	mov	r9, r2
 800d166:	eb1a 0408 	adds.w	r4, sl, r8
 800d16a:	eb4b 0509 	adc.w	r5, fp, r9
 800d16e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d172:	42a2      	cmp	r2, r4
 800d174:	41ab      	sbcs	r3, r5
 800d176:	d201      	bcs.n	800d17c <find_volume+0x304>
 800d178:	230d      	movs	r3, #13
 800d17a:	e1c9      	b.n	800d510 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d17c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d17e:	3338      	adds	r3, #56	@ 0x38
 800d180:	3360      	adds	r3, #96	@ 0x60
 800d182:	4618      	mov	r0, r3
 800d184:	f7fc ffcb 	bl	800a11e <ld_dword>
 800d188:	4602      	mov	r2, r0
 800d18a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d18c:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d18e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d192:	4619      	mov	r1, r3
 800d194:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d196:	f7fd fc59 	bl	800aa4c <clust2sect>
 800d19a:	4603      	mov	r3, r0
 800d19c:	4619      	mov	r1, r3
 800d19e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d1a0:	f7fd fbb8 	bl	800a914 <move_window>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d001      	beq.n	800d1ae <find_volume+0x336>
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e1b0      	b.n	800d510 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d1b2:	e015      	b.n	800d1e0 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d1b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1b8:	4413      	add	r3, r2
 800d1ba:	3338      	adds	r3, #56	@ 0x38
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b81      	cmp	r3, #129	@ 0x81
 800d1c0:	d10b      	bne.n	800d1da <find_volume+0x362>
 800d1c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1c4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d1c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1ca:	3314      	adds	r3, #20
 800d1cc:	4413      	add	r3, r2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fc ffa5 	bl	800a11e <ld_dword>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d007      	beq.n	800d1ea <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d1da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1dc:	3320      	adds	r3, #32
 800d1de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d1e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1e6:	d3e5      	bcc.n	800d1b4 <find_volume+0x33c>
 800d1e8:	e000      	b.n	800d1ec <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d1ea:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d1ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1f2:	d101      	bne.n	800d1f8 <find_volume+0x380>
 800d1f4:	230d      	movs	r3, #13
 800d1f6:	e18b      	b.n	800d510 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d1f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d1fe:	619a      	str	r2, [r3, #24]
 800d200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d202:	699a      	ldr	r2, [r3, #24]
 800d204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d206:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d208:	2304      	movs	r3, #4
 800d20a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800d20e:	e167      	b.n	800d4e0 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d212:	3338      	adds	r3, #56	@ 0x38
 800d214:	330b      	adds	r3, #11
 800d216:	4618      	mov	r0, r3
 800d218:	f7fc ff68 	bl	800a0ec <ld_word>
 800d21c:	4603      	mov	r3, r0
 800d21e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d222:	d001      	beq.n	800d228 <find_volume+0x3b0>
 800d224:	230d      	movs	r3, #13
 800d226:	e173      	b.n	800d510 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d22a:	3338      	adds	r3, #56	@ 0x38
 800d22c:	3316      	adds	r3, #22
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fc ff5c 	bl	800a0ec <ld_word>
 800d234:	4603      	mov	r3, r0
 800d236:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d106      	bne.n	800d24c <find_volume+0x3d4>
 800d23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d240:	3338      	adds	r3, #56	@ 0x38
 800d242:	3324      	adds	r3, #36	@ 0x24
 800d244:	4618      	mov	r0, r3
 800d246:	f7fc ff6a 	bl	800a11e <ld_dword>
 800d24a:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800d24c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d24e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d250:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d254:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800d258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d25a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d25c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d25e:	789b      	ldrb	r3, [r3, #2]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d005      	beq.n	800d270 <find_volume+0x3f8>
 800d264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d266:	789b      	ldrb	r3, [r3, #2]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d001      	beq.n	800d270 <find_volume+0x3f8>
 800d26c:	230d      	movs	r3, #13
 800d26e:	e14f      	b.n	800d510 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d272:	789b      	ldrb	r3, [r3, #2]
 800d274:	461a      	mov	r2, r3
 800d276:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d278:	fb02 f303 	mul.w	r3, r2, r3
 800d27c:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d27e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d280:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d284:	461a      	mov	r2, r3
 800d286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d288:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d28a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d28c:	895b      	ldrh	r3, [r3, #10]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d008      	beq.n	800d2a4 <find_volume+0x42c>
 800d292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d294:	895b      	ldrh	r3, [r3, #10]
 800d296:	461a      	mov	r2, r3
 800d298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d29a:	895b      	ldrh	r3, [r3, #10]
 800d29c:	3b01      	subs	r3, #1
 800d29e:	4013      	ands	r3, r2
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <find_volume+0x430>
 800d2a4:	230d      	movs	r3, #13
 800d2a6:	e133      	b.n	800d510 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d2a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2aa:	3338      	adds	r3, #56	@ 0x38
 800d2ac:	3311      	adds	r3, #17
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fc ff1c 	bl	800a0ec <ld_word>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d2bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2be:	891b      	ldrh	r3, [r3, #8]
 800d2c0:	f003 030f 	and.w	r3, r3, #15
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <find_volume+0x456>
 800d2ca:	230d      	movs	r3, #13
 800d2cc:	e120      	b.n	800d510 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d2ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2d0:	3338      	adds	r3, #56	@ 0x38
 800d2d2:	3313      	adds	r3, #19
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fc ff09 	bl	800a0ec <ld_word>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d2de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d106      	bne.n	800d2f2 <find_volume+0x47a>
 800d2e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2e6:	3338      	adds	r3, #56	@ 0x38
 800d2e8:	3320      	adds	r3, #32
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fc ff17 	bl	800a11e <ld_dword>
 800d2f0:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d2f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2f4:	3338      	adds	r3, #56	@ 0x38
 800d2f6:	330e      	adds	r3, #14
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7fc fef7 	bl	800a0ec <ld_word>
 800d2fe:	4603      	mov	r3, r0
 800d300:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d304:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d101      	bne.n	800d310 <find_volume+0x498>
 800d30c:	230d      	movs	r3, #13
 800d30e:	e0ff      	b.n	800d510 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d310:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d316:	4413      	add	r3, r2
 800d318:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d31a:	8912      	ldrh	r2, [r2, #8]
 800d31c:	0912      	lsrs	r2, r2, #4
 800d31e:	b292      	uxth	r2, r2
 800d320:	4413      	add	r3, r2
 800d322:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d324:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d328:	429a      	cmp	r2, r3
 800d32a:	d201      	bcs.n	800d330 <find_volume+0x4b8>
 800d32c:	230d      	movs	r3, #13
 800d32e:	e0ef      	b.n	800d510 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d330:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d338:	8952      	ldrh	r2, [r2, #10]
 800d33a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d342:	2b00      	cmp	r3, #0
 800d344:	d101      	bne.n	800d34a <find_volume+0x4d2>
 800d346:	230d      	movs	r3, #13
 800d348:	e0e2      	b.n	800d510 <find_volume+0x698>
		fmt = FS_FAT32;
 800d34a:	2303      	movs	r3, #3
 800d34c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d352:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d356:	4293      	cmp	r3, r2
 800d358:	d802      	bhi.n	800d360 <find_volume+0x4e8>
 800d35a:	2302      	movs	r3, #2
 800d35c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d362:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d366:	4293      	cmp	r3, r2
 800d368:	d802      	bhi.n	800d370 <find_volume+0x4f8>
 800d36a:	2301      	movs	r3, #1
 800d36c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d372:	1c9a      	adds	r2, r3, #2
 800d374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d376:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d37a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d37c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d37e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d382:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d384:	441a      	add	r2, r3
 800d386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d388:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d38a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d38c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d38e:	441a      	add	r2, r3
 800d390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d392:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800d394:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d398:	2b03      	cmp	r3, #3
 800d39a:	d11e      	bne.n	800d3da <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d39c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d39e:	3338      	adds	r3, #56	@ 0x38
 800d3a0:	332a      	adds	r3, #42	@ 0x2a
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fc fea2 	bl	800a0ec <ld_word>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d001      	beq.n	800d3b2 <find_volume+0x53a>
 800d3ae:	230d      	movs	r3, #13
 800d3b0:	e0ae      	b.n	800d510 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d3b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3b4:	891b      	ldrh	r3, [r3, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d001      	beq.n	800d3be <find_volume+0x546>
 800d3ba:	230d      	movs	r3, #13
 800d3bc:	e0a8      	b.n	800d510 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d3be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3c0:	3338      	adds	r3, #56	@ 0x38
 800d3c2:	332c      	adds	r3, #44	@ 0x2c
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fc feaa 	bl	800a11e <ld_dword>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3ce:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d3d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3d2:	69db      	ldr	r3, [r3, #28]
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3d8:	e01f      	b.n	800d41a <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d3da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3dc:	891b      	ldrh	r3, [r3, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d101      	bne.n	800d3e6 <find_volume+0x56e>
 800d3e2:	230d      	movs	r3, #13
 800d3e4:	e094      	b.n	800d510 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d3e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d3ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3ec:	441a      	add	r2, r3
 800d3ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3f0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d3f2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d103      	bne.n	800d402 <find_volume+0x58a>
 800d3fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3fc:	69db      	ldr	r3, [r3, #28]
 800d3fe:	005b      	lsls	r3, r3, #1
 800d400:	e00a      	b.n	800d418 <find_volume+0x5a0>
 800d402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d404:	69da      	ldr	r2, [r3, #28]
 800d406:	4613      	mov	r3, r2
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	4413      	add	r3, r2
 800d40c:	085a      	lsrs	r2, r3, #1
 800d40e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d410:	69db      	ldr	r3, [r3, #28]
 800d412:	f003 0301 	and.w	r3, r3, #1
 800d416:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d418:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d41a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d41c:	6a1a      	ldr	r2, [r3, #32]
 800d41e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d420:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d424:	0a5b      	lsrs	r3, r3, #9
 800d426:	429a      	cmp	r2, r3
 800d428:	d201      	bcs.n	800d42e <find_volume+0x5b6>
 800d42a:	230d      	movs	r3, #13
 800d42c:	e070      	b.n	800d510 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d42e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d430:	f04f 32ff 	mov.w	r2, #4294967295
 800d434:	619a      	str	r2, [r3, #24]
 800d436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d438:	699a      	ldr	r2, [r3, #24]
 800d43a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d43c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d43e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d440:	2280      	movs	r2, #128	@ 0x80
 800d442:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d444:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d448:	2b03      	cmp	r3, #3
 800d44a:	d149      	bne.n	800d4e0 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d44c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d44e:	3338      	adds	r3, #56	@ 0x38
 800d450:	3330      	adds	r3, #48	@ 0x30
 800d452:	4618      	mov	r0, r3
 800d454:	f7fc fe4a 	bl	800a0ec <ld_word>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d140      	bne.n	800d4e0 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d45e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d460:	3301      	adds	r3, #1
 800d462:	4619      	mov	r1, r3
 800d464:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d466:	f7fd fa55 	bl	800a914 <move_window>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d137      	bne.n	800d4e0 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800d470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d472:	2200      	movs	r2, #0
 800d474:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d478:	3338      	adds	r3, #56	@ 0x38
 800d47a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fc fe34 	bl	800a0ec <ld_word>
 800d484:	4603      	mov	r3, r0
 800d486:	461a      	mov	r2, r3
 800d488:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d127      	bne.n	800d4e0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d492:	3338      	adds	r3, #56	@ 0x38
 800d494:	4618      	mov	r0, r3
 800d496:	f7fc fe42 	bl	800a11e <ld_dword>
 800d49a:	4603      	mov	r3, r0
 800d49c:	4a1f      	ldr	r2, [pc, #124]	@ (800d51c <find_volume+0x6a4>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d11e      	bne.n	800d4e0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d4a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a4:	3338      	adds	r3, #56	@ 0x38
 800d4a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fc fe37 	bl	800a11e <ld_dword>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	4a1b      	ldr	r2, [pc, #108]	@ (800d520 <find_volume+0x6a8>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d113      	bne.n	800d4e0 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d4b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ba:	3338      	adds	r3, #56	@ 0x38
 800d4bc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7fc fe2c 	bl	800a11e <ld_dword>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ca:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d4cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ce:	3338      	adds	r3, #56	@ 0x38
 800d4d0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fc fe22 	bl	800a11e <ld_dword>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4de:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d4e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e2:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800d4e6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d524 <find_volume+0x6ac>)
 800d4ea:	881b      	ldrh	r3, [r3, #0]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d524 <find_volume+0x6ac>)
 800d4f2:	801a      	strh	r2, [r3, #0]
 800d4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800d524 <find_volume+0x6ac>)
 800d4f6:	881a      	ldrh	r2, [r3, #0]
 800d4f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4fa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d4fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4fe:	4a0a      	ldr	r2, [pc, #40]	@ (800d528 <find_volume+0x6b0>)
 800d500:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800d502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d504:	4a09      	ldr	r2, [pc, #36]	@ (800d52c <find_volume+0x6b4>)
 800d506:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d508:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d50a:	f7fd f99b 	bl	800a844 <clear_lock>
#endif
	return FR_OK;
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3770      	adds	r7, #112	@ 0x70
 800d514:	46bd      	mov	sp, r7
 800d516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d51a:	bf00      	nop
 800d51c:	41615252 	.word	0x41615252
 800d520:	61417272 	.word	0x61417272
 800d524:	200015cc 	.word	0x200015cc
 800d528:	20001850 	.word	0x20001850
 800d52c:	200015f0 	.word	0x200015f0

0800d530 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d53a:	2309      	movs	r3, #9
 800d53c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d01c      	beq.n	800d57e <validate+0x4e>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d018      	beq.n	800d57e <validate+0x4e>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d013      	beq.n	800d57e <validate+0x4e>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	889a      	ldrh	r2, [r3, #4]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	88db      	ldrh	r3, [r3, #6]
 800d560:	429a      	cmp	r2, r3
 800d562:	d10c      	bne.n	800d57e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	785b      	ldrb	r3, [r3, #1]
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7fc fd1e 	bl	8009fac <disk_status>
 800d570:	4603      	mov	r3, r0
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	2b00      	cmp	r3, #0
 800d578:	d101      	bne.n	800d57e <validate+0x4e>
			res = FR_OK;
 800d57a:	2300      	movs	r3, #0
 800d57c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d57e:	7bfb      	ldrb	r3, [r7, #15]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <validate+0x5a>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	e000      	b.n	800d58c <validate+0x5c>
 800d58a:	2300      	movs	r3, #0
 800d58c:	683a      	ldr	r2, [r7, #0]
 800d58e:	6013      	str	r3, [r2, #0]
	return res;
 800d590:	7bfb      	ldrb	r3, [r7, #15]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
	...

0800d59c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b088      	sub	sp, #32
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d5ae:	f107 0310 	add.w	r3, r7, #16
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7ff fbb7 	bl	800cd26 <get_ldnumber>
 800d5b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	da01      	bge.n	800d5c4 <f_mount+0x28>
 800d5c0:	230b      	movs	r3, #11
 800d5c2:	e02b      	b.n	800d61c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d5c4:	4a17      	ldr	r2, [pc, #92]	@ (800d624 <f_mount+0x88>)
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d005      	beq.n	800d5e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d5d4:	69b8      	ldr	r0, [r7, #24]
 800d5d6:	f7fd f935 	bl	800a844 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d002      	beq.n	800d5ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	490d      	ldr	r1, [pc, #52]	@ (800d624 <f_mount+0x88>)
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <f_mount+0x66>
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d001      	beq.n	800d606 <f_mount+0x6a>
 800d602:	2300      	movs	r3, #0
 800d604:	e00a      	b.n	800d61c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d606:	f107 010c 	add.w	r1, r7, #12
 800d60a:	f107 0308 	add.w	r3, r7, #8
 800d60e:	2200      	movs	r2, #0
 800d610:	4618      	mov	r0, r3
 800d612:	f7ff fc31 	bl	800ce78 <find_volume>
 800d616:	4603      	mov	r3, r0
 800d618:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d61a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3720      	adds	r7, #32
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	200015c8 	.word	0x200015c8

0800d628 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d62c:	b0a6      	sub	sp, #152	@ 0x98
 800d62e:	af00      	add	r7, sp, #0
 800d630:	61f8      	str	r0, [r7, #28]
 800d632:	61b9      	str	r1, [r7, #24]
 800d634:	4613      	mov	r3, r2
 800d636:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <f_open+0x1a>
 800d63e:	2309      	movs	r3, #9
 800d640:	e2a8      	b.n	800db94 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d642:	7dfb      	ldrb	r3, [r7, #23]
 800d644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d648:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800d64a:	7dfa      	ldrb	r2, [r7, #23]
 800d64c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800d650:	f107 0318 	add.w	r3, r7, #24
 800d654:	4618      	mov	r0, r3
 800d656:	f7ff fc0f 	bl	800ce78 <find_volume>
 800d65a:	4603      	mov	r3, r0
 800d65c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 800d660:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d664:	2b00      	cmp	r3, #0
 800d666:	f040 828c 	bne.w	800db82 <f_open+0x55a>
		dj.obj.fs = fs;
 800d66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66c:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d66e:	69ba      	ldr	r2, [r7, #24]
 800d670:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d674:	4611      	mov	r1, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f7ff faac 	bl	800cbd4 <follow_path>
 800d67c:	4603      	mov	r3, r0
 800d67e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d682:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d686:	2b00      	cmp	r3, #0
 800d688:	d118      	bne.n	800d6bc <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d68a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800d68e:	b25b      	sxtb	r3, r3
 800d690:	2b00      	cmp	r3, #0
 800d692:	da03      	bge.n	800d69c <f_open+0x74>
				res = FR_INVALID_NAME;
 800d694:	2306      	movs	r3, #6
 800d696:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d69a:	e00f      	b.n	800d6bc <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d69c:	7dfb      	ldrb	r3, [r7, #23]
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	bf8c      	ite	hi
 800d6a2:	2301      	movhi	r3, #1
 800d6a4:	2300      	movls	r3, #0
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fc ff7f 	bl	800a5b4 <chk_lock>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d6bc:	7dfb      	ldrb	r3, [r7, #23]
 800d6be:	f003 031c 	and.w	r3, r3, #28
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	f000 8114 	beq.w	800d8f0 <f_open+0x2c8>
			if (res != FR_OK) {					/* No file, create new */
 800d6c8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d017      	beq.n	800d700 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d6d0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d6d4:	2b04      	cmp	r3, #4
 800d6d6:	d10e      	bne.n	800d6f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d6d8:	f7fc ffc8 	bl	800a66c <enq_lock>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d006      	beq.n	800d6f0 <f_open+0xc8>
 800d6e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe febe 	bl	800c468 <dir_register>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	e000      	b.n	800d6f2 <f_open+0xca>
 800d6f0:	2312      	movs	r3, #18
 800d6f2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
 800d6f8:	f043 0308 	orr.w	r3, r3, #8
 800d6fc:	75fb      	strb	r3, [r7, #23]
 800d6fe:	e011      	b.n	800d724 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d700:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d704:	f003 0311 	and.w	r3, r3, #17
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d003      	beq.n	800d714 <f_open+0xec>
					res = FR_DENIED;
 800d70c:	2307      	movs	r3, #7
 800d70e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d712:	e007      	b.n	800d724 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d714:	7dfb      	ldrb	r3, [r7, #23]
 800d716:	f003 0304 	and.w	r3, r3, #4
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d002      	beq.n	800d724 <f_open+0xfc>
 800d71e:	2308      	movs	r3, #8
 800d720:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d724:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f040 80fd 	bne.w	800d928 <f_open+0x300>
 800d72e:	7dfb      	ldrb	r3, [r7, #23]
 800d730:	f003 0308 	and.w	r3, r3, #8
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 80f7 	beq.w	800d928 <f_open+0x300>
				dw = GET_FATTIME();
 800d73a:	4bac      	ldr	r3, [pc, #688]	@ (800d9ec <f_open+0x3c4>)
 800d73c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	2b04      	cmp	r3, #4
 800d746:	f040 8084 	bne.w	800d852 <f_open+0x22a>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d74a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d752:	691b      	ldr	r3, [r3, #16]
 800d754:	3334      	adds	r3, #52	@ 0x34
 800d756:	4618      	mov	r0, r3
 800d758:	f7fc fce1 	bl	800a11e <ld_dword>
 800d75c:	4602      	mov	r2, r0
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d764:	691b      	ldr	r3, [r3, #16]
 800d766:	3338      	adds	r3, #56	@ 0x38
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fc fcfb 	bl	800a164 <ld_qword>
 800d76e:	4602      	mov	r2, r0
 800d770:	460b      	mov	r3, r1
 800d772:	69f9      	ldr	r1, [r7, #28]
 800d774:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	3321      	adds	r3, #33	@ 0x21
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	f003 0302 	and.w	r3, r3, #2
 800d784:	b2da      	uxtb	r2, r3
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	2200      	movs	r2, #0
 800d78e:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d792:	691b      	ldr	r3, [r3, #16]
 800d794:	3308      	adds	r3, #8
 800d796:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fc fdd8 	bl	800a350 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a2:	691b      	ldr	r3, [r3, #16]
 800d7a4:	3314      	adds	r3, #20
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ac:	691b      	ldr	r3, [r3, #16]
 800d7ae:	330c      	adds	r3, #12
 800d7b0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7fc fdcb 	bl	800a350 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	3315      	adds	r3, #21
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	3304      	adds	r3, #4
 800d7ca:	2220      	movs	r2, #32
 800d7cc:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d0:	691b      	ldr	r3, [r3, #16]
 800d7d2:	3334      	adds	r3, #52	@ 0x34
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fc fdba 	bl	800a350 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d7e4:	f04f 0200 	mov.w	r2, #0
 800d7e8:	f04f 0300 	mov.w	r3, #0
 800d7ec:	4608      	mov	r0, r1
 800d7ee:	f7fc fddb 	bl	800a3a8 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d7fa:	f04f 0200 	mov.w	r2, #0
 800d7fe:	f04f 0300 	mov.w	r3, #0
 800d802:	4608      	mov	r0, r1
 800d804:	f7fc fdd0 	bl	800a3a8 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	3321      	adds	r3, #33	@ 0x21
 800d80e:	2201      	movs	r2, #1
 800d810:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800d812:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d816:	4618      	mov	r0, r3
 800d818:	f7fe fb72 	bl	800bf00 <store_xdir>
 800d81c:	4603      	mov	r3, r0
 800d81e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800d822:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d826:	2b00      	cmp	r3, #0
 800d828:	d17e      	bne.n	800d928 <f_open+0x300>
 800d82a:	69fb      	ldr	r3, [r7, #28]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d07a      	beq.n	800d928 <f_open+0x300>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800d832:	69f8      	ldr	r0, [r7, #28]
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	2200      	movs	r2, #0
 800d83a:	4619      	mov	r1, r3
 800d83c:	f7fd fc74 	bl	800b128 <remove_chain>
 800d840:	4603      	mov	r3, r0
 800d842:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	689a      	ldr	r2, [r3, #8]
 800d84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84c:	3a01      	subs	r2, #1
 800d84e:	615a      	str	r2, [r3, #20]
 800d850:	e06a      	b.n	800d928 <f_open+0x300>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d852:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d854:	330e      	adds	r3, #14
 800d856:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fc fd78 	bl	800a350 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d862:	3316      	adds	r3, #22
 800d864:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fc fd71 	bl	800a350 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d86e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d870:	330b      	adds	r3, #11
 800d872:	2220      	movs	r2, #32
 800d874:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d878:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d87a:	4611      	mov	r1, r2
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fd ffbf 	bl	800b800 <ld_clust>
 800d882:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d888:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d88a:	2200      	movs	r2, #0
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7fd ffd6 	bl	800b83e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d892:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d894:	331c      	adds	r3, #28
 800d896:	2100      	movs	r1, #0
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fc fd59 	bl	800a350 <st_dword>
					fs->wflag = 1;
 800d89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d8a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d03d      	beq.n	800d928 <f_open+0x300>
						dw = fs->winsect;
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800d8b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fd fc32 	bl	800b128 <remove_chain>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 800d8ca:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d12a      	bne.n	800d928 <f_open+0x300>
							res = move_window(fs, dw);
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fd f81b 	bl	800a914 <move_window>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d8ea:	3a01      	subs	r2, #1
 800d8ec:	615a      	str	r2, [r3, #20]
 800d8ee:	e01b      	b.n	800d928 <f_open+0x300>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d8f0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d117      	bne.n	800d928 <f_open+0x300>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d8f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d8fc:	f003 0310 	and.w	r3, r3, #16
 800d900:	2b00      	cmp	r3, #0
 800d902:	d003      	beq.n	800d90c <f_open+0x2e4>
					res = FR_NO_FILE;
 800d904:	2304      	movs	r3, #4
 800d906:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d90a:	e00d      	b.n	800d928 <f_open+0x300>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d90c:	7dfb      	ldrb	r3, [r7, #23]
 800d90e:	f003 0302 	and.w	r3, r3, #2
 800d912:	2b00      	cmp	r3, #0
 800d914:	d008      	beq.n	800d928 <f_open+0x300>
 800d916:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d91a:	f003 0301 	and.w	r3, r3, #1
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d002      	beq.n	800d928 <f_open+0x300>
						res = FR_DENIED;
 800d922:	2307      	movs	r3, #7
 800d924:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800d928:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d126      	bne.n	800d97e <f_open+0x356>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d930:	7dfb      	ldrb	r3, [r7, #23]
 800d932:	f003 0308 	and.w	r3, r3, #8
 800d936:	2b00      	cmp	r3, #0
 800d938:	d003      	beq.n	800d942 <f_open+0x31a>
				mode |= FA_MODIFIED;
 800d93a:	7dfb      	ldrb	r3, [r7, #23]
 800d93c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d940:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800d94a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d950:	7dfb      	ldrb	r3, [r7, #23]
 800d952:	2b01      	cmp	r3, #1
 800d954:	bf8c      	ite	hi
 800d956:	2301      	movhi	r3, #1
 800d958:	2300      	movls	r3, #0
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	461a      	mov	r2, r3
 800d95e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d962:	4611      	mov	r1, r2
 800d964:	4618      	mov	r0, r3
 800d966:	f7fc fea3 	bl	800a6b0 <inc_lock>
 800d96a:	4602      	mov	r2, r0
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d974:	2b00      	cmp	r3, #0
 800d976:	d102      	bne.n	800d97e <f_open+0x356>
 800d978:	2302      	movs	r3, #2
 800d97a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d97e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d982:	2b00      	cmp	r3, #0
 800d984:	f040 80fd 	bne.w	800db82 <f_open+0x55a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	2b04      	cmp	r3, #4
 800d98e:	d12f      	bne.n	800d9f0 <f_open+0x3c8>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800d990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800d996:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d99a:	4613      	mov	r3, r2
 800d99c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d9a0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d9a4:	431a      	orrs	r2, r3
 800d9a6:	69fb      	ldr	r3, [r7, #28]
 800d9a8:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800d9aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	3334      	adds	r3, #52	@ 0x34
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fc fbb1 	bl	800a11e <ld_dword>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	3338      	adds	r3, #56	@ 0x38
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7fc fbcb 	bl	800a164 <ld_qword>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	69f9      	ldr	r1, [r7, #28]
 800d9d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	3321      	adds	r3, #33	@ 0x21
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	f003 0302 	and.w	r3, r3, #2
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	71da      	strb	r2, [r3, #7]
 800d9ea:	e018      	b.n	800da1e <f_open+0x3f6>
 800d9ec:	5a4e0000 	.word	0x5a4e0000
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fd ff02 	bl	800b800 <ld_clust>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800da02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da04:	331c      	adds	r3, #28
 800da06:	4618      	mov	r0, r3
 800da08:	f7fc fb89 	bl	800a11e <ld_dword>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2200      	movs	r2, #0
 800da10:	60bb      	str	r3, [r7, #8]
 800da12:	60fa      	str	r2, [r7, #12]
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800da1a:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800da1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800da24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da26:	88da      	ldrh	r2, [r3, #6]
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	7dfa      	ldrb	r2, [r7, #23]
 800da30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	2200      	movs	r2, #0
 800da38:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	2200      	movs	r2, #0
 800da40:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800da42:	69f9      	ldr	r1, [r7, #28]
 800da44:	f04f 0200 	mov.w	r2, #0
 800da48:	f04f 0300 	mov.w	r3, #0
 800da4c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	3350      	adds	r3, #80	@ 0x50
 800da54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da58:	2100      	movs	r1, #0
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fc fd4d 	bl	800a4fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800da60:	7dfb      	ldrb	r3, [r7, #23]
 800da62:	f003 0320 	and.w	r3, r3, #32
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 808b 	beq.w	800db82 <f_open+0x55a>
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800da72:	4313      	orrs	r3, r2
 800da74:	f000 8085 	beq.w	800db82 <f_open+0x55a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800da7e:	69f9      	ldr	r1, [r7, #28]
 800da80:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800da84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da86:	895b      	ldrh	r3, [r3, #10]
 800da88:	025b      	lsls	r3, r3, #9
 800da8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800da9a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800da9e:	e026      	b.n	800daee <f_open+0x4c6>
					clst = get_fat(&fp->obj, clst);
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fc fff0 	bl	800aa8c <get_fat>
 800daac:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800dab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d802      	bhi.n	800dabe <f_open+0x496>
 800dab8:	2302      	movs	r3, #2
 800daba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dabe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac6:	d102      	bne.n	800dace <f_open+0x4a6>
 800dac8:	2301      	movs	r3, #1
 800daca:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dace:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dad0:	2200      	movs	r2, #0
 800dad2:	469a      	mov	sl, r3
 800dad4:	4693      	mov	fp, r2
 800dad6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800dada:	ebb2 010a 	subs.w	r1, r2, sl
 800dade:	6039      	str	r1, [r7, #0]
 800dae0:	eb63 030b 	sbc.w	r3, r3, fp
 800dae4:	607b      	str	r3, [r7, #4]
 800dae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daea:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800daee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d109      	bne.n	800db0a <f_open+0x4e2>
 800daf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800daf8:	2200      	movs	r2, #0
 800dafa:	4698      	mov	r8, r3
 800dafc:	4691      	mov	r9, r2
 800dafe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800db02:	4590      	cmp	r8, r2
 800db04:	eb79 0303 	sbcs.w	r3, r9, r3
 800db08:	d3ca      	bcc.n	800daa0 <f_open+0x478>
				}
				fp->clust = clst;
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800db10:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800db12:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800db16:	2b00      	cmp	r3, #0
 800db18:	d133      	bne.n	800db82 <f_open+0x55a>
 800db1a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800db1e:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800db22:	2500      	movs	r5, #0
 800db24:	ea54 0305 	orrs.w	r3, r4, r5
 800db28:	d02b      	beq.n	800db82 <f_open+0x55a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800db2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800db30:	4618      	mov	r0, r3
 800db32:	f7fc ff8b 	bl	800aa4c <clust2sect>
 800db36:	67b8      	str	r0, [r7, #120]	@ 0x78
 800db38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d103      	bne.n	800db46 <f_open+0x51e>
						res = FR_INT_ERR;
 800db3e:	2302      	movs	r3, #2
 800db40:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800db44:	e01d      	b.n	800db82 <f_open+0x55a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800db46:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800db4a:	f04f 0200 	mov.w	r2, #0
 800db4e:	f04f 0300 	mov.w	r3, #0
 800db52:	0a42      	lsrs	r2, r0, #9
 800db54:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800db58:	0a4b      	lsrs	r3, r1, #9
 800db5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db5c:	441a      	add	r2, r3
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800db62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db64:	7858      	ldrb	r0, [r3, #1]
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db70:	2301      	movs	r3, #1
 800db72:	f7fc fa5d 	bl	800a030 <disk_read>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d002      	beq.n	800db82 <f_open+0x55a>
 800db7c:	2301      	movs	r3, #1
 800db7e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800db82:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800db86:	2b00      	cmp	r3, #0
 800db88:	d002      	beq.n	800db90 <f_open+0x568>
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	2200      	movs	r2, #0
 800db8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800db90:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800db94:	4618      	mov	r0, r3
 800db96:	3798      	adds	r7, #152	@ 0x98
 800db98:	46bd      	mov	sp, r7
 800db9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db9e:	bf00      	nop

0800dba0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba4:	b095      	sub	sp, #84	@ 0x54
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	61f8      	str	r0, [r7, #28]
 800dbaa:	61b9      	str	r1, [r7, #24]
 800dbac:	617a      	str	r2, [r7, #20]
 800dbae:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800dbc0:	4611      	mov	r1, r2
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff fcb4 	bl	800d530 <validate>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dbce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d108      	bne.n	800dbe8 <f_read+0x48>
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800dbdc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800dbe0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d002      	beq.n	800dbee <f_read+0x4e>
 800dbe8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dbec:	e13f      	b.n	800de6e <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dbf4:	f003 0301 	and.w	r3, r3, #1
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d101      	bne.n	800dc00 <f_read+0x60>
 800dbfc:	2307      	movs	r3, #7
 800dbfe:	e136      	b.n	800de6e <f_read+0x2ce>
	remain = fp->obj.objsize - fp->fptr;
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dc0c:	1a86      	subs	r6, r0, r2
 800dc0e:	603e      	str	r6, [r7, #0]
 800dc10:	eb61 0303 	sbc.w	r3, r1, r3
 800dc14:	607b      	str	r3, [r7, #4]
 800dc16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	2200      	movs	r2, #0
 800dc22:	469a      	mov	sl, r3
 800dc24:	4693      	mov	fp, r2
 800dc26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800dc2a:	4552      	cmp	r2, sl
 800dc2c:	eb73 030b 	sbcs.w	r3, r3, fp
 800dc30:	f080 8118 	bcs.w	800de64 <f_read+0x2c4>
 800dc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc36:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800dc38:	e114      	b.n	800de64 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dc40:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800dc44:	2500      	movs	r5, #0
 800dc46:	ea54 0305 	orrs.w	r3, r4, r5
 800dc4a:	f040 80cd 	bne.w	800dde8 <f_read+0x248>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dc54:	f04f 0200 	mov.w	r2, #0
 800dc58:	f04f 0300 	mov.w	r3, #0
 800dc5c:	0a42      	lsrs	r2, r0, #9
 800dc5e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800dc62:	0a4b      	lsrs	r3, r1, #9
 800dc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc66:	895b      	ldrh	r3, [r3, #10]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	4013      	ands	r3, r2
 800dc6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800dc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d126      	bne.n	800dcc2 <f_read+0x122>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	d103      	bne.n	800dc86 <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc84:	e007      	b.n	800dc96 <f_read+0xf6>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dc86:	69fa      	ldr	r2, [r7, #28]
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	4610      	mov	r0, r2
 800dc90:	f7fc fefc 	bl	800aa8c <get_fat>
 800dc94:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dc96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d805      	bhi.n	800dca8 <f_read+0x108>
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	2202      	movs	r2, #2
 800dca0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dca4:	2302      	movs	r3, #2
 800dca6:	e0e2      	b.n	800de6e <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcae:	d105      	bne.n	800dcbc <f_read+0x11c>
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e0d8      	b.n	800de6e <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dcc0:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dcc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcc8:	4619      	mov	r1, r3
 800dcca:	4610      	mov	r0, r2
 800dccc:	f7fc febe 	bl	800aa4c <clust2sect>
 800dcd0:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d105      	bne.n	800dce4 <f_read+0x144>
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	2202      	movs	r2, #2
 800dcdc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dce0:	2302      	movs	r3, #2
 800dce2:	e0c4      	b.n	800de6e <f_read+0x2ce>
			sect += csect;
 800dce4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce8:	4413      	add	r3, r2
 800dcea:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	0a5b      	lsrs	r3, r3, #9
 800dcf0:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dcf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d03b      	beq.n	800dd70 <f_read+0x1d0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dcf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcfc:	4413      	add	r3, r2
 800dcfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd00:	8952      	ldrh	r2, [r2, #10]
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d905      	bls.n	800dd12 <f_read+0x172>
					cc = fs->csize - csect;
 800dd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd08:	895b      	ldrh	r3, [r3, #10]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd14:	7858      	ldrb	r0, [r3, #1]
 800dd16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dd1c:	f7fc f988 	bl	800a030 <disk_read>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d005      	beq.n	800dd32 <f_read+0x192>
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e09d      	b.n	800de6e <f_read+0x2ce>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800dd32:	69fb      	ldr	r3, [r7, #28]
 800dd34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd38:	b25b      	sxtb	r3, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	da14      	bge.n	800dd68 <f_read+0x1c8>
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d90d      	bls.n	800dd68 <f_read+0x1c8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	025b      	lsls	r3, r3, #9
 800dd56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dd58:	18d0      	adds	r0, r2, r3
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	3350      	adds	r3, #80	@ 0x50
 800dd5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd62:	4619      	mov	r1, r3
 800dd64:	f7fc fba8 	bl	800a4b8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800dd68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd6a:	025b      	lsls	r3, r3, #9
 800dd6c:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800dd6e:	e059      	b.n	800de24 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d033      	beq.n	800dde2 <f_read+0x242>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd80:	b25b      	sxtb	r3, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	da1b      	bge.n	800ddbe <f_read+0x21e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd88:	7858      	ldrb	r0, [r3, #1]
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd94:	2301      	movs	r3, #1
 800dd96:	f7fc f96b 	bl	800a070 <disk_write>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d005      	beq.n	800ddac <f_read+0x20c>
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	2201      	movs	r2, #1
 800dda4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e060      	b.n	800de6e <f_read+0x2ce>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ddb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ddbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc0:	7858      	ldrb	r0, [r3, #1]
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800ddc8:	2301      	movs	r3, #1
 800ddca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddcc:	f7fc f930 	bl	800a030 <disk_read>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d005      	beq.n	800dde2 <f_read+0x242>
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ddde:	2301      	movs	r3, #1
 800dde0:	e045      	b.n	800de6e <f_read+0x2ce>
			}
#endif
			fp->sect = sect;
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dde6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dde8:	69fb      	ldr	r3, [r7, #28]
 800ddea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ddee:	4613      	mov	r3, r2
 800ddf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddf4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ddf8:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ddfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d901      	bls.n	800de06 <f_read+0x266>
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800de12:	4613      	mov	r3, r2
 800de14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de18:	440b      	add	r3, r1
 800de1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de1c:	4619      	mov	r1, r3
 800de1e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800de20:	f7fc fb4a 	bl	800a4b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800de24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800de26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de28:	4413      	add	r3, r2
 800de2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800de32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800de34:	2000      	movs	r0, #0
 800de36:	4688      	mov	r8, r1
 800de38:	4681      	mov	r9, r0
 800de3a:	eb12 0108 	adds.w	r1, r2, r8
 800de3e:	60b9      	str	r1, [r7, #8]
 800de40:	eb43 0309 	adc.w	r3, r3, r9
 800de44:	60fb      	str	r3, [r7, #12]
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800de4c:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de56:	441a      	add	r2, r3
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	697a      	ldr	r2, [r7, #20]
 800de5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	2b00      	cmp	r3, #0
 800de68:	f47f aee7 	bne.w	800dc3a <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3754      	adds	r7, #84	@ 0x54
 800de72:	46bd      	mov	sp, r7
 800de74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b09a      	sub	sp, #104	@ 0x68
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800de86:	4611      	mov	r1, r2
 800de88:	4618      	mov	r0, r3
 800de8a:	f7ff fb51 	bl	800d530 <validate>
 800de8e:	4603      	mov	r3, r0
 800de90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800de94:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f040 8104 	bne.w	800e0a6 <f_sync+0x22e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 80fc 	beq.w	800e0a6 <f_sync+0x22e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800deb4:	b25b      	sxtb	r3, r3
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	da17      	bge.n	800deea <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800deba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800debc:	7858      	ldrb	r0, [r3, #1]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dec8:	2301      	movs	r3, #1
 800deca:	f7fc f8d1 	bl	800a070 <disk_write>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d001      	beq.n	800ded8 <f_sync+0x60>
 800ded4:	2301      	movs	r3, #1
 800ded6:	e0e8      	b.n	800e0aa <f_sync+0x232>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800deea:	4b72      	ldr	r3, [pc, #456]	@ (800e0b4 <f_sync+0x23c>)
 800deec:	663b      	str	r3, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800deee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	2b04      	cmp	r3, #4
 800def4:	f040 808c 	bne.w	800e010 <f_sync+0x198>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	4618      	mov	r0, r3
 800defc:	f7fd f8b4 	bl	800b068 <fill_first_frag>
 800df00:	4603      	mov	r3, r0
 800df02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800df06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10a      	bne.n	800df24 <f_sync+0xac>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df14:	f04f 32ff 	mov.w	r2, #4294967295
 800df18:	4619      	mov	r1, r3
 800df1a:	f7fd f8d4 	bl	800b0c6 <fill_last_frag>
 800df1e:	4603      	mov	r3, r0
 800df20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800df24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f040 80bc 	bne.w	800e0a6 <f_sync+0x22e>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800df2e:	687a      	ldr	r2, [r7, #4]
 800df30:	f107 0308 	add.w	r3, r7, #8
 800df34:	4611      	mov	r1, r2
 800df36:	4618      	mov	r0, r3
 800df38:	f7fd ffac 	bl	800be94 <load_obj_dir>
 800df3c:	4603      	mov	r3, r0
 800df3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800df42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800df46:	2b00      	cmp	r3, #0
 800df48:	f040 80ad 	bne.w	800e0a6 <f_sync+0x22e>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800df4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	3304      	adds	r3, #4
 800df52:	781a      	ldrb	r2, [r3, #0]
 800df54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	3304      	adds	r3, #4
 800df5a:	f042 0220 	orr.w	r2, r2, #32
 800df5e:	b2d2      	uxtb	r2, r2
 800df60:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	79da      	ldrb	r2, [r3, #7]
 800df66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df68:	691b      	ldr	r3, [r3, #16]
 800df6a:	3321      	adds	r3, #33	@ 0x21
 800df6c:	f042 0201 	orr.w	r2, r2, #1
 800df70:	b2d2      	uxtb	r2, r2
 800df72:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800df74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	4619      	mov	r1, r3
 800df82:	4610      	mov	r0, r2
 800df84:	f7fc f9e4 	bl	800a350 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800df88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df8a:	691b      	ldr	r3, [r3, #16]
 800df8c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800df96:	4608      	mov	r0, r1
 800df98:	f7fc fa06 	bl	800a3a8 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800df9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dfaa:	4608      	mov	r0, r1
 800dfac:	f7fc f9fc 	bl	800a3a8 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800dfb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dfb2:	691b      	ldr	r3, [r3, #16]
 800dfb4:	330c      	adds	r3, #12
 800dfb6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7fc f9c9 	bl	800a350 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800dfbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	3315      	adds	r3, #21
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800dfc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	3310      	adds	r3, #16
 800dfce:	2100      	movs	r1, #0
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fc f9bd 	bl	800a350 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800dfd6:	f107 0308 	add.w	r3, r7, #8
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7fd ff90 	bl	800bf00 <store_xdir>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800dfe6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d15b      	bne.n	800e0a6 <f_sync+0x22e>
							res = sync_fs(fs);
 800dfee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fc fcbd 	bl	800a970 <sync_fs>
 800dff6:	4603      	mov	r3, r0
 800dff8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e002:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e006:	b2da      	uxtb	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800e00e:	e04a      	b.n	800e0a6 <f_sync+0x22e>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e010:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e016:	4619      	mov	r1, r3
 800e018:	4610      	mov	r0, r2
 800e01a:	f7fc fc7b 	bl	800a914 <move_window>
 800e01e:	4603      	mov	r3, r0
 800e020:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800e024:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d13c      	bne.n	800e0a6 <f_sync+0x22e>
					dir = fp->dir_ptr;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e030:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e034:	330b      	adds	r3, #11
 800e036:	781a      	ldrb	r2, [r3, #0]
 800e038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e03a:	330b      	adds	r3, #11
 800e03c:	f042 0220 	orr.w	r2, r2, #32
 800e040:	b2d2      	uxtb	r2, r2
 800e042:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6818      	ldr	r0, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	461a      	mov	r2, r3
 800e04e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800e050:	f7fd fbf5 	bl	800b83e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e054:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e056:	f103 001c 	add.w	r0, r3, #28
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e060:	4613      	mov	r3, r2
 800e062:	4619      	mov	r1, r3
 800e064:	f7fc f974 	bl	800a350 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e06a:	3316      	adds	r3, #22
 800e06c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fc f96e 	bl	800a350 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e076:	3312      	adds	r3, #18
 800e078:	2100      	movs	r1, #0
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fc f94d 	bl	800a31a <st_word>
					fs->wflag = 1;
 800e080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e082:	2201      	movs	r2, #1
 800e084:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e088:	4618      	mov	r0, r3
 800e08a:	f7fc fc71 	bl	800a970 <sync_fs>
 800e08e:	4603      	mov	r3, r0
 800e090:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e09a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e0a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3768      	adds	r7, #104	@ 0x68
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	5a4e0000 	.word	0x5a4e0000

0800e0b8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7ff fed9 	bl	800de78 <f_sync>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d118      	bne.n	800e102 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f107 0208 	add.w	r2, r7, #8
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7ff fa29 	bl	800d530 <validate>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e0e2:	7bfb      	ldrb	r3, [r7, #15]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10c      	bne.n	800e102 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fc fb6d 	bl	800a7cc <dec_lock>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d102      	bne.n	800e102 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e102:	7bfb      	ldrb	r3, [r7, #15]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e10c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e110:	b0a8      	sub	sp, #160	@ 0xa0
 800e112:	af00      	add	r7, sp, #0
 800e114:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800e116:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e11a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e11c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800e120:	4619      	mov	r1, r3
 800e122:	4610      	mov	r0, r2
 800e124:	f7ff fa04 	bl	800d530 <validate>
 800e128:	4603      	mov	r3, r0
 800e12a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e12e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e132:	2b00      	cmp	r3, #0
 800e134:	d104      	bne.n	800e140 <f_lseek+0x34>
 800e136:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e138:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e13c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800e140:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10f      	bne.n	800e168 <f_lseek+0x5c>
 800e148:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	2b04      	cmp	r3, #4
 800e150:	d10a      	bne.n	800e168 <f_lseek+0x5c>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e152:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800e154:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e158:	f04f 32ff 	mov.w	r2, #4294967295
 800e15c:	4619      	mov	r1, r3
 800e15e:	f7fc ffb2 	bl	800b0c6 <fill_last_frag>
 800e162:	4603      	mov	r3, r0
 800e164:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e168:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d002      	beq.n	800e176 <f_lseek+0x6a>
 800e170:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e174:	e20a      	b.n	800e58c <f_lseek+0x480>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800e176:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	2b04      	cmp	r3, #4
 800e17e:	d009      	beq.n	800e194 <f_lseek+0x88>
 800e180:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e184:	2b01      	cmp	r3, #1
 800e186:	d305      	bcc.n	800e194 <f_lseek+0x88>
 800e188:	f04f 32ff 	mov.w	r2, #4294967295
 800e18c:	f04f 0300 	mov.w	r3, #0
 800e190:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e194:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e196:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e19a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e19e:	4290      	cmp	r0, r2
 800e1a0:	eb71 0303 	sbcs.w	r3, r1, r3
 800e1a4:	d20b      	bcs.n	800e1be <f_lseek+0xb2>
 800e1a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e1a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1ac:	f003 0302 	and.w	r3, r3, #2
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d104      	bne.n	800e1be <f_lseek+0xb2>
			ofs = fp->obj.objsize;
 800e1b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e1b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e1ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		}
		ifptr = fp->fptr;
 800e1be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e1c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e1c4:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		fp->fptr = nsect = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e1ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e1d0:	f04f 0200 	mov.w	r2, #0
 800e1d4:	f04f 0300 	mov.w	r3, #0
 800e1d8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs) {
 800e1dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	f000 816a 	beq.w	800e4ba <f_lseek+0x3ae>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e1e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e1ea:	895b      	ldrh	r3, [r3, #10]
 800e1ec:	025b      	lsls	r3, r3, #9
 800e1ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (ifptr > 0 &&
 800e1f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	d05d      	beq.n	800e2b6 <f_lseek+0x1aa>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e1fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e1fe:	1e54      	subs	r4, r2, #1
 800e200:	f143 35ff 	adc.w	r5, r3, #4294967295
 800e204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e208:	2200      	movs	r2, #0
 800e20a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e20c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e20e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800e212:	4620      	mov	r0, r4
 800e214:	4629      	mov	r1, r5
 800e216:	f7f1 ffd7 	bl	80001c8 <__aeabi_uldivmod>
 800e21a:	4602      	mov	r2, r0
 800e21c:	460b      	mov	r3, r1
 800e21e:	4614      	mov	r4, r2
 800e220:	461d      	mov	r5, r3
 800e222:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e226:	1e51      	subs	r1, r2, #1
 800e228:	6639      	str	r1, [r7, #96]	@ 0x60
 800e22a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e22e:	667b      	str	r3, [r7, #100]	@ 0x64
 800e230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e234:	2200      	movs	r2, #0
 800e236:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e238:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e23a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e23e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800e242:	f7f1 ffc1 	bl	80001c8 <__aeabi_uldivmod>
 800e246:	4602      	mov	r2, r0
 800e248:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800e24a:	4294      	cmp	r4, r2
 800e24c:	eb75 0303 	sbcs.w	r3, r5, r3
 800e250:	d331      	bcc.n	800e2b6 <f_lseek+0x1aa>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e252:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e256:	f112 3aff 	adds.w	sl, r2, #4294967295
 800e25a:	f143 3bff 	adc.w	fp, r3, #4294967295
 800e25e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e262:	3b01      	subs	r3, #1
 800e264:	2200      	movs	r2, #0
 800e266:	653b      	str	r3, [r7, #80]	@ 0x50
 800e268:	657a      	str	r2, [r7, #84]	@ 0x54
 800e26a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e26e:	460b      	mov	r3, r1
 800e270:	ea6f 0803 	mvn.w	r8, r3
 800e274:	4613      	mov	r3, r2
 800e276:	ea6f 0903 	mvn.w	r9, r3
 800e27a:	ea0a 0308 	and.w	r3, sl, r8
 800e27e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e280:	ea0b 0309 	and.w	r3, fp, r9
 800e284:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e286:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e288:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e28c:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800e290:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e292:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e296:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e29a:	1a14      	subs	r4, r2, r0
 800e29c:	60bc      	str	r4, [r7, #8]
 800e29e:	eb63 0301 	sbc.w	r3, r3, r1
 800e2a2:	60fb      	str	r3, [r7, #12]
 800e2a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e2a8:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
				clst = fp->clust;
 800e2ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e2ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e2b4:	e02b      	b.n	800e30e <f_lseek+0x202>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e2b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e2be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d11f      	bne.n	800e306 <f_lseek+0x1fa>
					clst = create_chain(&fp->obj, 0);
 800e2c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fc ffe0 	bl	800b290 <create_chain>
 800e2d0:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e2d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d105      	bne.n	800e2e8 <f_lseek+0x1dc>
 800e2dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e2de:	2202      	movs	r2, #2
 800e2e0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e2e4:	2302      	movs	r3, #2
 800e2e6:	e151      	b.n	800e58c <f_lseek+0x480>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f0:	d105      	bne.n	800e2fe <f_lseek+0x1f2>
 800e2f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e146      	b.n	800e58c <f_lseek+0x480>
					fp->obj.sclust = clst;
 800e2fe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e300:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e304:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800e306:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e30c:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800e30e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e312:	2b00      	cmp	r3, #0
 800e314:	f000 80d1 	beq.w	800e4ba <f_lseek+0x3ae>
				while (ofs > bcs) {						/* Cluster following loop */
 800e318:	e082      	b.n	800e420 <f_lseek+0x314>
					ofs -= bcs; fp->fptr += bcs;
 800e31a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e31e:	2200      	movs	r2, #0
 800e320:	643b      	str	r3, [r7, #64]	@ 0x40
 800e322:	647a      	str	r2, [r7, #68]	@ 0x44
 800e324:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e328:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e32c:	4621      	mov	r1, r4
 800e32e:	1a51      	subs	r1, r2, r1
 800e330:	6039      	str	r1, [r7, #0]
 800e332:	4629      	mov	r1, r5
 800e334:	eb63 0301 	sbc.w	r3, r3, r1
 800e338:	607b      	str	r3, [r7, #4]
 800e33a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e33e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 800e342:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e344:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e348:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800e34c:	2000      	movs	r0, #0
 800e34e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e350:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e352:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800e356:	4621      	mov	r1, r4
 800e358:	1851      	adds	r1, r2, r1
 800e35a:	6339      	str	r1, [r7, #48]	@ 0x30
 800e35c:	4629      	mov	r1, r5
 800e35e:	414b      	adcs	r3, r1
 800e360:	637b      	str	r3, [r7, #52]	@ 0x34
 800e362:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e364:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e368:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e36c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e36e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e372:	f003 0302 	and.w	r3, r3, #2
 800e376:	2b00      	cmp	r3, #0
 800e378:	d02a      	beq.n	800e3d0 <f_lseek+0x2c4>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800e37a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e37c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e380:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e382:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e386:	4282      	cmp	r2, r0
 800e388:	418b      	sbcs	r3, r1
 800e38a:	d20e      	bcs.n	800e3aa <f_lseek+0x29e>
							fp->obj.objsize = fp->fptr;
 800e38c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e38e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e392:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e394:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800e398:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e39a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e39e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e3a6:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e3aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e3ac:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fc ff6d 	bl	800b290 <create_chain>
 800e3b6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e3ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d10e      	bne.n	800e3e0 <f_lseek+0x2d4>
							ofs = 0; break;
 800e3c2:	f04f 0200 	mov.w	r2, #0
 800e3c6:	f04f 0300 	mov.w	r3, #0
 800e3ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800e3ce:	e037      	b.n	800e440 <f_lseek+0x334>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e3d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e3d2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fc fb58 	bl	800aa8c <get_fat>
 800e3dc:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e8:	d105      	bne.n	800e3f6 <f_lseek+0x2ea>
 800e3ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e0ca      	b.n	800e58c <f_lseek+0x480>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e3f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d906      	bls.n	800e40c <f_lseek+0x300>
 800e3fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e402:	69da      	ldr	r2, [r3, #28]
 800e404:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e408:	4293      	cmp	r3, r2
 800e40a:	d305      	bcc.n	800e418 <f_lseek+0x30c>
 800e40c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e40e:	2202      	movs	r2, #2
 800e410:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e414:	2302      	movs	r3, #2
 800e416:	e0b9      	b.n	800e58c <f_lseek+0x480>
					fp->clust = clst;
 800e418:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e41a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e41e:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800e420:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e424:	2200      	movs	r2, #0
 800e426:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e428:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e42a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e42e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800e432:	4621      	mov	r1, r4
 800e434:	4291      	cmp	r1, r2
 800e436:	4629      	mov	r1, r5
 800e438:	eb71 0303 	sbcs.w	r3, r1, r3
 800e43c:	f4ff af6d 	bcc.w	800e31a <f_lseek+0x20e>
				}
				fp->fptr += ofs;
 800e440:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e442:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e446:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e44a:	1884      	adds	r4, r0, r2
 800e44c:	623c      	str	r4, [r7, #32]
 800e44e:	eb41 0303 	adc.w	r3, r1, r3
 800e452:	627b      	str	r3, [r7, #36]	@ 0x24
 800e454:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e456:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e45a:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800e45e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e462:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800e466:	61bb      	str	r3, [r7, #24]
 800e468:	2300      	movs	r3, #0
 800e46a:	61fb      	str	r3, [r7, #28]
 800e46c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e470:	460b      	mov	r3, r1
 800e472:	4313      	orrs	r3, r2
 800e474:	d021      	beq.n	800e4ba <f_lseek+0x3ae>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e476:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e47a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800e47e:	4618      	mov	r0, r3
 800e480:	f7fc fae4 	bl	800aa4c <clust2sect>
 800e484:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e488:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d105      	bne.n	800e49c <f_lseek+0x390>
 800e490:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e492:	2202      	movs	r2, #2
 800e494:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e498:	2302      	movs	r3, #2
 800e49a:	e077      	b.n	800e58c <f_lseek+0x480>
					nsect += (DWORD)(ofs / SS(fs));
 800e49c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800e4a0:	f04f 0200 	mov.w	r2, #0
 800e4a4:	f04f 0300 	mov.w	r3, #0
 800e4a8:	0a42      	lsrs	r2, r0, #9
 800e4aa:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e4ae:	0a4b      	lsrs	r3, r1, #9
 800e4b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e4b4:	4413      	add	r3, r2
 800e4b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e4ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e4c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e4c2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800e4c6:	4290      	cmp	r0, r2
 800e4c8:	eb71 0303 	sbcs.w	r3, r1, r3
 800e4cc:	d20e      	bcs.n	800e4ec <f_lseek+0x3e0>
			fp->obj.objsize = fp->fptr;
 800e4ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e4d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e4d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800e4da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4e4:	b2da      	uxtb	r2, r3
 800e4e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e4ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e4f2:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800e4f6:	613b      	str	r3, [r7, #16]
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	617b      	str	r3, [r7, #20]
 800e4fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e500:	460b      	mov	r3, r1
 800e502:	4313      	orrs	r3, r2
 800e504:	d040      	beq.n	800e588 <f_lseek+0x47c>
 800e506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e50a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e50e:	429a      	cmp	r2, r3
 800e510:	d03a      	beq.n	800e588 <f_lseek+0x47c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e512:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e514:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e518:	b25b      	sxtb	r3, r3
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	da1c      	bge.n	800e558 <f_lseek+0x44c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e51e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e522:	7858      	ldrb	r0, [r3, #1]
 800e524:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e526:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800e52a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e52c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e52e:	2301      	movs	r3, #1
 800e530:	f7fb fd9e 	bl	800a070 <disk_write>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d005      	beq.n	800e546 <f_lseek+0x43a>
 800e53a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e53c:	2201      	movs	r2, #1
 800e53e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e542:	2301      	movs	r3, #1
 800e544:	e022      	b.n	800e58c <f_lseek+0x480>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e546:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e548:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e54c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e550:	b2da      	uxtb	r2, r3
 800e552:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e554:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e558:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e55c:	7858      	ldrb	r0, [r3, #1]
 800e55e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e560:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800e564:	2301      	movs	r3, #1
 800e566:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e56a:	f7fb fd61 	bl	800a030 <disk_read>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d005      	beq.n	800e580 <f_lseek+0x474>
 800e574:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e576:	2201      	movs	r2, #1
 800e578:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e57c:	2301      	movs	r3, #1
 800e57e:	e005      	b.n	800e58c <f_lseek+0x480>
#endif
			fp->sect = nsect;
 800e580:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e586:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 800e588:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	37a0      	adds	r7, #160	@ 0xa0
 800e590:	46bd      	mov	sp, r7
 800e592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e596 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b0ba      	sub	sp, #232	@ 0xe8
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800e5a4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800e5a8:	1d3b      	adds	r3, r7, #4
 800e5aa:	2202      	movs	r2, #2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fe fc63 	bl	800ce78 <find_volume>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	dj.obj.fs = fs;
 800e5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if (res == FR_OK) {
 800e5be:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f040 80c3 	bne.w	800e74e <f_unlink+0x1b8>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800e5ce:	4611      	mov	r1, r2
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fe faff 	bl	800cbd4 <follow_path>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800e5dc:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d108      	bne.n	800e5f6 <f_unlink+0x60>
 800e5e4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800e5e8:	2102      	movs	r1, #2
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fb ffe2 	bl	800a5b4 <chk_lock>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800e5f6:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	f040 80a7 	bne.w	800e74e <f_unlink+0x1b8>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800e600:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800e604:	b25b      	sxtb	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	da03      	bge.n	800e612 <f_unlink+0x7c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800e60a:	2306      	movs	r3, #6
 800e60c:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800e610:	e008      	b.n	800e624 <f_unlink+0x8e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800e612:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800e616:	f003 0301 	and.w	r3, r3, #1
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d002      	beq.n	800e624 <f_unlink+0x8e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800e61e:	2307      	movs	r3, #7
 800e620:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
				}
			}
			if (res == FR_OK) {
 800e624:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d166      	bne.n	800e6fa <f_unlink+0x164>
#if _FS_EXFAT
				obj.fs = fs;
 800e62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e62e:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 800e630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	2b04      	cmp	r3, #4
 800e636:	d11d      	bne.n	800e674 <f_unlink+0xde>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 800e638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	3334      	adds	r3, #52	@ 0x34
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fb fd6d 	bl	800a11e <ld_dword>
 800e644:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800e648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e64c:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	3338      	adds	r3, #56	@ 0x38
 800e654:	4618      	mov	r0, r3
 800e656:	f7fb fd85 	bl	800a164 <ld_qword>
 800e65a:	4602      	mov	r2, r0
 800e65c:	460b      	mov	r3, r1
 800e65e:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e664:	691b      	ldr	r3, [r3, #16]
 800e666:	3321      	adds	r3, #33	@ 0x21
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	f003 0302 	and.w	r3, r3, #2
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	73fb      	strb	r3, [r7, #15]
 800e672:	e008      	b.n	800e686 <f_unlink+0xf0>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800e674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e676:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800e67a:	4611      	mov	r1, r2
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fd f8bf 	bl	800b800 <ld_clust>
 800e682:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800e686:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800e68a:	f003 0310 	and.w	r3, r3, #16
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d033      	beq.n	800e6fa <f_unlink+0x164>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800e692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e694:	643b      	str	r3, [r7, #64]	@ 0x40
						sdj.obj.sclust = dclst;
 800e696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e69a:	64bb      	str	r3, [r7, #72]	@ 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 800e69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	2b04      	cmp	r3, #4
 800e6a2:	d106      	bne.n	800e6b2 <f_unlink+0x11c>
							sdj.obj.objsize = obj.objsize;
 800e6a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e6a8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
							sdj.obj.stat = obj.stat;
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
 800e6ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 800e6b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fc feea 	bl	800b492 <dir_sdi>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
						if (res == FR_OK) {
 800e6c4:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d116      	bne.n	800e6fa <f_unlink+0x164>
							res = dir_read(&sdj, 0);			/* Read an item */
 800e6cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fd fcd6 	bl	800c084 <dir_read>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800e6de:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d102      	bne.n	800e6ec <f_unlink+0x156>
 800e6e6:	2307      	movs	r3, #7
 800e6e8:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800e6ec:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e6f0:	2b04      	cmp	r3, #4
 800e6f2:	d102      	bne.n	800e6fa <f_unlink+0x164>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
						}
					}
				}
			}
			if (res == FR_OK) {
 800e6fa:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d125      	bne.n	800e74e <f_unlink+0x1b8>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800e702:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800e706:	4618      	mov	r0, r3
 800e708:	f7fe f854 	bl	800c7b4 <dir_remove>
 800e70c:	4603      	mov	r3, r0
 800e70e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800e712:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e716:	2b00      	cmp	r3, #0
 800e718:	d10e      	bne.n	800e738 <f_unlink+0x1a2>
 800e71a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00a      	beq.n	800e738 <f_unlink+0x1a2>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 800e722:	f107 0308 	add.w	r3, r7, #8
 800e726:	2200      	movs	r2, #0
 800e728:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7fc fcfb 	bl	800b128 <remove_chain>
 800e732:	4603      	mov	r3, r0
 800e734:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800e738:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d106      	bne.n	800e74e <f_unlink+0x1b8>
 800e740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e742:	4618      	mov	r0, r3
 800e744:	f7fc f914 	bl	800a970 <sync_fs>
 800e748:	4603      	mov	r3, r0
 800e74a:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800e74e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
}
 800e752:	4618      	mov	r0, r3
 800e754:	37e8      	adds	r7, #232	@ 0xe8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800e75a:	b590      	push	{r4, r7, lr}
 800e75c:	b0c1      	sub	sp, #260	@ 0x104
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800e766:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800e76a:	6019      	str	r1, [r3, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800e76c:	463b      	mov	r3, r7
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fad9 	bl	800cd26 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800e774:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800e778:	1d3b      	adds	r3, r7, #4
 800e77a:	2202      	movs	r2, #2
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7fe fb7b 	bl	800ce78 <find_volume>
 800e782:	4603      	mov	r3, r0
 800e784:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	if (res == FR_OK) {
 800e788:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f040 8168 	bne.w	800ea62 <f_rename+0x308>
		djo.obj.fs = fs;
 800e792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e794:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800e79e:	4611      	mov	r1, r2
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fe fa17 	bl	800cbd4 <follow_path>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800e7ac:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d108      	bne.n	800e7c6 <f_rename+0x6c>
 800e7b4:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800e7b8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <f_rename+0x6c>
 800e7c0:	2306      	movs	r3, #6
 800e7c2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800e7c6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d108      	bne.n	800e7e0 <f_rename+0x86>
			res = chk_lock(&djo, 2);
 800e7ce:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800e7d2:	2102      	movs	r1, #2
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fb feed 	bl	800a5b4 <chk_lock>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800e7e0:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f040 813c 	bne.w	800ea62 <f_rename+0x308>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT */
 800e7ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	2b04      	cmp	r3, #4
 800e7f0:	d17d      	bne.n	800e8ee <f_rename+0x194>
				BYTE nf, nn;
				WORD nh;

				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
 800e7f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7f4:	6919      	ldr	r1, [r3, #16]
 800e7f6:	f107 030c 	add.w	r3, r7, #12
 800e7fa:	2240      	movs	r2, #64	@ 0x40
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7fb fe5b 	bl	800a4b8 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof djo);
 800e802:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800e806:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e80a:	2250      	movs	r2, #80	@ 0x50
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fb fe53 	bl	800a4b8 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800e812:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800e816:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e820:	4611      	mov	r1, r2
 800e822:	4618      	mov	r0, r3
 800e824:	f7fe f9d6 	bl	800cbd4 <follow_path>
 800e828:	4603      	mov	r3, r0
 800e82a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800e82e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10f      	bne.n	800e856 <f_rename+0xfc>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800e836:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e838:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d107      	bne.n	800e850 <f_rename+0xf6>
 800e840:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e844:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e848:	429a      	cmp	r2, r3
 800e84a:	d101      	bne.n	800e850 <f_rename+0xf6>
 800e84c:	2304      	movs	r3, #4
 800e84e:	e000      	b.n	800e852 <f_rename+0xf8>
 800e850:	2308      	movs	r3, #8
 800e852:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800e856:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e85a:	2b04      	cmp	r3, #4
 800e85c:	f040 80ea 	bne.w	800ea34 <f_rename+0x2da>
					res = dir_register(&djn);			/* Register the new entry */
 800e860:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e864:	4618      	mov	r0, r3
 800e866:	f7fd fdff 	bl	800c468 <dir_register>
 800e86a:	4603      	mov	r3, r0
 800e86c:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
					if (res == FR_OK) {
 800e870:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e874:	2b00      	cmp	r3, #0
 800e876:	f040 80dd 	bne.w	800ea34 <f_rename+0x2da>
						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
 800e87a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e87c:	691b      	ldr	r3, [r3, #16]
 800e87e:	785b      	ldrb	r3, [r3, #1]
 800e880:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
 800e884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e886:	691b      	ldr	r3, [r3, #16]
 800e888:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800e88c:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
						nh = ld_word(fs->dirbuf + XDIR_NameHash);
 800e890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e892:	691b      	ldr	r3, [r3, #16]
 800e894:	3324      	adds	r3, #36	@ 0x24
 800e896:	4618      	mov	r0, r3
 800e898:	f7fb fc28 	bl	800a0ec <ld_word>
 800e89c:	4603      	mov	r3, r0
 800e89e:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);
 800e8a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8a4:	691b      	ldr	r3, [r3, #16]
 800e8a6:	f107 010c 	add.w	r1, r7, #12
 800e8aa:	2240      	movs	r2, #64	@ 0x40
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7fb fe03 	bl	800a4b8 <mem_cpy>
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
 800e8b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8b4:	691b      	ldr	r3, [r3, #16]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	f897 20f3 	ldrb.w	r2, [r7, #243]	@ 0xf3
 800e8bc:	701a      	strb	r2, [r3, #0]
 800e8be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	3323      	adds	r3, #35	@ 0x23
 800e8c4:	f897 20f2 	ldrb.w	r2, [r7, #242]	@ 0xf2
 800e8c8:	701a      	strb	r2, [r3, #0]
						st_word(fs->dirbuf + XDIR_NameHash, nh);
 800e8ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	3324      	adds	r3, #36	@ 0x24
 800e8d0:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fb fd1f 	bl	800a31a <st_word>
/* Start of critical section where an interruption can cause a cross-link */
						res = store_xdir(&djn);
 800e8dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fd fb0d 	bl	800bf00 <store_xdir>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800e8ec:	e0a2      	b.n	800ea34 <f_rename+0x2da>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800e8ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e8f2:	f103 010b 	add.w	r1, r3, #11
 800e8f6:	f107 030c 	add.w	r3, r7, #12
 800e8fa:	2215      	movs	r2, #21
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fb fddb 	bl	800a4b8 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800e902:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800e906:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e90a:	2250      	movs	r2, #80	@ 0x50
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fb fdd3 	bl	800a4b8 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800e912:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800e916:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e920:	4611      	mov	r1, r2
 800e922:	4618      	mov	r0, r3
 800e924:	f7fe f956 	bl	800cbd4 <follow_path>
 800e928:	4603      	mov	r3, r0
 800e92a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800e92e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e932:	2b00      	cmp	r3, #0
 800e934:	d10f      	bne.n	800e956 <f_rename+0x1fc>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800e936:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d107      	bne.n	800e950 <f_rename+0x1f6>
 800e940:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e944:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e948:	429a      	cmp	r2, r3
 800e94a:	d101      	bne.n	800e950 <f_rename+0x1f6>
 800e94c:	2304      	movs	r3, #4
 800e94e:	e000      	b.n	800e952 <f_rename+0x1f8>
 800e950:	2308      	movs	r3, #8
 800e952:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800e956:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e95a:	2b04      	cmp	r3, #4
 800e95c:	d16a      	bne.n	800ea34 <f_rename+0x2da>
					res = dir_register(&djn);			/* Register the new entry */
 800e95e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800e962:	4618      	mov	r0, r3
 800e964:	f7fd fd80 	bl	800c468 <dir_register>
 800e968:	4603      	mov	r3, r0
 800e96a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
					if (res == FR_OK) {
 800e96e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e972:	2b00      	cmp	r3, #0
 800e974:	d15e      	bne.n	800ea34 <f_rename+0x2da>
						dir = djn.dir;					/* Copy information about object except name */
 800e976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e97a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
						mem_cpy(dir + 13, buf + 2, 19);
 800e97e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e982:	f103 000d 	add.w	r0, r3, #13
 800e986:	f107 030c 	add.w	r3, r7, #12
 800e98a:	3302      	adds	r3, #2
 800e98c:	2213      	movs	r2, #19
 800e98e:	4619      	mov	r1, r3
 800e990:	f7fb fd92 	bl	800a4b8 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800e994:	7b3a      	ldrb	r2, [r7, #12]
 800e996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e99a:	330b      	adds	r3, #11
 800e99c:	f042 0220 	orr.w	r2, r2, #32
 800e9a0:	b2d2      	uxtb	r2, r2
 800e9a2:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800e9a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800e9aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e9ae:	330b      	adds	r3, #11
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	f003 0310 	and.w	r3, r3, #16
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d03c      	beq.n	800ea34 <f_rename+0x2da>
 800e9ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e9be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d037      	beq.n	800ea34 <f_rename+0x2da>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800e9c4:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800e9c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9c8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7fc ff17 	bl	800b800 <ld_clust>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f7fc f838 	bl	800aa4c <clust2sect>
 800e9dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
							if (!dw) {
 800e9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d103      	bne.n	800e9f0 <f_rename+0x296>
								res = FR_INT_ERR;
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800e9ee:	e021      	b.n	800ea34 <f_rename+0x2da>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800e9f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9f2:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fb ff8c 	bl	800a914 <move_window>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800ea02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea04:	3338      	adds	r3, #56	@ 0x38
 800ea06:	3320      	adds	r3, #32
 800ea08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
								if (res == FR_OK && dir[1] == '.') {
 800ea0c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10f      	bne.n	800ea34 <f_rename+0x2da>
 800ea14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ea18:	3301      	adds	r3, #1
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea1e:	d109      	bne.n	800ea34 <f_rename+0x2da>
									st_clust(fs, dir, djn.obj.sclust);
 800ea20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea24:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fc ff08 	bl	800b83e <st_clust>
									fs->wflag = 1;
 800ea2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea30:	2201      	movs	r2, #1
 800ea32:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800ea34:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d112      	bne.n	800ea62 <f_rename+0x308>
				res = dir_remove(&djo);		/* Remove old entry */
 800ea3c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fd feb7 	bl	800c7b4 <dir_remove>
 800ea46:	4603      	mov	r3, r0
 800ea48:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
				if (res == FR_OK) {
 800ea4c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d106      	bne.n	800ea62 <f_rename+0x308>
					res = sync_fs(fs);
 800ea54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7fb ff8a 	bl	800a970 <sync_fs>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ea62:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd90      	pop	{r4, r7, pc}

0800ea70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b087      	sub	sp, #28
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ea82:	2300      	movs	r3, #0
 800ea84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ea86:	4b1f      	ldr	r3, [pc, #124]	@ (800eb04 <FATFS_LinkDriverEx+0x94>)
 800ea88:	7a5b      	ldrb	r3, [r3, #9]
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d131      	bne.n	800eaf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ea90:	4b1c      	ldr	r3, [pc, #112]	@ (800eb04 <FATFS_LinkDriverEx+0x94>)
 800ea92:	7a5b      	ldrb	r3, [r3, #9]
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	461a      	mov	r2, r3
 800ea98:	4b1a      	ldr	r3, [pc, #104]	@ (800eb04 <FATFS_LinkDriverEx+0x94>)
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ea9e:	4b19      	ldr	r3, [pc, #100]	@ (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eaa0:	7a5b      	ldrb	r3, [r3, #9]
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	4a17      	ldr	r2, [pc, #92]	@ (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	4413      	add	r3, r2
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800eaae:	4b15      	ldr	r3, [pc, #84]	@ (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eab0:	7a5b      	ldrb	r3, [r3, #9]
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	461a      	mov	r2, r3
 800eab6:	4b13      	ldr	r3, [pc, #76]	@ (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eab8:	4413      	add	r3, r2
 800eaba:	79fa      	ldrb	r2, [r7, #7]
 800eabc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eabe:	4b11      	ldr	r3, [pc, #68]	@ (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eac0:	7a5b      	ldrb	r3, [r3, #9]
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	b2d1      	uxtb	r1, r2
 800eac8:	4a0e      	ldr	r2, [pc, #56]	@ (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eaca:	7251      	strb	r1, [r2, #9]
 800eacc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eace:	7dbb      	ldrb	r3, [r7, #22]
 800ead0:	3330      	adds	r3, #48	@ 0x30
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	3301      	adds	r3, #1
 800eadc:	223a      	movs	r2, #58	@ 0x3a
 800eade:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	3302      	adds	r3, #2
 800eae4:	222f      	movs	r2, #47	@ 0x2f
 800eae6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	3303      	adds	r3, #3
 800eaec:	2200      	movs	r2, #0
 800eaee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eaf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	371c      	adds	r7, #28
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	20001a50 	.word	0x20001a50

0800eb08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eb12:	2200      	movs	r2, #0
 800eb14:	6839      	ldr	r1, [r7, #0]
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f7ff ffaa 	bl	800ea70 <FATFS_LinkDriverEx>
 800eb1c:	4603      	mov	r3, r0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
	...

0800eb28 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	4603      	mov	r3, r0
 800eb30:	6039      	str	r1, [r7, #0]
 800eb32:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800eb34:	88fb      	ldrh	r3, [r7, #6]
 800eb36:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb38:	d802      	bhi.n	800eb40 <ff_convert+0x18>
		c = chr;
 800eb3a:	88fb      	ldrh	r3, [r7, #6]
 800eb3c:	81fb      	strh	r3, [r7, #14]
 800eb3e:	e025      	b.n	800eb8c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00b      	beq.n	800eb5e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800eb46:	88fb      	ldrh	r3, [r7, #6]
 800eb48:	2bff      	cmp	r3, #255	@ 0xff
 800eb4a:	d805      	bhi.n	800eb58 <ff_convert+0x30>
 800eb4c:	88fb      	ldrh	r3, [r7, #6]
 800eb4e:	3b80      	subs	r3, #128	@ 0x80
 800eb50:	4a12      	ldr	r2, [pc, #72]	@ (800eb9c <ff_convert+0x74>)
 800eb52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb56:	e000      	b.n	800eb5a <ff_convert+0x32>
 800eb58:	2300      	movs	r3, #0
 800eb5a:	81fb      	strh	r3, [r7, #14]
 800eb5c:	e016      	b.n	800eb8c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800eb5e:	2300      	movs	r3, #0
 800eb60:	81fb      	strh	r3, [r7, #14]
 800eb62:	e009      	b.n	800eb78 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800eb64:	89fb      	ldrh	r3, [r7, #14]
 800eb66:	4a0d      	ldr	r2, [pc, #52]	@ (800eb9c <ff_convert+0x74>)
 800eb68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb6c:	88fa      	ldrh	r2, [r7, #6]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d006      	beq.n	800eb80 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800eb72:	89fb      	ldrh	r3, [r7, #14]
 800eb74:	3301      	adds	r3, #1
 800eb76:	81fb      	strh	r3, [r7, #14]
 800eb78:	89fb      	ldrh	r3, [r7, #14]
 800eb7a:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb7c:	d9f2      	bls.n	800eb64 <ff_convert+0x3c>
 800eb7e:	e000      	b.n	800eb82 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800eb80:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800eb82:	89fb      	ldrh	r3, [r7, #14]
 800eb84:	3380      	adds	r3, #128	@ 0x80
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800eb8c:	89fb      	ldrh	r3, [r7, #14]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop
 800eb9c:	0800fa1c 	.word	0x0800fa1c

0800eba0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b087      	sub	sp, #28
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	4603      	mov	r3, r0
 800eba8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ebaa:	88fb      	ldrh	r3, [r7, #6]
 800ebac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebb0:	d201      	bcs.n	800ebb6 <ff_wtoupper+0x16>
 800ebb2:	4b3e      	ldr	r3, [pc, #248]	@ (800ecac <ff_wtoupper+0x10c>)
 800ebb4:	e000      	b.n	800ebb8 <ff_wtoupper+0x18>
 800ebb6:	4b3e      	ldr	r3, [pc, #248]	@ (800ecb0 <ff_wtoupper+0x110>)
 800ebb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	1c9a      	adds	r2, r3, #2
 800ebbe:	617a      	str	r2, [r7, #20]
 800ebc0:	881b      	ldrh	r3, [r3, #0]
 800ebc2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ebc4:	8a7b      	ldrh	r3, [r7, #18]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d068      	beq.n	800ec9c <ff_wtoupper+0xfc>
 800ebca:	88fa      	ldrh	r2, [r7, #6]
 800ebcc:	8a7b      	ldrh	r3, [r7, #18]
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d364      	bcc.n	800ec9c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	1c9a      	adds	r2, r3, #2
 800ebd6:	617a      	str	r2, [r7, #20]
 800ebd8:	881b      	ldrh	r3, [r3, #0]
 800ebda:	823b      	strh	r3, [r7, #16]
 800ebdc:	8a3b      	ldrh	r3, [r7, #16]
 800ebde:	0a1b      	lsrs	r3, r3, #8
 800ebe0:	81fb      	strh	r3, [r7, #14]
 800ebe2:	8a3b      	ldrh	r3, [r7, #16]
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ebe8:	88fa      	ldrh	r2, [r7, #6]
 800ebea:	8a79      	ldrh	r1, [r7, #18]
 800ebec:	8a3b      	ldrh	r3, [r7, #16]
 800ebee:	440b      	add	r3, r1
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	da49      	bge.n	800ec88 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ebf4:	89fb      	ldrh	r3, [r7, #14]
 800ebf6:	2b08      	cmp	r3, #8
 800ebf8:	d84f      	bhi.n	800ec9a <ff_wtoupper+0xfa>
 800ebfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ec00 <ff_wtoupper+0x60>)
 800ebfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec00:	0800ec25 	.word	0x0800ec25
 800ec04:	0800ec37 	.word	0x0800ec37
 800ec08:	0800ec4d 	.word	0x0800ec4d
 800ec0c:	0800ec55 	.word	0x0800ec55
 800ec10:	0800ec5d 	.word	0x0800ec5d
 800ec14:	0800ec65 	.word	0x0800ec65
 800ec18:	0800ec6d 	.word	0x0800ec6d
 800ec1c:	0800ec75 	.word	0x0800ec75
 800ec20:	0800ec7d 	.word	0x0800ec7d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ec24:	88fa      	ldrh	r2, [r7, #6]
 800ec26:	8a7b      	ldrh	r3, [r7, #18]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	005b      	lsls	r3, r3, #1
 800ec2c:	697a      	ldr	r2, [r7, #20]
 800ec2e:	4413      	add	r3, r2
 800ec30:	881b      	ldrh	r3, [r3, #0]
 800ec32:	80fb      	strh	r3, [r7, #6]
 800ec34:	e027      	b.n	800ec86 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ec36:	88fa      	ldrh	r2, [r7, #6]
 800ec38:	8a7b      	ldrh	r3, [r7, #18]
 800ec3a:	1ad3      	subs	r3, r2, r3
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	f003 0301 	and.w	r3, r3, #1
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	88fa      	ldrh	r2, [r7, #6]
 800ec46:	1ad3      	subs	r3, r2, r3
 800ec48:	80fb      	strh	r3, [r7, #6]
 800ec4a:	e01c      	b.n	800ec86 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ec4c:	88fb      	ldrh	r3, [r7, #6]
 800ec4e:	3b10      	subs	r3, #16
 800ec50:	80fb      	strh	r3, [r7, #6]
 800ec52:	e018      	b.n	800ec86 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ec54:	88fb      	ldrh	r3, [r7, #6]
 800ec56:	3b20      	subs	r3, #32
 800ec58:	80fb      	strh	r3, [r7, #6]
 800ec5a:	e014      	b.n	800ec86 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ec5c:	88fb      	ldrh	r3, [r7, #6]
 800ec5e:	3b30      	subs	r3, #48	@ 0x30
 800ec60:	80fb      	strh	r3, [r7, #6]
 800ec62:	e010      	b.n	800ec86 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ec64:	88fb      	ldrh	r3, [r7, #6]
 800ec66:	3b1a      	subs	r3, #26
 800ec68:	80fb      	strh	r3, [r7, #6]
 800ec6a:	e00c      	b.n	800ec86 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ec6c:	88fb      	ldrh	r3, [r7, #6]
 800ec6e:	3308      	adds	r3, #8
 800ec70:	80fb      	strh	r3, [r7, #6]
 800ec72:	e008      	b.n	800ec86 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ec74:	88fb      	ldrh	r3, [r7, #6]
 800ec76:	3b50      	subs	r3, #80	@ 0x50
 800ec78:	80fb      	strh	r3, [r7, #6]
 800ec7a:	e004      	b.n	800ec86 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ec7c:	88fb      	ldrh	r3, [r7, #6]
 800ec7e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800ec82:	80fb      	strh	r3, [r7, #6]
 800ec84:	bf00      	nop
			}
			break;
 800ec86:	e008      	b.n	800ec9a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ec88:	89fb      	ldrh	r3, [r7, #14]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d195      	bne.n	800ebba <ff_wtoupper+0x1a>
 800ec8e:	8a3b      	ldrh	r3, [r7, #16]
 800ec90:	005b      	lsls	r3, r3, #1
 800ec92:	697a      	ldr	r2, [r7, #20]
 800ec94:	4413      	add	r3, r2
 800ec96:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ec98:	e78f      	b.n	800ebba <ff_wtoupper+0x1a>
			break;
 800ec9a:	bf00      	nop
	}

	return chr;
 800ec9c:	88fb      	ldrh	r3, [r7, #6]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	371c      	adds	r7, #28
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	0800fb1c 	.word	0x0800fb1c
 800ecb0:	0800fd10 	.word	0x0800fd10

0800ecb4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ecb8:	2200      	movs	r2, #0
 800ecba:	490e      	ldr	r1, [pc, #56]	@ (800ecf4 <MX_USB_HOST_Init+0x40>)
 800ecbc:	480e      	ldr	r0, [pc, #56]	@ (800ecf8 <MX_USB_HOST_Init+0x44>)
 800ecbe:	f7f9 fc92 	bl	80085e6 <USBH_Init>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d001      	beq.n	800eccc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ecc8:	f7f2 fa14 	bl	80010f4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800eccc:	490b      	ldr	r1, [pc, #44]	@ (800ecfc <MX_USB_HOST_Init+0x48>)
 800ecce:	480a      	ldr	r0, [pc, #40]	@ (800ecf8 <MX_USB_HOST_Init+0x44>)
 800ecd0:	f7f9 fd36 	bl	8008740 <USBH_RegisterClass>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d001      	beq.n	800ecde <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ecda:	f7f2 fa0b 	bl	80010f4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ecde:	4806      	ldr	r0, [pc, #24]	@ (800ecf8 <MX_USB_HOST_Init+0x44>)
 800ece0:	f7f9 fdba 	bl	8008858 <USBH_Start>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d001      	beq.n	800ecee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ecea:	f7f2 fa03 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ecee:	bf00      	nop
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	0800ed15 	.word	0x0800ed15
 800ecf8:	20001a5c 	.word	0x20001a5c
 800ecfc:	2000000c 	.word	0x2000000c

0800ed00 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800ed04:	4802      	ldr	r0, [pc, #8]	@ (800ed10 <MX_USB_HOST_Process+0x10>)
 800ed06:	f7f9 fdb7 	bl	8008878 <USBH_Process>
}
 800ed0a:	bf00      	nop
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	20001a5c 	.word	0x20001a5c

0800ed14 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ed20:	78fb      	ldrb	r3, [r7, #3]
 800ed22:	3b01      	subs	r3, #1
 800ed24:	2b04      	cmp	r3, #4
 800ed26:	d819      	bhi.n	800ed5c <USBH_UserProcess+0x48>
 800ed28:	a201      	add	r2, pc, #4	@ (adr r2, 800ed30 <USBH_UserProcess+0x1c>)
 800ed2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed2e:	bf00      	nop
 800ed30:	0800ed5d 	.word	0x0800ed5d
 800ed34:	0800ed4d 	.word	0x0800ed4d
 800ed38:	0800ed5d 	.word	0x0800ed5d
 800ed3c:	0800ed55 	.word	0x0800ed55
 800ed40:	0800ed45 	.word	0x0800ed45
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ed44:	4b09      	ldr	r3, [pc, #36]	@ (800ed6c <USBH_UserProcess+0x58>)
 800ed46:	2203      	movs	r2, #3
 800ed48:	701a      	strb	r2, [r3, #0]
  break;
 800ed4a:	e008      	b.n	800ed5e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ed4c:	4b07      	ldr	r3, [pc, #28]	@ (800ed6c <USBH_UserProcess+0x58>)
 800ed4e:	2202      	movs	r2, #2
 800ed50:	701a      	strb	r2, [r3, #0]
  break;
 800ed52:	e004      	b.n	800ed5e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ed54:	4b05      	ldr	r3, [pc, #20]	@ (800ed6c <USBH_UserProcess+0x58>)
 800ed56:	2201      	movs	r2, #1
 800ed58:	701a      	strb	r2, [r3, #0]
  break;
 800ed5a:	e000      	b.n	800ed5e <USBH_UserProcess+0x4a>

  default:
  break;
 800ed5c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ed5e:	bf00      	nop
 800ed60:	370c      	adds	r7, #12
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop
 800ed6c:	20001e34 	.word	0x20001e34

0800ed70 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08a      	sub	sp, #40	@ 0x28
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed78:	f107 0314 	add.w	r3, r7, #20
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	601a      	str	r2, [r3, #0]
 800ed80:	605a      	str	r2, [r3, #4]
 800ed82:	609a      	str	r2, [r3, #8]
 800ed84:	60da      	str	r2, [r3, #12]
 800ed86:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ee04 <HAL_HCD_MspInit+0x94>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d134      	bne.n	800edfc <HAL_HCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ed92:	2300      	movs	r3, #0
 800ed94:	613b      	str	r3, [r7, #16]
 800ed96:	4b1c      	ldr	r3, [pc, #112]	@ (800ee08 <HAL_HCD_MspInit+0x98>)
 800ed98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed9a:	4a1b      	ldr	r2, [pc, #108]	@ (800ee08 <HAL_HCD_MspInit+0x98>)
 800ed9c:	f043 0302 	orr.w	r3, r3, #2
 800eda0:	6313      	str	r3, [r2, #48]	@ 0x30
 800eda2:	4b19      	ldr	r3, [pc, #100]	@ (800ee08 <HAL_HCD_MspInit+0x98>)
 800eda4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eda6:	f003 0302 	and.w	r3, r3, #2
 800edaa:	613b      	str	r3, [r7, #16]
 800edac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800edae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800edb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edb4:	2302      	movs	r3, #2
 800edb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edb8:	2300      	movs	r3, #0
 800edba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edbc:	2303      	movs	r3, #3
 800edbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800edc0:	230c      	movs	r3, #12
 800edc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800edc4:	f107 0314 	add.w	r3, r7, #20
 800edc8:	4619      	mov	r1, r3
 800edca:	4810      	ldr	r0, [pc, #64]	@ (800ee0c <HAL_HCD_MspInit+0x9c>)
 800edcc:	f7f2 fed2 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800edd0:	2300      	movs	r3, #0
 800edd2:	60fb      	str	r3, [r7, #12]
 800edd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ee08 <HAL_HCD_MspInit+0x98>)
 800edd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edd8:	4a0b      	ldr	r2, [pc, #44]	@ (800ee08 <HAL_HCD_MspInit+0x98>)
 800edda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800edde:	6313      	str	r3, [r2, #48]	@ 0x30
 800ede0:	4b09      	ldr	r3, [pc, #36]	@ (800ee08 <HAL_HCD_MspInit+0x98>)
 800ede2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ede4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ede8:	60fb      	str	r3, [r7, #12]
 800edea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800edec:	2200      	movs	r2, #0
 800edee:	2100      	movs	r1, #0
 800edf0:	204d      	movs	r0, #77	@ 0x4d
 800edf2:	f7f2 fc8a 	bl	800170a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800edf6:	204d      	movs	r0, #77	@ 0x4d
 800edf8:	f7f2 fca3 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800edfc:	bf00      	nop
 800edfe:	3728      	adds	r7, #40	@ 0x28
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	40040000 	.word	0x40040000
 800ee08:	40023800 	.word	0x40023800
 800ee0c:	40020400 	.word	0x40020400

0800ee10 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fa f901 	bl	8009026 <USBH_LL_IncTimer>
}
 800ee24:	bf00      	nop
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fa f939 	bl	80090b2 <USBH_LL_Connect>
}
 800ee40:	bf00      	nop
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7fa f942 	bl	80090e0 <USBH_LL_Disconnect>
}
 800ee5c:	bf00      	nop
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	70fb      	strb	r3, [r7, #3]
 800ee70:	4613      	mov	r3, r2
 800ee72:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ee74:	bf00      	nop
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr

0800ee80 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fa f8f3 	bl	800907a <USBH_LL_PortEnabled>
}
 800ee94:	bf00      	nop
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fa f8f3 	bl	8009096 <USBH_LL_PortDisabled>
}
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d132      	bne.n	800ef30 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800eeca:	4a1c      	ldr	r2, [pc, #112]	@ (800ef3c <USBH_LL_Init+0x84>)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4a19      	ldr	r2, [pc, #100]	@ (800ef3c <USBH_LL_Init+0x84>)
 800eed6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800eeda:	4b18      	ldr	r3, [pc, #96]	@ (800ef3c <USBH_LL_Init+0x84>)
 800eedc:	4a18      	ldr	r2, [pc, #96]	@ (800ef40 <USBH_LL_Init+0x88>)
 800eede:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800eee0:	4b16      	ldr	r3, [pc, #88]	@ (800ef3c <USBH_LL_Init+0x84>)
 800eee2:	220c      	movs	r2, #12
 800eee4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800eee6:	4b15      	ldr	r3, [pc, #84]	@ (800ef3c <USBH_LL_Init+0x84>)
 800eee8:	2201      	movs	r2, #1
 800eeea:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800eeec:	4b13      	ldr	r3, [pc, #76]	@ (800ef3c <USBH_LL_Init+0x84>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800eef2:	4b12      	ldr	r3, [pc, #72]	@ (800ef3c <USBH_LL_Init+0x84>)
 800eef4:	2202      	movs	r2, #2
 800eef6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800eef8:	4b10      	ldr	r3, [pc, #64]	@ (800ef3c <USBH_LL_Init+0x84>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800eefe:	4b0f      	ldr	r3, [pc, #60]	@ (800ef3c <USBH_LL_Init+0x84>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ef04:	4b0d      	ldr	r3, [pc, #52]	@ (800ef3c <USBH_LL_Init+0x84>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ef0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ef3c <USBH_LL_Init+0x84>)
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800ef10:	480a      	ldr	r0, [pc, #40]	@ (800ef3c <USBH_LL_Init+0x84>)
 800ef12:	f7f2 fffe 	bl	8001f12 <HAL_HCD_Init>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d001      	beq.n	800ef20 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800ef1c:	f7f2 f8ea 	bl	80010f4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800ef20:	4806      	ldr	r0, [pc, #24]	@ (800ef3c <USBH_LL_Init+0x84>)
 800ef22:	f7f3 fc5f 	bl	80027e4 <HAL_HCD_GetCurrentFrame>
 800ef26:	4603      	mov	r3, r0
 800ef28:	4619      	mov	r1, r3
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f7fa f86c 	bl	8009008 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3708      	adds	r7, #8
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	20001e38 	.word	0x20001e38
 800ef40:	40040000 	.word	0x40040000

0800ef44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef50:	2300      	movs	r3, #0
 800ef52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7f3 fbca 	bl	80026f4 <HAL_HCD_Start>
 800ef60:	4603      	mov	r3, r0
 800ef62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef64:	7bfb      	ldrb	r3, [r7, #15]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f000 f988 	bl	800f27c <USBH_Get_USB_Status>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b084      	sub	sp, #16
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef82:	2300      	movs	r3, #0
 800ef84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef86:	2300      	movs	r3, #0
 800ef88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7f3 fbd2 	bl	800273a <HAL_HCD_Stop>
 800ef96:	4603      	mov	r3, r0
 800ef98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef9a:	7bfb      	ldrb	r3, [r7, #15]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f000 f96d 	bl	800f27c <USBH_Get_USB_Status>
 800efa2:	4603      	mov	r3, r0
 800efa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3710      	adds	r7, #16
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800efb8:	2301      	movs	r3, #1
 800efba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7f3 fc1c 	bl	8002800 <HAL_HCD_GetCurrentSpeed>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b02      	cmp	r3, #2
 800efcc:	d00c      	beq.n	800efe8 <USBH_LL_GetSpeed+0x38>
 800efce:	2b02      	cmp	r3, #2
 800efd0:	d80d      	bhi.n	800efee <USBH_LL_GetSpeed+0x3e>
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d002      	beq.n	800efdc <USBH_LL_GetSpeed+0x2c>
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d003      	beq.n	800efe2 <USBH_LL_GetSpeed+0x32>
 800efda:	e008      	b.n	800efee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800efdc:	2300      	movs	r3, #0
 800efde:	73fb      	strb	r3, [r7, #15]
    break;
 800efe0:	e008      	b.n	800eff4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800efe2:	2301      	movs	r3, #1
 800efe4:	73fb      	strb	r3, [r7, #15]
    break;
 800efe6:	e005      	b.n	800eff4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800efe8:	2302      	movs	r3, #2
 800efea:	73fb      	strb	r3, [r7, #15]
    break;
 800efec:	e002      	b.n	800eff4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800efee:	2301      	movs	r3, #1
 800eff0:	73fb      	strb	r3, [r7, #15]
    break;
 800eff2:	bf00      	nop
  }
  return  speed;
 800eff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}

0800effe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800effe:	b580      	push	{r7, lr}
 800f000:	b084      	sub	sp, #16
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f006:	2300      	movs	r3, #0
 800f008:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f00a:	2300      	movs	r3, #0
 800f00c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f014:	4618      	mov	r0, r3
 800f016:	f7f3 fbad 	bl	8002774 <HAL_HCD_ResetPort>
 800f01a:	4603      	mov	r3, r0
 800f01c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
 800f020:	4618      	mov	r0, r3
 800f022:	f000 f92b 	bl	800f27c <USBH_Get_USB_Status>
 800f026:	4603      	mov	r3, r0
 800f028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f02a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3710      	adds	r7, #16
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	460b      	mov	r3, r1
 800f03e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f046:	78fa      	ldrb	r2, [r7, #3]
 800f048:	4611      	mov	r1, r2
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7f3 fbb5 	bl	80027ba <HAL_HCD_HC_GetXferCount>
 800f050:	4603      	mov	r3, r0
}
 800f052:	4618      	mov	r0, r3
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f05a:	b590      	push	{r4, r7, lr}
 800f05c:	b089      	sub	sp, #36	@ 0x24
 800f05e:	af04      	add	r7, sp, #16
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	4608      	mov	r0, r1
 800f064:	4611      	mov	r1, r2
 800f066:	461a      	mov	r2, r3
 800f068:	4603      	mov	r3, r0
 800f06a:	70fb      	strb	r3, [r7, #3]
 800f06c:	460b      	mov	r3, r1
 800f06e:	70bb      	strb	r3, [r7, #2]
 800f070:	4613      	mov	r3, r2
 800f072:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f078:	2300      	movs	r3, #0
 800f07a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800f082:	787c      	ldrb	r4, [r7, #1]
 800f084:	78ba      	ldrb	r2, [r7, #2]
 800f086:	78f9      	ldrb	r1, [r7, #3]
 800f088:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f08a:	9302      	str	r3, [sp, #8]
 800f08c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f090:	9301      	str	r3, [sp, #4]
 800f092:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f096:	9300      	str	r3, [sp, #0]
 800f098:	4623      	mov	r3, r4
 800f09a:	f7f2 ffa1 	bl	8001fe0 <HAL_HCD_HC_Init>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f0a2:	7bfb      	ldrb	r3, [r7, #15]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f000 f8e9 	bl	800f27c <USBH_Get_USB_Status>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3714      	adds	r7, #20
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd90      	pop	{r4, r7, pc}

0800f0b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f0d2:	78fa      	ldrb	r2, [r7, #3]
 800f0d4:	4611      	mov	r1, r2
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7f3 f83a 	bl	8002150 <HAL_HCD_HC_Halt>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f0e0:	7bfb      	ldrb	r3, [r7, #15]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 f8ca 	bl	800f27c <USBH_Get_USB_Status>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3710      	adds	r7, #16
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}

0800f0f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f0f6:	b590      	push	{r4, r7, lr}
 800f0f8:	b089      	sub	sp, #36	@ 0x24
 800f0fa:	af04      	add	r7, sp, #16
 800f0fc:	6078      	str	r0, [r7, #4]
 800f0fe:	4608      	mov	r0, r1
 800f100:	4611      	mov	r1, r2
 800f102:	461a      	mov	r2, r3
 800f104:	4603      	mov	r3, r0
 800f106:	70fb      	strb	r3, [r7, #3]
 800f108:	460b      	mov	r3, r1
 800f10a:	70bb      	strb	r3, [r7, #2]
 800f10c:	4613      	mov	r3, r2
 800f10e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f114:	2300      	movs	r3, #0
 800f116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800f11e:	787c      	ldrb	r4, [r7, #1]
 800f120:	78ba      	ldrb	r2, [r7, #2]
 800f122:	78f9      	ldrb	r1, [r7, #3]
 800f124:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f128:	9303      	str	r3, [sp, #12]
 800f12a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f12c:	9302      	str	r3, [sp, #8]
 800f12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f130:	9301      	str	r3, [sp, #4]
 800f132:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	4623      	mov	r3, r4
 800f13a:	f7f3 f82d 	bl	8002198 <HAL_HCD_HC_SubmitRequest>
 800f13e:	4603      	mov	r3, r0
 800f140:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f142:	7bfb      	ldrb	r3, [r7, #15]
 800f144:	4618      	mov	r0, r3
 800f146:	f000 f899 	bl	800f27c <USBH_Get_USB_Status>
 800f14a:	4603      	mov	r3, r0
 800f14c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	bd90      	pop	{r4, r7, pc}

0800f158 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	460b      	mov	r3, r1
 800f162:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f16a:	78fa      	ldrb	r2, [r7, #3]
 800f16c:	4611      	mov	r1, r2
 800f16e:	4618      	mov	r0, r3
 800f170:	f7f3 fb0e 	bl	8002790 <HAL_HCD_HC_GetURBState>
 800f174:	4603      	mov	r3, r0
}
 800f176:	4618      	mov	r0, r3
 800f178:	3708      	adds	r7, #8
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}

0800f17e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f17e:	b580      	push	{r7, lr}
 800f180:	b082      	sub	sp, #8
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
 800f186:	460b      	mov	r3, r1
 800f188:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 800f18a:	20c8      	movs	r0, #200	@ 0xc8
 800f18c:	f7f2 f9ae 	bl	80014ec <HAL_Delay>
  return USBH_OK;
 800f190:	2300      	movs	r3, #0
}
 800f192:	4618      	mov	r0, r3
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}

0800f19a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b085      	sub	sp, #20
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	70fb      	strb	r3, [r7, #3]
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f1b0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f1b2:	78fa      	ldrb	r2, [r7, #3]
 800f1b4:	68f9      	ldr	r1, [r7, #12]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	011b      	lsls	r3, r3, #4
 800f1ba:	1a9b      	subs	r3, r3, r2
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	440b      	add	r3, r1
 800f1c0:	3317      	adds	r3, #23
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00a      	beq.n	800f1de <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f1c8:	78fa      	ldrb	r2, [r7, #3]
 800f1ca:	68f9      	ldr	r1, [r7, #12]
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	011b      	lsls	r3, r3, #4
 800f1d0:	1a9b      	subs	r3, r3, r2
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	440b      	add	r3, r1
 800f1d6:	333c      	adds	r3, #60	@ 0x3c
 800f1d8:	78ba      	ldrb	r2, [r7, #2]
 800f1da:	701a      	strb	r2, [r3, #0]
 800f1dc:	e009      	b.n	800f1f2 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f1de:	78fa      	ldrb	r2, [r7, #3]
 800f1e0:	68f9      	ldr	r1, [r7, #12]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	011b      	lsls	r3, r3, #4
 800f1e6:	1a9b      	subs	r3, r3, r2
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	440b      	add	r3, r1
 800f1ec:	333d      	adds	r3, #61	@ 0x3d
 800f1ee:	78ba      	ldrb	r2, [r7, #2]
 800f1f0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f1f2:	2300      	movs	r3, #0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f200:	b480      	push	{r7}
 800f202:	b085      	sub	sp, #20
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	460b      	mov	r3, r1
 800f20a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f20c:	2300      	movs	r3, #0
 800f20e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f216:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f218:	78fa      	ldrb	r2, [r7, #3]
 800f21a:	68b9      	ldr	r1, [r7, #8]
 800f21c:	4613      	mov	r3, r2
 800f21e:	011b      	lsls	r3, r3, #4
 800f220:	1a9b      	subs	r3, r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	440b      	add	r3, r1
 800f226:	3317      	adds	r3, #23
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d00a      	beq.n	800f244 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f22e:	78fa      	ldrb	r2, [r7, #3]
 800f230:	68b9      	ldr	r1, [r7, #8]
 800f232:	4613      	mov	r3, r2
 800f234:	011b      	lsls	r3, r3, #4
 800f236:	1a9b      	subs	r3, r3, r2
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	440b      	add	r3, r1
 800f23c:	333c      	adds	r3, #60	@ 0x3c
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	73fb      	strb	r3, [r7, #15]
 800f242:	e009      	b.n	800f258 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f244:	78fa      	ldrb	r2, [r7, #3]
 800f246:	68b9      	ldr	r1, [r7, #8]
 800f248:	4613      	mov	r3, r2
 800f24a:	011b      	lsls	r3, r3, #4
 800f24c:	1a9b      	subs	r3, r3, r2
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	440b      	add	r3, r1
 800f252:	333d      	adds	r3, #61	@ 0x3d
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f258:	7bfb      	ldrb	r3, [r7, #15]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3714      	adds	r7, #20
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr

0800f266 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f266:	b580      	push	{r7, lr}
 800f268:	b082      	sub	sp, #8
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7f2 f93c 	bl	80014ec <HAL_Delay>
}
 800f274:	bf00      	nop
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	4603      	mov	r3, r0
 800f284:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f286:	2300      	movs	r3, #0
 800f288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f28a:	79fb      	ldrb	r3, [r7, #7]
 800f28c:	2b03      	cmp	r3, #3
 800f28e:	d817      	bhi.n	800f2c0 <USBH_Get_USB_Status+0x44>
 800f290:	a201      	add	r2, pc, #4	@ (adr r2, 800f298 <USBH_Get_USB_Status+0x1c>)
 800f292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f296:	bf00      	nop
 800f298:	0800f2a9 	.word	0x0800f2a9
 800f29c:	0800f2af 	.word	0x0800f2af
 800f2a0:	0800f2b5 	.word	0x0800f2b5
 800f2a4:	0800f2bb 	.word	0x0800f2bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ac:	e00b      	b.n	800f2c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f2ae:	2302      	movs	r3, #2
 800f2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2b2:	e008      	b.n	800f2c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2b8:	e005      	b.n	800f2c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f2ba:	2302      	movs	r3, #2
 800f2bc:	73fb      	strb	r3, [r7, #15]
    break;
 800f2be:	e002      	b.n	800f2c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f2c0:	2302      	movs	r3, #2
 800f2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2c4:	bf00      	nop
  }
  return usb_status;
 800f2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3714      	adds	r7, #20
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <malloc>:
 800f2d4:	4b02      	ldr	r3, [pc, #8]	@ (800f2e0 <malloc+0xc>)
 800f2d6:	4601      	mov	r1, r0
 800f2d8:	6818      	ldr	r0, [r3, #0]
 800f2da:	f000 b82d 	b.w	800f338 <_malloc_r>
 800f2de:	bf00      	nop
 800f2e0:	2000002c 	.word	0x2000002c

0800f2e4 <free>:
 800f2e4:	4b02      	ldr	r3, [pc, #8]	@ (800f2f0 <free+0xc>)
 800f2e6:	4601      	mov	r1, r0
 800f2e8:	6818      	ldr	r0, [r3, #0]
 800f2ea:	f000 b903 	b.w	800f4f4 <_free_r>
 800f2ee:	bf00      	nop
 800f2f0:	2000002c 	.word	0x2000002c

0800f2f4 <sbrk_aligned>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	4e0f      	ldr	r6, [pc, #60]	@ (800f334 <sbrk_aligned+0x40>)
 800f2f8:	460c      	mov	r4, r1
 800f2fa:	6831      	ldr	r1, [r6, #0]
 800f2fc:	4605      	mov	r5, r0
 800f2fe:	b911      	cbnz	r1, 800f306 <sbrk_aligned+0x12>
 800f300:	f000 f8ae 	bl	800f460 <_sbrk_r>
 800f304:	6030      	str	r0, [r6, #0]
 800f306:	4621      	mov	r1, r4
 800f308:	4628      	mov	r0, r5
 800f30a:	f000 f8a9 	bl	800f460 <_sbrk_r>
 800f30e:	1c43      	adds	r3, r0, #1
 800f310:	d103      	bne.n	800f31a <sbrk_aligned+0x26>
 800f312:	f04f 34ff 	mov.w	r4, #4294967295
 800f316:	4620      	mov	r0, r4
 800f318:	bd70      	pop	{r4, r5, r6, pc}
 800f31a:	1cc4      	adds	r4, r0, #3
 800f31c:	f024 0403 	bic.w	r4, r4, #3
 800f320:	42a0      	cmp	r0, r4
 800f322:	d0f8      	beq.n	800f316 <sbrk_aligned+0x22>
 800f324:	1a21      	subs	r1, r4, r0
 800f326:	4628      	mov	r0, r5
 800f328:	f000 f89a 	bl	800f460 <_sbrk_r>
 800f32c:	3001      	adds	r0, #1
 800f32e:	d1f2      	bne.n	800f316 <sbrk_aligned+0x22>
 800f330:	e7ef      	b.n	800f312 <sbrk_aligned+0x1e>
 800f332:	bf00      	nop
 800f334:	20002218 	.word	0x20002218

0800f338 <_malloc_r>:
 800f338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f33c:	1ccd      	adds	r5, r1, #3
 800f33e:	f025 0503 	bic.w	r5, r5, #3
 800f342:	3508      	adds	r5, #8
 800f344:	2d0c      	cmp	r5, #12
 800f346:	bf38      	it	cc
 800f348:	250c      	movcc	r5, #12
 800f34a:	2d00      	cmp	r5, #0
 800f34c:	4606      	mov	r6, r0
 800f34e:	db01      	blt.n	800f354 <_malloc_r+0x1c>
 800f350:	42a9      	cmp	r1, r5
 800f352:	d904      	bls.n	800f35e <_malloc_r+0x26>
 800f354:	230c      	movs	r3, #12
 800f356:	6033      	str	r3, [r6, #0]
 800f358:	2000      	movs	r0, #0
 800f35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f35e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f434 <_malloc_r+0xfc>
 800f362:	f000 f869 	bl	800f438 <__malloc_lock>
 800f366:	f8d8 3000 	ldr.w	r3, [r8]
 800f36a:	461c      	mov	r4, r3
 800f36c:	bb44      	cbnz	r4, 800f3c0 <_malloc_r+0x88>
 800f36e:	4629      	mov	r1, r5
 800f370:	4630      	mov	r0, r6
 800f372:	f7ff ffbf 	bl	800f2f4 <sbrk_aligned>
 800f376:	1c43      	adds	r3, r0, #1
 800f378:	4604      	mov	r4, r0
 800f37a:	d158      	bne.n	800f42e <_malloc_r+0xf6>
 800f37c:	f8d8 4000 	ldr.w	r4, [r8]
 800f380:	4627      	mov	r7, r4
 800f382:	2f00      	cmp	r7, #0
 800f384:	d143      	bne.n	800f40e <_malloc_r+0xd6>
 800f386:	2c00      	cmp	r4, #0
 800f388:	d04b      	beq.n	800f422 <_malloc_r+0xea>
 800f38a:	6823      	ldr	r3, [r4, #0]
 800f38c:	4639      	mov	r1, r7
 800f38e:	4630      	mov	r0, r6
 800f390:	eb04 0903 	add.w	r9, r4, r3
 800f394:	f000 f864 	bl	800f460 <_sbrk_r>
 800f398:	4581      	cmp	r9, r0
 800f39a:	d142      	bne.n	800f422 <_malloc_r+0xea>
 800f39c:	6821      	ldr	r1, [r4, #0]
 800f39e:	1a6d      	subs	r5, r5, r1
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f7ff ffa6 	bl	800f2f4 <sbrk_aligned>
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	d03a      	beq.n	800f422 <_malloc_r+0xea>
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	442b      	add	r3, r5
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	f8d8 3000 	ldr.w	r3, [r8]
 800f3b6:	685a      	ldr	r2, [r3, #4]
 800f3b8:	bb62      	cbnz	r2, 800f414 <_malloc_r+0xdc>
 800f3ba:	f8c8 7000 	str.w	r7, [r8]
 800f3be:	e00f      	b.n	800f3e0 <_malloc_r+0xa8>
 800f3c0:	6822      	ldr	r2, [r4, #0]
 800f3c2:	1b52      	subs	r2, r2, r5
 800f3c4:	d420      	bmi.n	800f408 <_malloc_r+0xd0>
 800f3c6:	2a0b      	cmp	r2, #11
 800f3c8:	d917      	bls.n	800f3fa <_malloc_r+0xc2>
 800f3ca:	1961      	adds	r1, r4, r5
 800f3cc:	42a3      	cmp	r3, r4
 800f3ce:	6025      	str	r5, [r4, #0]
 800f3d0:	bf18      	it	ne
 800f3d2:	6059      	strne	r1, [r3, #4]
 800f3d4:	6863      	ldr	r3, [r4, #4]
 800f3d6:	bf08      	it	eq
 800f3d8:	f8c8 1000 	streq.w	r1, [r8]
 800f3dc:	5162      	str	r2, [r4, r5]
 800f3de:	604b      	str	r3, [r1, #4]
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	f000 f82f 	bl	800f444 <__malloc_unlock>
 800f3e6:	f104 000b 	add.w	r0, r4, #11
 800f3ea:	1d23      	adds	r3, r4, #4
 800f3ec:	f020 0007 	bic.w	r0, r0, #7
 800f3f0:	1ac2      	subs	r2, r0, r3
 800f3f2:	bf1c      	itt	ne
 800f3f4:	1a1b      	subne	r3, r3, r0
 800f3f6:	50a3      	strne	r3, [r4, r2]
 800f3f8:	e7af      	b.n	800f35a <_malloc_r+0x22>
 800f3fa:	6862      	ldr	r2, [r4, #4]
 800f3fc:	42a3      	cmp	r3, r4
 800f3fe:	bf0c      	ite	eq
 800f400:	f8c8 2000 	streq.w	r2, [r8]
 800f404:	605a      	strne	r2, [r3, #4]
 800f406:	e7eb      	b.n	800f3e0 <_malloc_r+0xa8>
 800f408:	4623      	mov	r3, r4
 800f40a:	6864      	ldr	r4, [r4, #4]
 800f40c:	e7ae      	b.n	800f36c <_malloc_r+0x34>
 800f40e:	463c      	mov	r4, r7
 800f410:	687f      	ldr	r7, [r7, #4]
 800f412:	e7b6      	b.n	800f382 <_malloc_r+0x4a>
 800f414:	461a      	mov	r2, r3
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	42a3      	cmp	r3, r4
 800f41a:	d1fb      	bne.n	800f414 <_malloc_r+0xdc>
 800f41c:	2300      	movs	r3, #0
 800f41e:	6053      	str	r3, [r2, #4]
 800f420:	e7de      	b.n	800f3e0 <_malloc_r+0xa8>
 800f422:	230c      	movs	r3, #12
 800f424:	6033      	str	r3, [r6, #0]
 800f426:	4630      	mov	r0, r6
 800f428:	f000 f80c 	bl	800f444 <__malloc_unlock>
 800f42c:	e794      	b.n	800f358 <_malloc_r+0x20>
 800f42e:	6005      	str	r5, [r0, #0]
 800f430:	e7d6      	b.n	800f3e0 <_malloc_r+0xa8>
 800f432:	bf00      	nop
 800f434:	2000221c 	.word	0x2000221c

0800f438 <__malloc_lock>:
 800f438:	4801      	ldr	r0, [pc, #4]	@ (800f440 <__malloc_lock+0x8>)
 800f43a:	f000 b84b 	b.w	800f4d4 <__retarget_lock_acquire_recursive>
 800f43e:	bf00      	nop
 800f440:	2000235c 	.word	0x2000235c

0800f444 <__malloc_unlock>:
 800f444:	4801      	ldr	r0, [pc, #4]	@ (800f44c <__malloc_unlock+0x8>)
 800f446:	f000 b846 	b.w	800f4d6 <__retarget_lock_release_recursive>
 800f44a:	bf00      	nop
 800f44c:	2000235c 	.word	0x2000235c

0800f450 <memset>:
 800f450:	4402      	add	r2, r0
 800f452:	4603      	mov	r3, r0
 800f454:	4293      	cmp	r3, r2
 800f456:	d100      	bne.n	800f45a <memset+0xa>
 800f458:	4770      	bx	lr
 800f45a:	f803 1b01 	strb.w	r1, [r3], #1
 800f45e:	e7f9      	b.n	800f454 <memset+0x4>

0800f460 <_sbrk_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	4d06      	ldr	r5, [pc, #24]	@ (800f47c <_sbrk_r+0x1c>)
 800f464:	2300      	movs	r3, #0
 800f466:	4604      	mov	r4, r0
 800f468:	4608      	mov	r0, r1
 800f46a:	602b      	str	r3, [r5, #0]
 800f46c:	f7f1 ff24 	bl	80012b8 <_sbrk>
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	d102      	bne.n	800f47a <_sbrk_r+0x1a>
 800f474:	682b      	ldr	r3, [r5, #0]
 800f476:	b103      	cbz	r3, 800f47a <_sbrk_r+0x1a>
 800f478:	6023      	str	r3, [r4, #0]
 800f47a:	bd38      	pop	{r3, r4, r5, pc}
 800f47c:	20002358 	.word	0x20002358

0800f480 <__errno>:
 800f480:	4b01      	ldr	r3, [pc, #4]	@ (800f488 <__errno+0x8>)
 800f482:	6818      	ldr	r0, [r3, #0]
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	2000002c 	.word	0x2000002c

0800f48c <__libc_init_array>:
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	4d0d      	ldr	r5, [pc, #52]	@ (800f4c4 <__libc_init_array+0x38>)
 800f490:	4c0d      	ldr	r4, [pc, #52]	@ (800f4c8 <__libc_init_array+0x3c>)
 800f492:	1b64      	subs	r4, r4, r5
 800f494:	10a4      	asrs	r4, r4, #2
 800f496:	2600      	movs	r6, #0
 800f498:	42a6      	cmp	r6, r4
 800f49a:	d109      	bne.n	800f4b0 <__libc_init_array+0x24>
 800f49c:	4d0b      	ldr	r5, [pc, #44]	@ (800f4cc <__libc_init_array+0x40>)
 800f49e:	4c0c      	ldr	r4, [pc, #48]	@ (800f4d0 <__libc_init_array+0x44>)
 800f4a0:	f000 f872 	bl	800f588 <_init>
 800f4a4:	1b64      	subs	r4, r4, r5
 800f4a6:	10a4      	asrs	r4, r4, #2
 800f4a8:	2600      	movs	r6, #0
 800f4aa:	42a6      	cmp	r6, r4
 800f4ac:	d105      	bne.n	800f4ba <__libc_init_array+0x2e>
 800f4ae:	bd70      	pop	{r4, r5, r6, pc}
 800f4b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4b4:	4798      	blx	r3
 800f4b6:	3601      	adds	r6, #1
 800f4b8:	e7ee      	b.n	800f498 <__libc_init_array+0xc>
 800f4ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4be:	4798      	blx	r3
 800f4c0:	3601      	adds	r6, #1
 800f4c2:	e7f2      	b.n	800f4aa <__libc_init_array+0x1e>
 800f4c4:	0800fdd4 	.word	0x0800fdd4
 800f4c8:	0800fdd4 	.word	0x0800fdd4
 800f4cc:	0800fdd4 	.word	0x0800fdd4
 800f4d0:	0800fdd8 	.word	0x0800fdd8

0800f4d4 <__retarget_lock_acquire_recursive>:
 800f4d4:	4770      	bx	lr

0800f4d6 <__retarget_lock_release_recursive>:
 800f4d6:	4770      	bx	lr

0800f4d8 <memcpy>:
 800f4d8:	440a      	add	r2, r1
 800f4da:	4291      	cmp	r1, r2
 800f4dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4e0:	d100      	bne.n	800f4e4 <memcpy+0xc>
 800f4e2:	4770      	bx	lr
 800f4e4:	b510      	push	{r4, lr}
 800f4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4ee:	4291      	cmp	r1, r2
 800f4f0:	d1f9      	bne.n	800f4e6 <memcpy+0xe>
 800f4f2:	bd10      	pop	{r4, pc}

0800f4f4 <_free_r>:
 800f4f4:	b538      	push	{r3, r4, r5, lr}
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	2900      	cmp	r1, #0
 800f4fa:	d041      	beq.n	800f580 <_free_r+0x8c>
 800f4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f500:	1f0c      	subs	r4, r1, #4
 800f502:	2b00      	cmp	r3, #0
 800f504:	bfb8      	it	lt
 800f506:	18e4      	addlt	r4, r4, r3
 800f508:	f7ff ff96 	bl	800f438 <__malloc_lock>
 800f50c:	4a1d      	ldr	r2, [pc, #116]	@ (800f584 <_free_r+0x90>)
 800f50e:	6813      	ldr	r3, [r2, #0]
 800f510:	b933      	cbnz	r3, 800f520 <_free_r+0x2c>
 800f512:	6063      	str	r3, [r4, #4]
 800f514:	6014      	str	r4, [r2, #0]
 800f516:	4628      	mov	r0, r5
 800f518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f51c:	f7ff bf92 	b.w	800f444 <__malloc_unlock>
 800f520:	42a3      	cmp	r3, r4
 800f522:	d908      	bls.n	800f536 <_free_r+0x42>
 800f524:	6820      	ldr	r0, [r4, #0]
 800f526:	1821      	adds	r1, r4, r0
 800f528:	428b      	cmp	r3, r1
 800f52a:	bf01      	itttt	eq
 800f52c:	6819      	ldreq	r1, [r3, #0]
 800f52e:	685b      	ldreq	r3, [r3, #4]
 800f530:	1809      	addeq	r1, r1, r0
 800f532:	6021      	streq	r1, [r4, #0]
 800f534:	e7ed      	b.n	800f512 <_free_r+0x1e>
 800f536:	461a      	mov	r2, r3
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	b10b      	cbz	r3, 800f540 <_free_r+0x4c>
 800f53c:	42a3      	cmp	r3, r4
 800f53e:	d9fa      	bls.n	800f536 <_free_r+0x42>
 800f540:	6811      	ldr	r1, [r2, #0]
 800f542:	1850      	adds	r0, r2, r1
 800f544:	42a0      	cmp	r0, r4
 800f546:	d10b      	bne.n	800f560 <_free_r+0x6c>
 800f548:	6820      	ldr	r0, [r4, #0]
 800f54a:	4401      	add	r1, r0
 800f54c:	1850      	adds	r0, r2, r1
 800f54e:	4283      	cmp	r3, r0
 800f550:	6011      	str	r1, [r2, #0]
 800f552:	d1e0      	bne.n	800f516 <_free_r+0x22>
 800f554:	6818      	ldr	r0, [r3, #0]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	6053      	str	r3, [r2, #4]
 800f55a:	4408      	add	r0, r1
 800f55c:	6010      	str	r0, [r2, #0]
 800f55e:	e7da      	b.n	800f516 <_free_r+0x22>
 800f560:	d902      	bls.n	800f568 <_free_r+0x74>
 800f562:	230c      	movs	r3, #12
 800f564:	602b      	str	r3, [r5, #0]
 800f566:	e7d6      	b.n	800f516 <_free_r+0x22>
 800f568:	6820      	ldr	r0, [r4, #0]
 800f56a:	1821      	adds	r1, r4, r0
 800f56c:	428b      	cmp	r3, r1
 800f56e:	bf04      	itt	eq
 800f570:	6819      	ldreq	r1, [r3, #0]
 800f572:	685b      	ldreq	r3, [r3, #4]
 800f574:	6063      	str	r3, [r4, #4]
 800f576:	bf04      	itt	eq
 800f578:	1809      	addeq	r1, r1, r0
 800f57a:	6021      	streq	r1, [r4, #0]
 800f57c:	6054      	str	r4, [r2, #4]
 800f57e:	e7ca      	b.n	800f516 <_free_r+0x22>
 800f580:	bd38      	pop	{r3, r4, r5, pc}
 800f582:	bf00      	nop
 800f584:	2000221c 	.word	0x2000221c

0800f588 <_init>:
 800f588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58a:	bf00      	nop
 800f58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f58e:	bc08      	pop	{r3}
 800f590:	469e      	mov	lr, r3
 800f592:	4770      	bx	lr

0800f594 <_fini>:
 800f594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f596:	bf00      	nop
 800f598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f59a:	bc08      	pop	{r3}
 800f59c:	469e      	mov	lr, r3
 800f59e:	4770      	bx	lr
